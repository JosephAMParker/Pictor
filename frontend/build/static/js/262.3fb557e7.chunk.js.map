{"version":3,"file":"static/js/262.3fb557e7.chunk.js","mappings":"8OAsBO,MAAMA,EAYFC,IAAAA,GAEG,MAAAC,EAAW,IAAIC,EAAAA,EAAa,CAC9BC,OAAQ,CAAEC,MAAO,IAAIC,aAAa,CAAC,EAAG,EAAG,EAAG,IAAKC,KAAM,aACvDC,iBAAkB,CAAEH,MAAO,IAAII,EAAAA,EAAUF,KAAM,eAC/CG,OAAQ,CAAEL,MAAO,EAAGE,KAAM,SAGxBI,GAAYC,EAAAA,EAAAA,GAA2B,CACzCC,KAAM,WACNC,KAAM,CACFC,EAAAA,GACAC,EAAAA,EAAAA,GAA0BC,EAAAA,GAC1BC,EAAAA,GACAC,EAAAA,KAIH,KAAAC,OAAS,IAAIC,EAAAA,EAAO,CACrBV,YACAW,UAAW,CACPC,cAAerB,EACfsB,cAAeC,EAAAA,IAEtB,CAGEC,OAAAA,CAAQC,EAA4BC,GAEvC,MAAMC,EAAUD,EAAWC,QACrBT,EAASS,EAAQC,cAAgBC,KAAKX,OACtCY,EAAWL,EAAaK,SACxBC,EAAgBD,EAASE,iBAEzB,SACFC,EAAA,aAAUC,GACVH,EAAcI,qBAAqBR,GAGvCT,EAAOkB,OAAO,GAAKN,EAASO,eAAeC,UAElCR,EAAAZ,OAAOqB,KAAKrB,GAErBY,EAASG,SAASM,KAAKN,EAAUf,EAAOT,WAExC,MAAM+B,EAAUN,EAAaA,aAE7B,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAaQ,gBAAiBD,IAClD,CACU,MAAAE,EAAQH,EAAQC,GAEtB,GAAIE,EAAMC,KACV,CACI,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,SAASA,SAASC,OAAQF,IAEhDf,EAASkB,QAAQT,KAAKI,EAAMG,SAASA,SAASD,GAAIA,GAGtDf,EAASG,SAASgB,KAAK,gBAAiBN,EAAMC,KAAMD,EAAMO,MAAK,CACnE,CACJ,CAGGC,OAAAA,GAEE,KAAAjC,OAAOiC,SAAQ,GACpBtB,KAAKX,OAAS,MA9ETpB,EAGKsD,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAcC,mBAElB3C,KAAM,Y,kCCZP,MAAM4C,EAWFxD,IAAAA,GAEH,MAAMU,GAAYC,EAAAA,EAAAA,GAA2B,CACzCC,KAAM,OACNC,KAAM,CACFI,EAAAA,GACAwC,EAAAA,EACAvC,EAAAA,KAIH,KAAAwC,QAAU,IAAItC,EAAAA,EAAO,CACtBV,YACAW,UAAW,CACPsC,SAAUC,EAAAA,EAAQC,MAAMC,SAE/B,CAGErC,OAAAA,CAAQsC,EAAoBC,GAE/B,MAAMjC,EAAWgC,EAAShC,SAE1B,IAAIZ,EAAiB6C,EAAKN,QAE1B,GAAKvC,GAQL,IACUA,EAAOT,UAMb,YAHKuD,EAAAA,EAAAA,GAAA,+BAAgCD,EAAK7C,YAX9C,CACIA,EAASW,KAAK4B,QAER,MAAAI,EAASE,EAAKf,QAAQa,OAE5B3C,EAAOE,UAAUsC,SAAWG,EACrB3C,EAAAE,UAAU6C,SAAWJ,EAAOK,KAAA,CAavChD,EAAOkB,OAAO,KAAON,EAASO,eAAeC,UACtCpB,EAAAkB,OAAO,KAAO0B,EAASK,uBAE9BrC,EAASsC,QAAQnB,KAAK,CAClBhB,SAAU8B,EAAKM,UACfnD,SACAoD,MAAOP,EAAKO,OACf,CAGEnB,OAAAA,GAEE,KAAAM,QAAQN,SAAQ,GACrBtB,KAAK4B,QAAU,MArEVF,EAEKH,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAcC,mBAElB3C,KAAM,Q,cCHP,MAAM4D,EAANC,WAAAA,GAWH,KAAQC,YAAa,EACJ,KAAAC,WAAaC,EAAAA,EAAMC,OAAM,CAEnC7E,IAAAA,CAAK8E,GAER,MAAMpE,GAAYC,EAAAA,EAAAA,GAA2B,CACzCC,KAAM,QACNC,KAAM,CACFC,EAAAA,GACAC,EAAAA,EAAAA,GAA0BC,EAAAA,GAC1BE,EAAAA,KAIH,KAAAwC,QAAU,IAAItC,EAAAA,EAAO,CACtBV,YACAW,UAAW,CACPE,cAAeC,EAAAA,KAIvBsD,EAAY/C,SAASgD,QAAQC,cAAcC,IAAInD,KAAI,CAGhDkD,aAAAA,GAEHlD,KAAK4C,YAAa,EAGfvB,KAAAA,CAAM+B,EAAwBhD,GAEjC,MAAMH,EAAWmD,EAAUnD,SAE3BA,EAASZ,OAAOqB,KAAKV,KAAK4B,QAAS5B,KAAK4C,YAExC3C,EAASZ,OAAOgE,mBAAmBpD,EAASO,eAAe8C,cAE3DrD,EAASG,SAASM,KAAKN,EAAUJ,KAAK4B,QAAQhD,UAAS,CAGpDe,OAAAA,CAAQyD,EAAwBtC,GAEnC,MAAMb,EAAWmD,EAAUnD,SAE3BD,KAAK4C,YAAa,EAEb,KAAAC,WAAWU,UAAYzC,EAAMyC,UAEzBtD,EAAAwC,MAAMe,IAAIxD,KAAK6C,YAElB,MAAA5B,EAAWH,EAAMG,SAASA,SAEhC,IAAK,IAAIL,EAAI,EAAGA,EAAIK,EAASC,OAAQN,IAEjCX,EAASkB,QAAQT,KAAKO,EAASL,GAAIA,GAGvCX,EAASG,SAASgB,KAAK,gBAAiBN,EAAMC,KAAMD,EAAMO,MAAK,CAG5DC,OAAAA,GAEE,KAAAM,QAAQN,SAAQ,GACrBtB,KAAK4B,QAAU,MA1EVc,EAGKnB,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAcC,mBAElB3C,KAAM,S,0CCjBF2E,EAAA,CAAAC,IAGRA,EAAAA,EAAA,qBAAuB,OAAvB,uBACAA,EAAAA,EAAA,aAAe,OAAf,eACAA,EAAAA,EAAA,eAAiB,OAAjB,iBALQA,GAAA,CAAAD,GAAA,ICRL,MAAME,EAOThB,WAAAA,CAAYiB,EAAqBpF,GAE7BwB,KAAK4D,OAASA,GAAU,KACxB5D,KAAK6D,UAAW,EAChB7D,KAAK8D,YAAa,EAClB9D,KAAKxB,KAAOA,CAAA,ECab,MAAMuF,EAqBTpB,WAAAA,CAAY1C,GAVJ,KAAA+D,YAAgDC,OAAAC,OAAO,MAG9C,KAAAC,kBAAoDF,OAAAC,OAAO,MASxElE,KAAKoE,UAAYnE,CAAA,CAMdqB,OAAAA,GAEHtB,KAAKoE,UAAY,KACjBpE,KAAKqE,IAAM,KACXrE,KAAKgE,YAAc,KAClBhE,KAAKmE,kBAA6B,KAI7BjB,aAAAA,GAED,KAAAc,YAAqBC,OAAAC,OAAO,MAC5B,KAAAG,IAAMrE,KAAKoE,UAAUE,EAAA,CAGvBC,WAAAA,CAAYX,GAEf,OAAO5D,KAAKgE,YAAYJ,EAAOY,MAAQxE,KAAKyE,eAAeb,EAAM,CAO9DlD,IAAAA,CAAKkD,GAEF,MAAES,IAAKC,GAAOtE,KAEd0E,EAAW1E,KAAKuE,YAAYX,GAElCU,EAAGK,WAAWD,EAASlG,KAAMkG,EAASd,OAAM,CAUzCgB,cAAAA,CAAehB,EAAgBiB,GAE5B,MAAER,IAAKC,GAAOtE,KAEpB,GAAIA,KAAKmE,kBAAkBU,KAAWjB,EACtC,CACU,MAAAc,EAAW1E,KAAKuE,YAAYX,GAE7B,KAAAO,kBAAkBU,GAASjB,EAEhCU,EAAGM,eAAeN,EAAGQ,eAAgBD,EAAOH,EAASd,OAAM,CAC/D,CAUGmB,eAAAA,CAAgBnB,EAAgBiB,EAAgBG,GAE7C,MAAEX,IAAKC,GAAOtE,KAEpBgF,EAASA,GAAU,EAEb,MAAAN,EAAW1E,KAAKuE,YAAYX,GAE/BU,EAAAS,gBAAgBT,EAAGQ,eAAgBD,GAAS,EAAGH,EAASd,OAAiB,IAAToB,EAAc,IAAG,CAOjFC,YAAAA,CAAarB,GAEV,MAAES,IAAKC,GAAOtE,KAEd0E,EAAW1E,KAAKuE,YAAYX,GAE9B,GAAAA,EAAOsB,YAAcR,EAASb,SAEvB,OAAAa,EAGXA,EAASb,SAAWD,EAAOsB,UAE3BZ,EAAGK,WAAWD,EAASlG,KAAMkG,EAASd,QAEtC,MAAMuB,EAAOvB,EAAOuB,KAEpB,GAAIT,EAASZ,YAAcF,EAAOuB,KAAKrB,WAIhCQ,EAAAc,cAAcV,EAASlG,KAAM,EAAG2G,EAAM,EAAGvB,EAAOyB,YAAcF,EAAKG,uBAG1E,CACU,MAAAC,EAAY3B,EAAO4B,WAAWC,MAAQC,EAAAA,EAAYC,OAAUrB,EAAGsB,YAActB,EAAGuB,aAEtFnB,EAASZ,WAAaqB,EAAKrB,WAG3BQ,EAAGwB,WAAWpB,EAASlG,KAAM2G,EAAMI,EAAQ,CAGxC,OAAAb,CAAA,CAIJqB,UAAAA,GAEH,MAAMzB,EAAKtE,KAAKqE,IAEL,UAAA2B,KAAMhG,KAAKgE,YAElBM,EAAG2B,aAAajG,KAAKgE,YAAYgC,GAAIpC,QAGpC,KAAAI,YAAqBC,OAAAC,OAAO,KAAI,CAQ/BgC,eAAAA,CAAgBtC,EAAgBuC,GAEtC,MAAMzB,EAAW1E,KAAKgE,YAAYJ,EAAOY,KAEnCF,EAAKtE,KAAKqE,IAEX8B,GAEE7B,EAAA2B,aAAavB,EAASd,QAGxB,KAAAI,YAAYJ,EAAOY,KAAO,KAQzBC,cAAAA,CAAeb,GAEf,MAAES,IAAKC,GAAOtE,KAEpB,IAAIxB,EAAOiF,EAAY2C,aAElBxC,EAAO4B,WAAWC,MAAQC,EAAAA,EAAYW,MAEvC7H,EAAOiF,EAAY6C,qBAEb1C,EAAO4B,WAAWC,MAAQC,EAAAA,EAAYa,UAE5C/H,EAAOiF,EAAYqB,gBAGvB,MAAMJ,EAAW,IAAIf,EAASW,EAAGkC,eAAgBhI,GAM1C,OAJF,KAAAwF,YAAYJ,EAAOY,KAAOE,EAE/Bd,EAAO6C,GAAG,UAAWzG,KAAKkG,gBAAiBlG,MAEpC0E,CAAA,EAvMFX,EAGKxC,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,UCOP,MAAM6H,EAAN,MAAMA,EAmFThE,WAAAA,CAAY1C,GApCZ,KAAO2G,SAAW,CAEdC,eAAe,EAEfC,qBAAqB,EAErBC,mBAAmB,EAEnBC,cAAc,EAEdC,mBAAmB,EAEnBC,MAAM,EAENC,kBAAkB,GAwBlBnH,KAAKoE,UAAYnE,EAEZ,KAAAmH,WAAoBnD,OAAAC,OAAO,MAGhClE,KAAKqH,kBAAoBrH,KAAKqH,kBAAkB3G,KAAKV,MACrDA,KAAKsH,sBAAwBtH,KAAKsH,sBAAsB5G,KAAKV,KAAI,CAOrE,UAAIuH,GAEA,OAASvH,KAAKsE,IAAMtE,KAAKsE,GAAGkD,eAAc,CAOpCtE,aAAAA,CAAcoB,GAEpBtE,KAAKsE,GAAKA,EACVtE,KAAKoE,UAAUE,GAAKA,CAAA,CAGjBpG,IAAAA,CAAKuJ,GAOR,IALAA,EAAU,IAAKd,EAAgBe,kBAAmBD,IAKtC3H,QAEH,KAAA6H,gBAAgBF,EAAQ3H,aAGjC,KAAA8H,EAAAC,EACI,MAAMC,EAAQ9H,KAAKoE,UAAU2D,WAAWD,MAAQ,EAC1CE,EAAmD,QAAnDJ,EAAqBH,EAAQO,0BAAsB,IAAAJ,GAAAA,EACnDK,EAAYR,EAAQQ,YAAcjI,KAAKoE,UAAU8D,WAAWC,cAE7D,KAAAC,cAAcX,EAAQY,mBAAoB,CAC3CP,QACAE,qBACAC,YACAK,SAAS,EACTC,sBAAuBd,EAAQc,sBAC/BC,gBAA4C,QAA5CX,EAAiBJ,EAAQe,uBAAmB,IAAAX,EAAAA,EAAA,WAC/C,CACL,CAQMF,eAAAA,CAAgBrD,GAEtBtE,KAAKsE,GAAKA,EAEL,KAAAmE,aAAenE,aAAcoE,uBAAyB,EAAI,EAE/D1I,KAAK2I,gBAEL3I,KAAK4I,gBAAgBtE,GAErBtE,KAAKoE,UAAUnB,QAAQC,cAAc2F,KAAKvE,GAEpC,MAAAwE,EAAU9I,KAAKoE,UAAU2E,KAAKC,OAEnCF,EAAgBG,iBAAiB,mBAAoBjJ,KAAKqH,mBAAmB,GAC9EyB,EAAQG,iBAAiB,uBAAwBjJ,KAAKsH,uBAAuB,EAAK,CAU5Ec,aAAAA,CAAcC,EAA2BZ,GAE3C,IAAAnD,EACE,MAAA0E,EAAShJ,KAAKoE,UAAU2E,KAAKC,OAOnC,GAL2B,IAAvBX,IAEK/D,EAAA0E,EAAOE,WAAW,SAAUzB,KAGhCnD,IAEIA,EAAA0E,EAAOE,WAAW,QAASzB,IAE3BnD,GAGK,UAAI6E,MAAM,sEAIxBnJ,KAAKsE,GAAKA,EAEL,KAAAqD,gBAAgB3H,KAAKsE,GAAE,CAItBqE,aAAAA,GAGA,SAAErE,GAAOtE,KAEToJ,EAAS,CACXC,qBAAsB/E,EAAGgF,aAAa,kCACtCC,mBAAoBjF,EAAGgF,aAAa,4BAEpCE,KAAMlF,EAAGgF,aAAa,iCACtBG,UAAWnF,EAAGgF,aAAa,sCAC3BI,IAAKpF,EAAGgF,aAAa,gCACrBK,KAAMrF,EAAGgF,aAAa,iCACtBM,MAAOtF,EAAGgF,aAAa,mCAChBhF,EAAGgF,aAAa,yCACvBO,IAAKvF,EAAGgF,aAAa,gCACrBQ,KAAMxF,EAAGgF,aAAa,iCACtBS,KAAMzF,EAAGgF,aAAa,gCACtBU,KAAM1F,EAAGgF,aAAa,gCACtBW,YAAa3F,EAAGgF,aAAa,uBAGP,IAAtBtJ,KAAKyI,aAELzI,KAAKoH,WAAa,IACXgC,EAEHc,YAAa5F,EAAGgF,aAAa,sBAC7Ba,aAAc7F,EAAGgF,aAAa,uBAC9BvC,kBAAmBzC,EAAGgF,aAAa,4BAC5BhF,EAAGgF,aAAa,gCAChBhF,EAAGgF,aAAa,kCACvBc,mBAAoB9F,EAAGgF,aAAa,0BAEpCe,aAAc/F,EAAGgF,aAAa,qBAC9BC,mBAAoBjF,EAAGgF,aAAa,4BACpCgB,iBAAkBhG,EAAGgF,aAAa,0BAClCiB,uBAAwBjG,EAAGgF,aAAa,iCACxCkB,yBAA0BlG,EAAGgF,aAAa,0BAC1CmB,KAAMnG,EAAGgF,aAAa,aAK1BtJ,KAAKoH,WAAa,IACXgC,EACHsB,iBAAkBpG,EAAGgF,aAAa,0BAE1C,CAOMjC,iBAAAA,CAAkBsD,GAExBA,EAAMC,iBAGF5K,KAAK6K,qBAEL7K,KAAK6K,oBAAqB,EAE1BC,YAAW,KAGP,IAAAC,EADI/K,KAAKsE,GAAGkD,kBAEQ,QAAXuD,EAAA,KAAA3D,WAAW6C,mBAAA,IAAAc,GAAXA,EAAwBC,iBAAe,GAEjD,GACP,CAIM1D,qBAAAA,GAENtH,KAAKoE,UAAUnB,QAAQC,cAAc2F,KAAK7I,KAAKsE,GAAE,CAG9ChD,OAAAA,GACP,IAAA2J,EACU,MAAAnC,EAAU9I,KAAKoE,UAAU2E,KAAKC,OAEpChJ,KAAKoE,UAAY,KAGhB0E,EAAgBoC,oBAAoB,mBAAoBlL,KAAKqH,mBACtDyB,EAAAoC,oBAAoB,uBAAwBlL,KAAKsH,uBAEpD,KAAAhD,GAAG6G,WAAW,MAEH,QAAXF,EAAA,KAAA7D,WAAW6C,mBAAA,IAAAgB,GAAXA,EAAwBhB,aAAY,CAUtCmB,gBAAAA,GACP,IAAAC,EACoB,QAAXA,EAAA,KAAAjE,WAAW6C,mBAAA,IAAAoB,GAAXA,EAAwBpB,cAC7BjK,KAAK6K,oBAAqB,EAMpBjC,eAAAA,CAAgBtE,GAEhB,MAAAgH,EAAahH,EAAGiH,uBAGlBD,IAAeA,EAAWhD,UAI1BnG,EAAAA,EAAAA,GAAK,yFAMT,MAAMyE,EAAW5G,KAAK4G,SAEhB4E,EAAiC,IAAtBxL,KAAKyI,aAChBrB,EAAapH,KAAKoH,WAExBR,EAASC,cAAgB2E,KAAcpE,EAAWgD,mBAClDxD,EAASE,oBAAsB0E,EAC/B5E,EAASG,kBAAoByE,KAAcpE,EAAWL,kBACtDH,EAASI,aAAewE,KAAcpE,EAAWqD,KACjD7D,EAASK,kBAAoBuE,EAC7B5E,EAASO,iBAAmBqE,EAC5B5E,EAASM,KAAOsE,EAEX5E,EAASC,gBAIV1E,EAAAA,EAAAA,GAAK,iGAGT,GAxVKwE,EAGKpF,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,WAPD6H,EAWKe,eAAuC,CAKjD5H,QAAS,KAKTkI,oBAAoB,EAKpBO,uBAAuB,EAKvBC,qBAAiB,EAKjBH,mBAAoB,GApCrB,IAAMoD,EAAN9E,E,wBCtBK+E,EAAA,CAAAC,IAGRA,EAAAA,EAAA,KAAO,MAAP,OACAA,EAAAA,EAAA,IAAM,MAAN,MACAA,EAAAA,EAAA,GAAK,OAAL,KACAA,EAAAA,EAAA,IAAM,MAAN,MACAA,EAAAA,EAAA,aAAe,OAAf,eACAA,EAAAA,EAAA,YAAc,OAAd,cACAA,EAAAA,EAAA,WAAa,OAAb,aACAA,EAAAA,EAAA,YAAc,OAAd,cACAA,EAAAA,EAAA,MAAQ,MAAR,QACAA,EAAAA,EAAA,UAAY,MAAZ,YACAA,EAAAA,EAAA,gBAAkB,MAAlB,kBACAA,EAAAA,EAAA,gBAAkB,MAAlB,kBACAA,EAAAA,EAAA,cAAgB,OAAhB,gBAfQA,GAAA,CAAAD,GAAA,IAiCAE,EAAA,CAAAC,IAGRA,EAAAA,EAAA,WAAa,MAAb,aACAA,EAAAA,EAAA,iBAAmB,OAAnB,mBACAA,EAAAA,EAAA,iBAAmB,OAAnB,mBACAA,EAAAA,EAAA,4BAA8B,OAA9B,8BACAA,EAAAA,EAAA,4BAA8B,OAA9B,8BACAA,EAAAA,EAAA,4BAA8B,OAA9B,8BACAA,EAAAA,EAAA,4BAA8B,OAA9B,8BACAA,EAAAA,EAAA,4BAA8B,OAA9B,8BACAA,EAAAA,EAAA,4BAA8B,OAA9B,8BAXQA,GAAA,CAAAD,GAAA,IAsCAE,EAAA,CAAAC,IAORA,EAAAA,EAAA,cAAgB,MAAhB,gBAIAA,EAAAA,EAAA,eAAiB,MAAjB,iBAKAA,EAAAA,EAAA,qBAAuB,OAAvB,uBAKAA,EAAAA,EAAA,uBAAyB,OAAzB,yBAKAA,EAAAA,EAAA,uBAAyB,OAAzB,yBAIAA,EAAAA,EAAA,aAAe,MAAf,eAIAA,EAAAA,EAAA,6BAA+B,OAA/B,+BAIAA,EAAAA,EAAA,4BAA8B,OAA9B,8BAIAA,EAAAA,EAAA,kBAAoB,OAApB,oBAIAA,EAAAA,EAAA,yBAA2B,OAA3B,2BAIAA,EAAAA,EAAA,KAAO,MAAP,OAIAA,EAAAA,EAAA,MAAQ,MAAR,QAIAA,EAAAA,EAAA,IAAM,MAAN,MAIAA,EAAAA,EAAA,MAAQ,MAAR,QAIAA,EAAAA,EAAA,+BAAiC,OAAjC,iCAIAA,EAAAA,EAAA,WAAa,OAAb,aAtEQA,GAAA,CAAAD,GAAA,ICtFZ,MAAME,EAAU,CACZC,QAASH,EAASI,cAClBC,QAASL,EAASI,cAClBE,QAASN,EAASO,KAClBC,QAASR,EAASO,KAClBE,SAAUT,EAASI,cACnBM,SAAUV,EAASI,cACnBO,SAAUX,EAASO,KACnBK,SAAUZ,EAASO,KACnBM,SAAUb,EAASc,eACnBC,SAAUf,EAASc,eACnBE,SAAUhB,EAASiB,MACnBC,SAAUlB,EAASiB,MACnBE,UAAWnB,EAASc,eACpBM,UAAWpB,EAASc,eACpBO,UAAWrB,EAASiB,MACpBK,UAAWtB,EAASiB,MACpBM,UAAWvB,EAASwB,WACpBC,UAAWzB,EAASwB,WACpBE,QAAS1B,EAAS2B,MAClBC,UAAW5B,EAAS2B,MACpBE,UAAW7B,EAAS2B,MACpBG,UAAW9B,EAAS2B,MACpBI,OAAQ/B,EAASgC,aACjBC,SAAUjC,EAASgC,aACnBE,SAAUlC,EAASgC,aACnBG,SAAUnC,EAASgC,aACnBI,OAAQpC,EAASqC,IACjBC,SAAUtC,EAASqC,IACnBE,SAAUvC,EAASqC,IACnBG,SAAUxC,EAASqC,KAGhB,SAASI,EAAoBC,GACpC,IAAAC,EACW,OAAc,QAAdA,EAAAzC,EAAQwC,UAAM,IAAAC,EAAAA,EAAKzC,EAAQwB,OACtC,CC5BA,MAAMkB,EAAkB,CACpB,aAAc,EACd,YAAa,EACb,aAAc,EACd,gBAAiB,EACjB,iBAAkB,GAOf,MAAMC,EAgCThM,WAAAA,CAAY1C,GANF,KAAA2O,iBAAkF3K,OAAAC,OAAO,MAQ/FlE,KAAKoE,UAAYnE,EACjBD,KAAK6O,gBAAkB,KACvB7O,KAAK8O,WAAa,KAElB9O,KAAK+O,QAAS,EACd/O,KAAKgP,aAAc,EAIb9L,aAAAA,GAEN,MAAMoB,EAAKtE,KAAKsE,GAAKtE,KAAKoE,UAAUE,GAEpC,IAAKtE,KAAKoE,UAAUtE,QAAQ8G,SAASG,kBAE3B,UAAIoC,MAAM,kEAGpB,MAAM8F,EAAqBjP,KAAKoE,UAAUtE,QAAQsH,WAAWL,kBAEzDkI,IAEG3K,EAAA4K,kBAAoB,IACnBD,EAAmBE,uBAEvB7K,EAAG8K,gBAAmBC,GAClBJ,EAAmBK,mBAAmBD,GAE1C/K,EAAGiL,kBAAqBF,GACpBJ,EAAmBO,qBAAqBH,IAGhD,MAAMI,EAA2BzP,KAAKoE,UAAUtE,QAAQsH,WAAWoD,yBAE/DiF,IAEAnL,EAAGoL,oBAAsB,CAACC,EAAGC,EAAGC,EAAGC,KAE/BL,EAAyBM,yBAAyBJ,EAAGC,EAAGC,EAAGC,EAAE,EAGjExL,EAAG0L,sBAAwB,CAACL,EAAGC,EAAGC,EAAGC,EAAGG,KAEpCR,EAAyBS,2BAA2BP,EAAGC,EAAGC,EAAGC,EAAGG,EAAE,EAGtE3L,EAAG6L,oBAAsB,CAACR,EAAGC,IACzBH,EAAyBjF,yBAAyBmF,EAAGC,IAG7D5P,KAAK6O,gBAAkB,KACvB7O,KAAK8O,WAAa,KACb,KAAAF,iBAA0B3K,OAAAC,OAAO,KAAI,CAQvCxD,IAAAA,CAAKN,EAAqBgQ,GAI7B,MAAM9L,EAAKtE,KAAKsE,GAEhBtE,KAAK6O,gBAAkBzO,EAEvB,MAAMiP,EAAMrP,KAAKqQ,OAAOjQ,EAAUgQ,GAE9BpQ,KAAK8O,aAAeO,IAEpBrP,KAAK8O,WAAaO,EAElB/K,EAAG8K,gBAAgBC,IAGvBrP,KAAKsQ,eAAc,CAIhBC,KAAAA,GAEHvQ,KAAKwQ,QAAO,CAITF,aAAAA,GAEH,MAAMlQ,EAAWJ,KAAK6O,gBAEhB4B,EAAezQ,KAAKoE,UAAUR,OAEpC,IAAK,IAAIhD,EAAI,EAAGA,EAAIR,EAASsQ,QAAQxP,OAAQN,IAC7C,CACU,MAAAgD,EAASxD,EAASsQ,QAAQ9P,GAEhC6P,EAAaxL,aAAarB,EAAM,CACpC,CAQM+M,kBAAAA,CAAmBvQ,EAAoBgQ,GAG7C,MAAMQ,EAAqBxQ,EAASkL,WAC9BuF,EAAmBT,EAAQU,eAEjC,IAAK,MAAM9P,KAAK6P,EAER,IAACD,EAAmB5P,GAEpB,MAAM,IAAImI,MAAA,2DAAA4H,OAAiE/P,EAAC,eAEpF,CASMgQ,YAAAA,CAAa5Q,EAAoBgQ,GAEvC,MAAMa,EAAU7Q,EAASkL,WACnBuF,EAAmBT,EAAQU,eAE3BI,EAAU,CAAC,IAAK9Q,EAASoE,KAE/B,IAAK,MAAM5D,KAAKqQ,EAERJ,EAAiBjQ,IAEjBsQ,EAAQC,KAAKvQ,EAAGiQ,EAAiBjQ,GAAGwQ,UAIrC,OAAAF,EAAQG,KAAK,IAAG,CAGjBhB,MAAAA,CAAOjQ,EAAoBgQ,GACrC,IAAAkB,EACW,OAAkC,QAAlCA,EAAAtR,KAAK4O,iBAAiBxO,EAASoE,YAAG,IAAA8M,OAAA,EAAlCA,EAAsClB,EAAQmB,QAASvR,KAAKwR,gBAAgBpR,EAAUgQ,EAAO,CAW9FoB,eAAAA,CAAgBpR,EAAoBgQ,GAEpC,MAAA9L,EAAKtE,KAAKoE,UAAUE,GAEpBmM,EAAezQ,KAAKoE,UAAUR,OAE/B,KAAAQ,UAAU/E,OAAOoS,gBAAgBrB,GAEjC,KAAAO,mBAAmBvQ,EAAUgQ,GAElC,MAAMsB,EAAY1R,KAAKgR,aAAa5Q,EAAUgQ,GAEzCpQ,KAAK4O,iBAAiBxO,EAASoE,OAEhCxE,KAAK4O,iBAAiBxO,EAASoE,KAAOP,OAAOC,OAAO,MAEpD9D,EAASqG,GAAG,UAAWzG,KAAK2R,kBAAmB3R,OAGnD,MAAM4R,EAAgB5R,KAAK4O,iBAAiBxO,EAASoE,KAEjD,IAAA6K,EAAMuC,EAAcF,GAExB,GAAIrC,EAKO,OAFOuC,EAAAxB,EAAQmB,MAAQlC,EAEvBA,GAGMwC,EAAAA,EAAAA,GAAAzR,EAAUgQ,EAAQU,gBAEnC,MAAMJ,EAAUtQ,EAASsQ,QAGzBrB,EAAM/K,EAAG4K,oBAET5K,EAAG8K,gBAAgBC,GAInB,IAAK,IAAIzO,EAAI,EAAGA,EAAI8P,EAAQxP,OAAQN,IACpC,CACU,MAAAgD,EAAS8M,EAAQ9P,GAEvB6P,EAAa/P,KAAKkD,EAAM,CAcrB,OARF,KAAAkO,YAAY1R,EAAUgQ,GAGbwB,EAAAxB,EAAQmB,MAAQlC,EAC9BuC,EAAcF,GAAarC,EAE3B/K,EAAG8K,gBAAgB,MAEZC,CAAA,CAQDsC,iBAAAA,CAAkBvR,EAAoB+F,GAE5C,MAAMyL,EAAgB5R,KAAK4O,iBAAiBxO,EAASoE,KAE/CF,EAAKtE,KAAKsE,GAEhB,GAAIsN,EACJ,CACI,GAAIzL,EAEA,IAAK,MAAMvF,KAAKgR,EAER5R,KAAK8O,aAAe8C,EAAchR,IAElCZ,KAAKwQ,SAGNlM,EAAAiL,kBAAkBqC,EAAchR,IAItC,KAAAgO,iBAAiBxO,EAASoE,KAAO,KAC1C,CAOGuB,UAAAA,GACP,IADkBI,EAAA4L,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,IAAAA,UAAA,GAEd,MAAMzN,EAAKtE,KAAKsE,GAEL,UAAA1D,KAAKZ,KAAK4O,iBACrB,CACI,GAAIzI,EAEA,IAAK,MAAMnF,KAAKhB,KAAK4O,iBAAiBhO,GACtC,CACU,MAAAgR,EAAgB5R,KAAK4O,iBAAiBhO,GAExCZ,KAAK8O,aAAe8C,GAEpB5R,KAAKwQ,SAGNlM,EAAAiL,kBAAkBqC,EAAc5Q,GAAE,CAIxC,KAAA4N,iBAAiBhO,GAAK,KAC/B,CAQMkR,WAAAA,CAAY1R,EAAoBgQ,GAEhC,MAAA9L,EAAKtE,KAAKoE,UAAUE,GAEpBmM,EAAezQ,KAAKoE,UAAUR,OAC9B0H,EAAalL,EAASkL,WAExBlL,EAAS6R,aAGIxB,EAAA/P,KAAKN,EAAS6R,aAG/B,IAAIC,EAAa,KAGjB,IAAK,MAAMlR,KAAKsK,EAChB,CACU,MAAA6G,EAAY7G,EAAWtK,GACvB4C,EAASuO,EAAUvO,OACnBc,EAAW+L,EAAalM,YAAYX,GAEtC,GAAAwM,EAAQU,eAAe9P,GAC3B,CACQkR,IAAexN,IAEf+L,EAAa/P,KAAKkD,GAELsO,EAAAxN,GAGjB,MAAM0M,EAAWe,EAAUf,SAI3B9M,EAAG8N,wBAAwBhB,GAErB,MAAAiB,GAAgBC,EAAAA,EAAAA,GAA2BH,EAAU3D,QAS3D,GAPGlK,EAAAiO,oBAAoBnB,EACnBiB,EAActR,KACdwN,EAAoB4D,EAAU3D,QAC9B6D,EAAcG,WACdL,EAAUM,OACVN,EAAUnN,QAEVmN,EAAUO,SACd,CAEI,IAAI1S,KAAKgP,YAMC,UAAI7F,MAAM,kEAJb7E,EAAA6L,oBAAoBiB,EAAU,EAKrC,CACJ,CACJ,CACJ,CAaGhQ,IAAAA,CAAKuR,EAAqB5R,EAAeM,EAAgBuR,GAEtD,SAAEtO,GAAOtE,KAAKoE,UACdhE,EAAWJ,KAAK6O,gBAEhBgE,EAAanE,EAAgBtO,EAASuS,UAAYA,GAIxD,GAFAC,IAAAA,EAAkBxS,EAASwS,eAEvBxS,EAAS6R,YACb,CACU,MAAAa,EAAW1S,EAAS6R,YAAY9M,KAAKG,kBACrCyN,EAAsB,IAAbD,EAAiBxO,EAAGsI,eAAiBtI,EAAGwJ,aAEnD8E,EAAgB,EAGbtO,EAAA0L,sBAAsB6C,EAAY9R,GAAQX,EAAS6R,YAAY9M,KAAKjE,OAAQ6R,GAAS1R,GAAS,GAAKyR,EAAUF,GAM7GtO,EAAA0O,aAAaH,EAAY9R,GAAQX,EAAS6R,YAAY9M,KAAKjE,OAAQ6R,GAAS1R,GAAS,GAAKyR,EAEjG,MAEKF,EAAgB,EAGlBtO,EAAAoL,oBAAoBmD,EAAYxR,GAAS,EAAGN,GAAQX,EAAS6S,UAAWL,GAI3EtO,EAAG4O,WAAWL,EAAYxR,GAAS,EAAGN,GAAQX,EAAS6S,WAGpD,OAAAjT,IAAA,CAIDwQ,MAAAA,GAED,KAAAlM,GAAG8K,gBAAgB,MACxBpP,KAAK8O,WAAa,KAClB9O,KAAK6O,gBAAkB,KAGpBvN,OAAAA,GAEHtB,KAAKoE,UAAY,KACjBpE,KAAKsE,GAAK,KACVtE,KAAK8O,WAAa,KAClB9O,KAAK6O,gBAAkB,MA5blBF,EAGKpN,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,Y,kCClBd,MAAMqU,EAAsB,IAAIC,EAAAA,EAAS,CACrC9H,WAAY,CACR+H,UAAW,EACN,GAAM,EACP,GAAM,GACL,EAAK,MA6BLC,EAAN,MAAMA,EA2BT3Q,WAAAA,CAAY1C,GAVZ,KAAOkI,eAAgB,EAKvB,KAAQoL,0BAA2B,EAO/BvT,KAAKoE,UAAYnE,CAAA,CAGd/B,IAAAA,GACP,IADYuJ,EAA+BsK,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,GAAAA,UAAA,MAEjC,oBAAE5J,EAAA,UAAeF,GAAc,IAAKqL,EAAmB5L,kBAAmBD,GAEhFzH,KAAKmI,cAAgBA,EAErBnI,KAAKwT,WAAavL,EAEbjI,KAAKoE,UAAUtE,QAAQ8G,SAASM,QAEjC/E,EAAAA,EAAAA,GAAK,gEAELnC,KAAKwT,YAAa,GAGjB,KAAAC,OAAS3Q,EAAAA,EAAMC,QAEd,MAAA2Q,EAAqB,IAAIC,EAAAA,EAAU,CACrCC,OAAQ,4WAYRC,SAAU,oPASV/U,KAAM,iBAGL,KAAAgV,mBAAqB,IAAIxU,EAAAA,EAAO,CACjCV,UAAW8U,EACXnU,UAAW,CACPsC,SAAUC,EAAAA,EAAQiS,MAAM/R,SAE/B,CAQKgS,WAAAA,CAAYvM,GAElB,MAAMwM,EAAejU,KAAKoE,UAAU6P,aAAaC,gBAAgBzM,EAAQ0M,QAIzE,GAFAnU,KAAKuT,yBAA2BvT,KAAKmI,iBAAmB8L,EAAaG,OAEjEpU,KAAKuT,yBACT,CACI,MAAMc,EAAerU,KAAKoE,UAAU6P,aAAaC,gBAAgBzM,EAAQ0M,QAEzEnU,KAAKsU,eAAiBD,EAAaE,aAEnC9M,EAAQ0M,OAASnU,KAAKwU,sBAAsBH,EAAaE,aAAY,CACzE,CAGME,SAAAA,GAENzU,KAAK0U,oBAAmB,CAGpBA,kBAAAA,GAEJ,MAAMzU,EAAWD,KAAKoE,UAEtBnE,EAASgU,aAAaU,mBAEjB3U,KAAKuT,2BAEVtT,EAASgU,aAAavT,KAAKV,KAAKsU,gBAAgB,GAEhDtU,KAAK8T,mBAAmBvU,UAAUsC,SAAW7B,KAAK4U,mBAAmB5S,OAErE/B,EAASsC,QAAQnB,KAAK,CAClBhB,SAAU+S,EACV9T,OAAQW,KAAK8T,mBACbrR,MAAOzC,KAAKyT,SACf,CAGGe,qBAAAA,CAAsBK,GAkB1B,OAhBA7U,KAAK4U,mBAAqB5U,KAAK4U,oBAAsB,IAAI9S,EAAAA,EAAQ,CAC7DE,OAAQ,IAAI8S,EAAAA,EAAc,CACtBC,MAAOF,EAAoBE,MAC3BC,OAAQH,EAAoBG,OAC5BC,WAAYJ,EAAoBK,YAChCjN,UAAWjI,KAAKwT,eAKxBxT,KAAK4U,mBAAmB5S,OAAOmT,OAC3BN,EAAoBE,MACpBF,EAAoBG,OACpBH,EAAoBK,aAGjBlV,KAAK4U,kBAAA,CAITtT,OAAAA,GAECtB,KAAK4U,qBAEL5U,KAAK4U,mBAAmBtT,UACxBtB,KAAK4U,mBAAqB,KAC9B,GA3JKtB,EAGK/R,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,aACNsW,SAAU,GARL9B,EAYK5L,eAAsC,CAChDS,eAAe,GAbhB,IAAMkN,EAAN/B,ECtCA,MAAMgC,EAaT3S,WAAAA,CAAY1C,GAFZ,KAAQsV,gBAAkB,GAItBvV,KAAKoE,UAAYnE,CAAA,CAGduV,OAAAA,CAAQC,GAEPzV,KAAKuV,kBAAoBE,IAC7BzV,KAAKuV,gBAAkBE,EAEvBzV,KAAKoE,UAAUE,GAAGmR,aACC,EAAZA,MACY,EAAZA,MACY,EAAZA,MACY,EAAZA,IACP,EA5BKH,EAGK/T,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,aCHP,MAAM4W,EAaT/S,WAAAA,CAAY1C,GAHI,KAAA0V,gBAAkBC,QAAQC,UAKtC7V,KAAKoE,UAAYnE,CAAA,CAGd6V,WAAAA,CAAY1V,EAAoBf,GAEnCW,KAAKoE,UAAUhE,SAASM,KAAKN,EAAUf,EAAOT,UAAS,CAGpD+V,gBAAAA,GACP,CAIOvT,IAAAA,CAAKqG,GAWR,MAAMxH,EAAWD,KAAKoE,WAChB,SAAEhE,EAAUf,OAAAA,EAAA,MAAQoD,EAAOsT,SAAAA,EAAUpD,SAAUnU,EAAMuC,KAAAA,EAAA,MAAMM,EAAOuR,cAAAA,GAAkBnL,EAEjFxH,EAAAZ,OAAOqB,KAAKrB,EAAQ0W,GAE7B9V,EAASG,SAASM,KAAKN,EAAUH,EAASZ,OAAO2W,gBAE7CvT,GAESxC,EAAAwC,MAAMe,IAAIf,GAGvBxC,EAASG,SAASgB,KAAK5C,EAAMuC,EAAMM,EAAO,OAAAuR,QAAA,IAAAA,EAAAA,EAAiBxS,EAASwS,cAAa,CAG9EtR,OAAAA,GAEFtB,KAAKoE,UAAqB,MAxDtBsR,EAGKnU,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,W,wBCRP,MAAMmX,EA+CTtT,WAAAA,CAAY1C,GAnCZ,KAAiBiW,cAAgB,CAC7BC,SAAS,EACTC,iBAAkB,EAClBC,YAAaC,EAAAA,EAAcC,MAGvB,KAAAC,0BAGIvS,OAAAC,OAAO,MA4BNjE,EAAAgU,aAAawC,qBAAqBtT,IAAInD,KAAI,CAG7CkD,aAAAA,CAAcoB,GAIpBtE,KAAKqE,IAAMC,EAEXtE,KAAK0W,uBAAyB,CAC1BC,OAAQrS,EAAGsS,OACXC,MAAOvS,EAAGwS,MACVC,MAAOzS,EAAG0S,MACV,YAAa1S,EAAG2S,SAChBC,KAAM5S,EAAG6S,KACT,aAAc7S,EAAG8S,OACjBC,QAAS/S,EAAGgT,QACZ,gBAAiBhT,EAAGiT,QAGxBvX,KAAKwX,mBAAqB,CACtBC,KAAMnT,EAAGoT,KACTC,KAAMrT,EAAGsT,KACTC,QAASvT,EAAGwT,QACZC,OAAQzT,EAAG0T,OACX,kBAAmB1T,EAAG2T,KACtB,kBAAmB3T,EAAG4T,KACtB,iBAAkB5T,EAAG6T,UACrB,iBAAkB7T,EAAG8T,UACzB,CAGM3B,oBAAAA,CAAqBxC,GAE3B,GAAIjU,KAAKqY,sBAAwBpE,EAAc,OAE/CjU,KAAKqY,oBAAsBpE,EAE3B,IAAIqE,EAAetY,KAAKwW,0BAA0BvC,EAAazP,KAE1D8T,IAEDA,EAAetY,KAAKwW,0BAA0BvC,EAAazP,KAAO,CAC9D6R,YAAaC,EAAAA,EAAciC,SAC3BnC,iBAAkB,IAK1BpW,KAAKwY,eAAeF,EAAajC,YAAaiC,EAAalC,iBAAgB,CAGxEoC,cAAAA,CAAenC,EAA4BD,GAE9C,MAAMkC,EAAetY,KAAKwW,0BAA0BxW,KAAKqY,oBAAoB7T,KAEvEF,EAAKtE,KAAKqE,IACVoU,EAAOC,EAAAA,EAAsBrC,GAE7BH,EAAgBlW,KAAKkW,cAG3BoC,EAAajC,YAAcA,EAC3BiC,EAAalC,iBAAmBA,EAE5BC,IAAgBC,EAAAA,EAAciC,UAY7BvY,KAAKkW,cAAcC,UAEpBnW,KAAKkW,cAAcC,SAAU,EAC1B7R,EAAAqU,OAAOrU,EAAGsU,eAGbvC,IAAgBH,EAAcG,aAAeH,EAAcE,mBAAqBA,IAEhFF,EAAcG,YAAcA,EAC5BH,EAAcE,iBAAmBA,EAK9B9R,EAAAuU,YAAY7Y,KAAK0W,uBAAuB+B,EAAKK,YAAYC,SAAU3C,EAAkB,KACrF9R,EAAA0U,UAAU1U,EAAGoT,KAAMpT,EAAGoT,KAAM1X,KAAKwX,mBAAmBiB,EAAKK,YAAYG,WAzBpEjZ,KAAKkW,cAAcC,UAEnBnW,KAAKkW,cAAcC,SAAU,EAE1B7R,EAAA4U,QAAQ5U,EAAGsU,cAsBtB,EA9IK3C,EAGK1U,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,W,cCjBP,MAAMqa,EAA6C,CACtDC,IAAK,EACL,YAAa,EACb,YAAa,GACb,YAAa,GAEb,cAAe,GACf,cAAe,GACf,cAAe,IAuBZ,SAASC,EAAuBC,GAEnC,MAAMC,EAA4BD,EAAYE,KAAKrU,IAC9C,CACGA,OACAH,OAAQ,EACRjE,KAAM,MAGd,IAAIA,EAAO,EACP0Y,EAAY,EACZzU,EAAS,EAEb,IAAK,IAAIpE,EAAI,EAAGA,EAAI2Y,EAAYrY,OAAQN,IACxC,CACU,MAAA8Y,EAAaH,EAAY3Y,GAI/B,GAFOG,EAAAoY,EAAmBO,EAAWvU,KAAK3G,OAErCuC,EAED,MAAM,IAAIoI,MAAM,gBAAA4H,OAAgB2I,EAAWvU,KAAK3G,OAYpD,GATIkb,EAAWvU,KAAKpE,KAAO,IAEvBA,EAAO4Y,KAAKC,IAAI7Y,EAAM,IAAM2Y,EAAWvU,KAAKpE,MAGhD2Y,EAAW3Y,KAAOA,EAId0Y,EAAY1Y,IAAS,GAAK0Y,EAAY,GAC1C,CAEU,MAAAI,EAAeJ,EAAY1Y,EAAQ,GAE5B0Y,GAAAI,EACH7U,GAAA6U,CAAA,CAGTJ,EAAY1Y,EAAQ,IAErBiE,EAAkC,GAAzB2U,KAAKG,KAAK9U,EAAS,IAC5B0U,EAAW1U,OAASA,EACVA,GAAAjE,EACE0Y,EAAA1Y,IAIZ2Y,EAAW1U,OAASA,EACPyU,GAAA1Y,EACHiE,GAAAjE,EACd,CAKG,OAFPiE,EAAkC,GAAzB2U,KAAKG,KAAK9U,EAAS,IAErB,CAAEuU,cAAaxY,KAAMiE,EAChC,C,yBClFgB,SAAA+U,GAAuBL,EAAwBM,GAErD,MAAAC,EAAUN,KAAKC,IAAIT,EAAmBO,EAAWvU,KAAK3G,MAAQ,GAAI,GAClE0b,EAAeR,EAAWvU,KAAK7G,MAAwB4C,OAASwY,EAAWvU,KAAKpE,KAEhFoZ,GAAa,EAAKD,EAAc,GAAM,EAErC,0BAAAnJ,OACM2I,EAAWvU,KAAKrG,KAAI,yBAAAiS,OACjBiJ,EAAW,qFAAAjJ,OAMJ2I,EAAWvU,KAAKpE,KAAOkZ,EAAO,sDAAAlJ,OAExBmJ,EAAW,qGAAAnJ,OAIhB,IAAdoJ,EAAc,kBAAApJ,OAAsBoJ,EAAS,KAAM,GAAE,oBAGnE,CC3BO,SAASC,GACZb,GAGO,OAAAc,EAAAA,EAAAA,GACHd,EACA,WACAQ,GACAO,GAAAA,EAER,CCTO,MAAMC,WAAoBC,EAAAA,EAQ7B7X,WAAAA,GAEU,OACF8X,kBAAmBpB,EACnBqB,gBAAiBN,IACpB,EAbIG,GAGKhZ,UAAY,CACtB/C,KAAM,CAACgD,EAAAA,GAAckF,aACrB5H,KAAM,O,gDCTP,MAAM6b,GAANhY,WAAAA,GAEH,KAAOoS,OAAQ,EACf,KAAOC,QAAS,EAChB,KAAO9N,MAAO,EAGd,KAAO0T,iBAAwC,EAAC,ECM7C,MAAMC,GAANlY,WAAAA,GAIH,KAAQmY,iBAA8B,CAAC,EAAG,EAAG,EAAG,GACxC,KAAAC,eAA4B,IAAIC,GAAAA,CAAU,CAE3C9c,IAAAA,CAAK+B,EAAyBgb,GAEjCjb,KAAKoE,UAAYnE,EACjBD,KAAKkb,oBAAsBD,EAElBhb,EAAAgD,QAAQC,cAAcC,IAAInD,KAAI,CAGpCkD,aAAAA,GAEHlD,KAAK8a,iBAAmB,CAAC,EAAG,EAAG,EAAG,GAC7B,KAAAC,eAAiB,IAAIC,GAAAA,CAAU,CAGjCG,aAAAA,CACHC,EACAC,EACAC,EACAva,EACAwa,GAGA,MAAMN,EAAqBjb,KAAKkb,oBAE1Bjb,EAAWD,KAAKoE,UAChBoX,EAAiBP,EAAmBQ,mBAAmBL,GACvD9W,EAAKrE,EAASqE,GAgBb,OAdPtE,KAAK2U,iBAAiByG,GAEtB9W,EAAGoX,gBAAgBpX,EAAGqX,YAAaH,EAAeI,0BAEzC3b,EAAAkB,QAAQT,KAAK2a,EAAoB,GAEvC/W,EAAAuX,kBAAkBvX,EAAGwX,WAAY,EAChCP,EAAWQ,EAAGR,EAAWS,EACzBV,EAAUS,EACVT,EAAUU,EACVjb,EAAKgU,MACLhU,EAAKiU,QAGFqG,CAAA,CAGJY,eAAAA,CACHhI,GAKJ,IAJIiI,IAAuBnK,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,KAAAA,UAAA,GACvBoK,EAAApK,UAAA7Q,OAAA,EAAA6Q,UAAA,QAAAC,EACAoK,EAEJrK,UAAA7Q,OAAA,EAAA6Q,UAAA,QAAAC,EACI,MAAMiJ,EAAqBjb,KAAKkb,oBAE1BlZ,EAASiS,EAAaM,aACtB8H,EAAkBpB,EAAmBQ,mBAAmBxH,GAE9D,IAAIqI,EAAYF,EAASJ,EAErB/H,EAAaG,SAGDkI,EAAAta,EAAOua,YAAcH,EAASpH,QAIjCf,EAAAuI,cAAcC,SAAStb,IAE3B,KAAAiD,UAAUjD,QAAQqP,OAAOrP,EAAQ,IAGpC,MAAAmD,EAAKtE,KAAKoE,UAAUE,GAE1BA,EAAGoX,gBAAgBpX,EAAGqX,YAAaU,EAAgBK,aAEnD,MAAMC,EAAgB3c,KAAK+a,eAEvB4B,EAAcZ,IAAMK,EAASL,GAC1BY,EAAcX,IAAMM,GACpBK,EAAc5H,QAAUqH,EAASrH,OACjC4H,EAAc3H,SAAWoH,EAASpH,SAErC2H,EAAcZ,EAAIK,EAASL,EAC3BY,EAAcX,EAAIM,EAClBK,EAAc5H,MAAQqH,EAASrH,MAC/B4H,EAAc3H,OAASoH,EAASpH,OAE7B1Q,EAAA8X,SACCA,EAASL,EACTO,EACAF,EAASrH,MACTqH,EAASpH,SAKZqH,EAAgBO,2BAA6B3I,EAAa3L,UAAW2L,EAAa4I,OAEnF7c,KAAK8c,aAAaT,GAGjB,KAAAH,MAAMjI,EAAciI,EAAOC,EAAU,CAGvCxH,gBAAAA,CAAiBV,GAEpB,MAEMuH,EAFqBxb,KAAKkb,oBAEUO,mBAAmBxH,GAE7D,IAAKuH,EAAetU,KAAM,OAEpB,MAAA5C,EAAKtE,KAAKoE,UAAUE,GAE1BA,EAAGoX,gBAAgBpX,EAAGqX,YAAaH,EAAeI,0BAClDtX,EAAGoX,gBAAgBpX,EAAGyY,iBAAkBvB,EAAekB,aAEpDpY,EAAA0Y,gBACC,EAAG,EAAGxB,EAAezG,MAAOyG,EAAexG,OAC3C,EAAG,EAAGwG,EAAezG,MAAOyG,EAAexG,OAC3C1Q,EAAG2Y,iBAAkB3Y,EAAG4Y,SAG5B5Y,EAAGoX,gBAAgBpX,EAAGqX,YAAaH,EAAekB,YAAW,CAM1DS,mBAAAA,CAAoBlJ,GAEvB,MAEM3P,EAFWtE,KAAKoE,UAEFE,GAIdkX,EAAiB,IAAIb,GAG3B,OAAIyC,GAAAA,EAAaC,KAAKpJ,EAAaM,aAAa+I,WAE5C9B,EAAekB,YAAc,KAEtBlB,IAGN,KAAA+B,WAAWtJ,EAAcuH,GAI3BlX,EAAAoX,gBAAgBpX,EAAGqX,YAAa,MAE5BH,EAAA,CAGJU,KAAAA,CAAMsB,EAA6BtB,EAAsBC,GAE5D,IAAKD,EAAO,OAEZ,MAAMjB,EAAqBjb,KAAKkb,oBAGX,mBAAVgB,IAECA,EAAAA,EAAQuB,GAAAA,EAAMC,IAAMD,GAAAA,EAAMlH,MAGhC,MAAAjS,EAAKtE,KAAKoE,UAAUE,GAEtB,GAAA4X,EAAQuB,GAAAA,EAAME,MAClB,KAAAC,EACI,QAAAA,EAAAzB,SAAA,IAAAyB,IAAAzB,EAAelB,EAAmB4C,mBAElC,MAAMC,EAAkB9d,KAAK8a,iBACvBiD,EAAkB5B,EAEpB2B,EAAgB,KAAOC,EAAgB,IACpCD,EAAgB,KAAOC,EAAgB,IACvCD,EAAgB,KAAOC,EAAgB,IACvCD,EAAgB,KAAOC,EAAgB,KAE1BD,EAAA,GAAKC,EAAgB,GACrBD,EAAA,GAAKC,EAAgB,GACrBD,EAAA,GAAKC,EAAgB,GACrBD,EAAA,GAAKC,EAAgB,GAErCzZ,EAAG6X,WAAW4B,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,IAC9F,CAGJzZ,EAAG4X,MAAMA,EAAK,CAGX8B,qBAAAA,CAAsB/J,GAEzB,GAAIA,EAAaG,OAAQ,OAEzB,MAEMoH,EAFqBxb,KAAKkb,oBAEUO,mBAAmBxH,GAExD,KAAAgK,aAAahK,EAAcuH,GAE5BvH,EAAa3L,SAEbtI,KAAKke,eAAe1C,EACxB,CAGI+B,UAAAA,CAAWtJ,EAA4BuH,GAE3C,MAAMvb,EAAWD,KAAKoE,UAEhBE,EAAKrE,EAASqE,GAEdsX,EAA2BtX,EAAG6Z,oBAuCpC,GArCA3C,EAAeI,yBAA2BA,EAGvCtX,EAAAoX,gBAAgBpX,EAAGqX,YAAaC,GAEpBJ,EAAAzG,MAAQd,EAAaM,aAAavS,OAAOoc,WACzC5C,EAAAxG,OAASf,EAAaM,aAAavS,OAAOua,YAEzDtI,EAAauI,cAAcC,SAAQ,CAAClI,EAAc3T,KAE9C,MAAMoB,EAASuS,EAAavS,OAExBA,EAAOiG,YAEHhI,EAASH,QAAQ8G,SAASM,KAE1BsU,EAAetU,MAAO,GAItB/E,EAAAA,EAAAA,GAAK,wEAKJlC,EAAAkB,QAAQkd,WAAWrc,EAAQ,GACpC,MAEMsc,EAFWre,EAASkB,QAAQod,YAAYvc,GAEnBb,QAExBmD,EAAAka,qBAAqBla,EAAGqX,YACvBrX,EAAGma,kBAAoB7d,EACvB,KACA0d,EACA,EAAC,IAGL9C,EAAetU,KACnB,CACU,MAAAwX,EAAkBpa,EAAG6Z,oBAE3B3C,EAAekB,YAAcgC,EAE1Bpa,EAAAoX,gBAAgBpX,EAAGqX,YAAa+C,GAEnCzK,EAAauI,cAAcC,SAAQ,CAACkC,EAAG/d,KAE7B,MAAAga,EAAmBtW,EAAGsa,qBAEbpD,EAAAZ,iBAAiBha,GAAKga,CAAA,GACxC,MAIDY,EAAekB,YAAcd,EAG5B,KAAAqC,aAAahK,EAAcuH,EAAc,CAG1CyC,YAAAA,CAAahK,EAA4BuH,GAEvC,MAAAxZ,EAASiS,EAAaM,aAAavS,OAazC,GAXAwZ,EAAezG,MAAQ/S,EAAOoc,WAC9B5C,EAAexG,OAAShT,EAAOua,YAE/BtI,EAAauI,cAAcC,SAAQ,CAAClI,EAAc3T,KAGpC,IAANA,GAEJ2T,EAAavS,OAAOmT,OAAOnT,EAAO+S,MAAO/S,EAAOgT,OAAQhT,EAAOkT,YAAY,IAG3EsG,EAAetU,KACnB,CACI,MAAMjH,EAAWD,KAAKoE,UAChBE,EAAKrE,EAASqE,GAEdoa,EAAkBlD,EAAekB,YAEpCpY,EAAAoX,gBAAgBpX,EAAGqX,YAAa+C,GAEnCzK,EAAauI,cAAcC,SAAQ,CAAClI,EAAc3T,KAE9C,MAAMie,EAAStK,EAAavS,OAEnB/B,EAAAkB,QAAQkd,WAAWQ,EAAQ,GACpC,MAEMC,EAFW7e,EAASkB,QAAQod,YAAYM,GAEZE,eAE5BnE,EAAmBY,EAAeZ,iBAAiBha,GAEtD0D,EAAA0a,iBACC1a,EAAG2a,aACHrE,GAGDtW,EAAA4a,+BACC5a,EAAG2a,aACH,EACAH,EACAD,EAAOT,WACPS,EAAOtC,aAGRjY,EAAA6a,wBACC7a,EAAGqX,YACHrX,EAAGma,kBAAoB7d,EACvB0D,EAAG2a,aACHrE,EACJ,GACH,CACL,CAGIkC,YAAAA,CAAatB,GAGjB,GAAmC,OAA/BA,EAAekB,YAAsB,OAEnC,MAAApY,EAAKtE,KAAKoE,UAAUE,GAEpBsY,EAA2BtY,EAAGsa,qBAEpCpD,EAAeoB,yBAA2BA,EAEvCtY,EAAA0a,iBACC1a,EAAG2a,aACHrC,GAGDtY,EAAA6a,wBACC7a,EAAGqX,YACHrX,EAAG8a,yBACH9a,EAAG2a,aACHrC,GAIJ5c,KAAKke,eAAe1C,EAAc,CAG9B0C,cAAAA,CAAe1C,GAEb,MAAAlX,EAAKtE,KAAKoE,UAAUE,GAEvBA,EAAA0a,iBACC1a,EAAG2a,aACHzD,EAAeoB,0BAGfpB,EAAetU,KAEZ5C,EAAA4a,+BACC5a,EAAG2a,aACH,EACA3a,EAAG+a,iBACH7D,EAAezG,MACfyG,EAAexG,QAKhB1Q,EAAAgb,oBACChb,EAAG2a,aACqC,IAAxCjf,KAAKoE,UAAUtE,QAAQ2I,aACjBnE,EAAG+a,iBACH/a,EAAGib,cACT/D,EAAezG,MACfyG,EAAexG,OAEvB,ECtZD,MAAMwK,WAA6BC,GAAAA,EAUtC9c,WAAAA,CAAY1C,GAERyf,MAAMzf,GAJH,KAAA0f,QAAU,IAAI9E,GAMZ,KAAA8E,QAAQzhB,KAAK+B,EAAUD,KAAI,EAd3Bwf,GAGKje,UAAY,CACtB/C,KAAM,CAACgD,EAAAA,GAAckF,aACrB5H,KAAM,gB,eCHP,MAAM8gB,GAmCTjd,WAAAA,CAAYyN,EAAuBkJ,GAE/BtZ,KAAKoQ,QAAUA,EACfpQ,KAAKsZ,YAAcA,EACnBtZ,KAAK6f,cAAgB,CAAC,EACtB7f,KAAK8f,mBAAqB,CAAC,EAC3B9f,KAAK+f,qBAAuB,CAAC,EAI1Bze,OAAAA,GAEHtB,KAAKsZ,YAAc,KACnBtZ,KAAK6f,cAAgB,KACrB7f,KAAK8f,mBAAqB,KAC1B9f,KAAK+f,qBAAuB,KAC5B/f,KAAKoQ,QAAU,MCzDP,SAAA4P,GAAc1b,EAA+B9F,EAAcyhB,GAEjE,MAAA5gB,EAASiF,EAAG4b,aAAa1hB,GAKxB,OAHJ8F,EAAA6b,aAAa9gB,EAAQ4gB,GACxB3b,EAAG0b,cAAc3gB,GAEVA,CACX,CCfA,SAAS+gB,GAAarf,GAEZ,MAAAsf,EAAQ,IAAIC,MAAMvf,GAExB,IAAK,IAAIH,EAAI,EAAGA,EAAIyf,EAAMnf,OAAQN,IAE9Byf,EAAMzf,IAAK,EAGR,OAAAyf,CACX,CAQgB,SAAAE,GACZ/hB,EACAuC,GAGA,OAAQvC,GAEJ,IAAK,QAYL,IAAK,MACL,IAAK,OACL,IAAK,YACL,IAAK,iBACM,SAbX,IAAK,OACM,WAAID,aAAa,EAAIwC,GAEhC,IAAK,OACM,WAAIxC,aAAa,EAAIwC,GAEhC,IAAK,OACM,WAAIxC,aAAa,EAAIwC,GAQhC,IAAK,QACM,WAAIyf,WAAW,EAAIzf,GAE9B,IAAK,QACM,WAAIyf,WAAW,EAAIzf,GAE9B,IAAK,QACM,WAAIyf,WAAW,EAAIzf,GAE9B,IAAK,QACM,WAAI0f,YAAY,EAAI1f,GAE/B,IAAK,QACM,WAAI0f,YAAY,EAAI1f,GAE/B,IAAK,QACM,WAAI0f,YAAY,EAAI1f,GAE/B,IAAK,OACM,SAEX,IAAK,QAEM,OAAAqf,GAAa,EAAIrf,GAE5B,IAAK,QACM,OAAAqf,GAAa,EAAIrf,GAE5B,IAAK,QACM,OAAAqf,GAAa,EAAIrf,GAE5B,IAAK,OACD,OAAO,IAAIxC,aAAa,CAAC,EAAG,EACxB,EAAG,IAEX,IAAK,OACD,OAAO,IAAIA,aAAa,CAAC,EAAG,EAAG,EAC3B,EAAG,EAAG,EACN,EAAG,EAAG,IAEd,IAAK,OACD,OAAO,IAAIA,aAAa,CAAC,EAAG,EAAG,EAAG,EAC9B,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,IAGd,WACX,CCxFA,IAAImiB,GAAyB,KAE7B,MAAMC,GAAiC,CACnClT,MAAa,QACbmT,WAAa,OACbC,WAAa,OACbC,WAAa,OAEb3S,IAAa,MACb4S,SAAa,QACbC,SAAa,QACbC,SAAa,QAEbnT,aAAsB,OACtBoT,kBAAsB,QACtBC,kBAAsB,QACtBC,kBAAsB,QAEtBC,KAAa,OACbC,UAAa,QACbC,UAAa,QACbC,UAAa,QAEbC,WAAa,OACbC,WAAa,OACbC,WAAa,OAEbC,WAAyB,YACzBC,eAAyB,YACzBC,wBAAyB,YACzBC,aAA2B,cAC3BC,iBAA2B,cAC3BC,0BAA2B,cAC3BC,iBAA+B,iBAC/BC,qBAA+B,iBAC/BC,8BAA+B,kBAG7BC,GAAqD,CAEvDC,MAAO,UACPC,KAAM,YACNC,KAAM,YACNC,KAAM,YAENC,IAAK,SACLC,MAAO,WACPC,MAAO,WACPC,MAAO,WAEPC,KAAM,SACNC,MAAO,WACPC,MAAO,WACPC,MAAO,WAEPC,KAAM,SACNC,MAAO,WACPC,MAAO,WACPC,MAAO,YAIK,SAAAC,GAAQhf,EAAS9F,GAE7B,IAAKkiB,GACL,CACU,MAAA6C,EAAYtf,OAAOuf,KAAK7C,IAE9BD,GAAW,CAAC,EAEZ,IAAK,IAAI9f,EAAI,EAAGA,EAAI2iB,EAAUriB,SAAUN,EACxC,CACU,MAAA6iB,EAAKF,EAAU3iB,GAErB8f,GAASpc,EAAGmf,IAAO9C,GAAiB8C,EAAE,CAC1C,CAGJ,OAAO/C,GAASliB,EACpB,CAEgB,SAAAklB,GAAoBpf,EAAS9F,GAEnC,MAAAmlB,EAAYL,GAAQhf,EAAI9F,GAEvB,OAAA6jB,GAAqBsB,IAAc,SAC9C,CCnFA,SAASC,GAAqBtf,EAA2BjF,GAErD,MAAMwkB,EAAYvf,EAAGwf,gBAAgBzkB,GAChC0kB,MAAM,MACNvK,KAAK,CAAAwK,EAAMnf,IAAU,GAAAkM,OAAGlM,EAAK,MAAAkM,OAAKiT,KAEjCC,EAAY3f,EAAG4f,iBAAiB7kB,GAChC8kB,EAAcF,EAAUF,MAAM,MAE9BK,EAAkC,CAAC,EAEnCC,EAAcF,EAAY3K,KAAKwK,GAASM,WAAWN,EAAKnM,QAAQ,2BAA4B,SAC7F0M,QAAQC,MAEDA,GAAMJ,EAAOI,MAEbJ,EAAOI,IAAK,GAEL,KAMbC,EAAU,CAAC,IAELJ,EAAA5H,SAASiI,IAEjBb,EAAUa,EAAS,GAAK,KAAJ3T,OAAS8S,EAAUa,EAAS,GAAE,MAC1CD,EAAAtT,KAAK,sDAAuD,kBAAkB,IAGpF,MAAAwT,EAAsBd,EACvBxS,KAAK,MAEVoT,EAAQ,GAAKE,EAEbC,QAAQC,MAAMZ,GAGdW,QAAQE,eAAe,kCACfF,QAAAziB,QAAQsiB,GAEhBG,QAAQG,UACZ,CC/BgB,SAAAC,GAAgB1gB,EAAwB8L,GAEpD,MAAM6U,EAAejF,GAAc1b,EAAIA,EAAG4gB,cAAe9U,EAAQwD,QAC3DuR,EAAenF,GAAc1b,EAAIA,EAAG8gB,gBAAiBhV,EAAQyD,UAE7DwR,EAAe/gB,EAAGghB,gBAErBhhB,EAAAihB,aAAaF,EAAcJ,GAC3B3gB,EAAAihB,aAAaF,EAAcF,GAE9B,MAAMK,EAA4BpV,EAAQoV,0BAEtCA,IAE4C,oBAAjClhB,EAAGkhB,2BAGVrjB,EAAAA,EAAAA,GAAA,+EAKGmC,EAAAkhB,0BACCH,EACAG,EAA0BC,MACe,aAAzCD,EAA0BE,WACpBphB,EAAGqhB,iBACHrhB,EAAGshB,sBAKrBthB,EAAGuhB,YAAYR,GAEV/gB,EAAGwhB,oBAAoBT,EAAc/gB,EAAGyhB,cDQ1C,SACHzhB,EACA8L,EACA4V,EACAC,GAIK3hB,EAAGwhB,oBAAoB1V,EAAS9L,EAAGyhB,eAE/BzhB,EAAG4hB,mBAAmBF,EAAc1hB,EAAG6hB,iBAExCvC,GAAqBtf,EAAI0hB,GAGxB1hB,EAAG4hB,mBAAmBD,EAAgB3hB,EAAG6hB,iBAE1CvC,GAAqBtf,EAAI2hB,GAG7BrB,QAAQC,MAAM,8CAGwB,KAAlCvgB,EAAG8hB,kBAAkBhW,IAErBwU,QAAQziB,KAAK,yCAA0CmC,EAAG8hB,kBAAkBhW,IAGxF,CClCwBiW,CAAA/hB,EAAI+gB,EAAcJ,EAAcE,GAMpD/U,EAAQU,eC9CL,SACHV,EACA9L,GAGJ,IAFIgiB,EAAAvU,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,IAAAA,UAAA,GAGA,MAAMzG,EAAsD,CAAC,EAEvDib,EAAkBjiB,EAAGwhB,oBAAoB1V,EAAS9L,EAAGkiB,mBAE3D,IAAK,IAAI5lB,EAAI,EAAGA,EAAI2lB,EAAiB3lB,IACrC,CACI,MAAM6lB,EAAaniB,EAAGoiB,gBAAgBtW,EAASxP,GAG/C,GAAI6lB,EAAW3nB,KAAK6nB,WAAW,OAE3B,SAGJ,MAAMnY,EAASkV,GAAoBpf,EAAImiB,EAAWjoB,MAEvC8M,EAAAmb,EAAW3nB,MAAQ,CAC1BsS,SAAU,EACV5C,SACAiE,QAAQH,EAAAA,EAAAA,GAA2B9D,GAAQiE,OAC3CzN,OAAQ,EACR0N,UAAU,EACVrR,MAAO,EACX,CAGE,MAAAmiB,EAAOvf,OAAOuf,KAAKlY,GAEzB,GAAIgb,EACJ,CACI9C,EAAKoD,MAAK,CAACjX,EAAGC,IAAOD,EAAIC,EAAK,GAAM,IAEpC,IAAK,IAAIhP,EAAI,EAAGA,EAAI4iB,EAAKtiB,OAAQN,IAE7B0K,EAAWkY,EAAK5iB,IAAIwQ,SAAWxQ,EAE/B0D,EAAGuiB,mBAAmBzW,EAASxP,EAAG4iB,EAAK5iB,IAG3C0D,EAAGuhB,YAAYzV,EAAO,MAItB,IAAK,IAAIxP,EAAI,EAAGA,EAAI4iB,EAAKtiB,OAAQN,IAElB0K,EAAAkY,EAAK5iB,IAAIwQ,SAAW9M,EAAGwiB,kBAAkB1W,EAASoT,EAAK5iB,IAInE,OAAA0K,CACX,CDV6Byb,CACrB1B,EACA/gB,GACE,iDAAkD+Y,KAAKjN,EAAQwD,SAG7DxD,EAAA4W,aEvDI,SAAe5W,EAAuB9L,GAElD,MAAMnG,EAA2C,CAAC,EAE5C8oB,EAAgB3iB,EAAGwhB,oBAAoB1V,EAAS9L,EAAG4iB,iBAEzD,IAAK,IAAItmB,EAAI,EAAGA,EAAIqmB,EAAermB,IACnC,CACI,MAAM0Y,EAAchV,EAAG6iB,iBAAiB/W,EAASxP,GAC3C9B,EAAOwa,EAAYxa,KAAK+Y,QAAQ,WAAY,IAE5CuP,IAAa9N,EAAYxa,KAAKuoB,MAAM,YAEpC7oB,EAAO8kB,GAAQhf,EAAIgV,EAAY9a,MAErCL,EAASW,GAAQ,CACbA,OACA+F,MAAOjE,EACPpC,OACAuC,KAAMuY,EAAYvY,KAClBqmB,UACA9oB,MAAOiiB,GAAa/hB,EAAM8a,EAAYvY,MAC1C,CAGG,OAAA5C,CACX,CF6B2BmpB,CAAejC,EAAc/gB,GAC5C8L,EAAAmX,kBG3DI,SAAWnX,EAAuB9L,GAG9C,IAAKA,EAAGkjB,sBAAuB,MAAO,CAAC,EAEvC,MAAMC,EAAoD,CAAC,EAIrDC,EAAsBpjB,EAAGwhB,oBAAoB1V,EAAS9L,EAAGkjB,uBAE/D,IAAK,IAAI5mB,EAAI,EAAGA,EAAI8mB,EAAqB9mB,IACzC,CACI,MAAM9B,EAAOwF,EAAGqjB,0BAA0BvX,EAASxP,GAC7CgnB,EAAoBtjB,EAAGujB,qBAAqBzX,EAAStR,GAErDiC,EAAOuD,EAAGwjB,+BAA+B1X,EAASxP,EAAG0D,EAAGyjB,yBAE9DN,EAAc3oB,GAAQ,CAClBA,OACA+F,MAAO+iB,EACP7mB,OACJ,CAGG,OAAA0mB,CACX,CHiCgCO,CAAW3C,EAAc/gB,GAErDA,EAAG2jB,aAAahD,GAChB3gB,EAAG2jB,aAAa9C,GAEhB,MAAM7L,EAA+C,CAAC,EAE3C,UAAA1Y,KAAKwP,EAAQ4W,aACxB,CACU,MAAA7hB,EAAOiL,EAAQ4W,aAAapmB,GAElC0Y,EAAY1Y,GAAK,CACbwQ,SAAU9M,EAAG4jB,mBAAmB7C,EAAczkB,GAC9CtC,MAAOiiB,GAAapb,EAAK3G,KAAM2G,EAAKpE,MACxC,CAKG,OAFW,IAAI6e,GAAcyF,EAAc/L,EAGtD,CInEA,MAAM6O,GAAkC,CACpCC,aAAc,EACdC,WAAY,GAOT,MAAMC,GAyBT3lB,WAAAA,CAAY1C,GAXZ,KAAO+V,eAA4B,KAE3B,KAAAuS,iBAAyDtkB,OAAAC,OAAO,MAIxE,KAAQskB,WAAa,EACb,KAAAC,6BAA8DxkB,OAAAC,OAAO,MACrE,KAAAwkB,0BAAkFzkB,OAAAC,OAAO,MACzF,KAAAykB,qBAAkE1kB,OAAAC,OAAO,MAI7ElE,KAAKoE,UAAYnE,CAAA,CAGXiD,aAAAA,CAAcoB,GAEpBtE,KAAKqE,IAAMC,EAEXtE,KAAK4oB,aAAetkB,EAAGukB,4BAA8BvkB,EAAGwkB,aAAaxkB,EAAGukB,6BAA+B,EAElG,KAAAN,iBAA0BtkB,OAAAC,OAAO,MACjC,KAAAukB,6BAAsCxkB,OAAAC,OAAO,MAC7C,KAAAwkB,0BAAmCzkB,OAAAC,OAAO,MAC/ClE,KAAKgW,eAAiB,KASnBtV,IAAAA,CAAKrB,EAAgB0W,GAIpB,GAFC,KAAAgT,YAAY1pB,EAAOT,WAEpBmX,EAAU,OAEdoS,GAAgBC,aAAe,EAC/BD,GAAgBE,WAAa,EAE7B,IAAIW,EAAehpB,KAAK2oB,qBAAqBtpB,EAAOT,UAAU2S,MAEzDyX,IAEcA,EAAAhpB,KAAK2oB,qBAAqBtpB,EAAOT,UAAU2S,MAAQvR,KAAKipB,oBAAoB5pB,EAAQW,OAG1FgpB,EAAAhpB,KAAKoE,UAAW/E,EAAQ8oB,GAAe,CAOjD9kB,kBAAAA,CAAmBC,GAEtBtD,KAAKoE,UAAUd,aAAaD,mBAAmBC,EAActD,KAAKgW,eAAgBmS,GAAe,CAS9Fe,gBAAAA,CAAiB5lB,EAA6CxE,GACrE,IADmF+F,EAAAkN,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,GAAAA,UAAA,GAAQ,EAEjF,MAAAtB,EAAezQ,KAAKoE,UAAUR,OAC9BulB,EAAcnpB,KAAKyR,gBAAgBzR,KAAKgW,gBAExCoT,EAAoB9lB,EAAgC+lB,gBAEtDD,GAEK,KAAAhlB,UAAUklB,IAAIjmB,mBAAmBC,GAG7BmN,EAAAxL,aAAa3B,EAAaM,QAEvC,IAAI2lB,EAAavpB,KAAKyoB,6BAA6BnlB,EAAakB,KAGhE,QAAmB,IAAf+kB,EACJ,CACU,MAAAC,EAAYxpB,KAAKwoB,aAAexoB,KAAK4oB,aAErCa,EAA2BzpB,KAAK0oB,0BAA0Bc,GAE5DC,IAEK,KAAAhB,6BAA6BgB,EAAyBjlB,UAAO,GAItE+kB,EAAavpB,KAAKyoB,6BAA6BnlB,EAAakB,KAAOglB,EAC9D,KAAAd,0BAA0Bc,GAAalmB,EAExC8lB,EAEA3Y,EAAa1L,gBAAgBzB,EAAaM,OAAQ4lB,EAAYlmB,EAAgC0B,QAIjFyL,EAAA7L,eAAetB,EAAaM,OAAQ4lB,EACrD,CAGJ,MAAMllB,EAAKtE,KAAKqE,IAEVujB,EAAoB5nB,KAAKgW,eAAeuR,kBAAkBzoB,GAAM+F,MAElEskB,EAAYpJ,qBAAqBlb,KAAW0kB,IACpCJ,EAAApJ,qBAAqBlb,GAAS0kB,EAE1CjlB,EAAGolB,oBAAoBP,EAAY/Y,QAASwX,EAAmB2B,GAAU,CAGrER,WAAAA,CAAY3Y,GAEhB,GAAIpQ,KAAKgW,iBAAmB5F,EAAS,OAErCpQ,KAAKgW,eAAiB5F,EAEhB,MAAA+Y,EAAcnpB,KAAKyR,gBAAgBrB,GAEpC,KAAA/L,IAAI8G,WAAWge,EAAY/Y,QAAO,CAQpCqB,eAAAA,CAAgBrB,GAEnB,OAAOpQ,KAAKuoB,iBAAiBnY,EAAQmB,OAASvR,KAAK2pB,mBAAmBvZ,EAAO,CAGzEuZ,kBAAAA,CAAmBvZ,GAEvB,MAAMwZ,EAAMxZ,EAAQmB,KAIb,OAFPvR,KAAKuoB,iBAAiBqB,GAAO5E,GAAgBhlB,KAAKqE,IAAK+L,GAEhDpQ,KAAKuoB,iBAAiBqB,EAAG,CAG7BtoB,OAAAA,GAEH,IAAK,MAAMsoB,KAAO3lB,OAAOuf,KAAKxjB,KAAKuoB,kBACnC,CACwBvoB,KAAKuoB,iBAAiBqB,GAE9BtoB,UACP,KAAAinB,iBAAiBqB,GAAO,KAGjC5pB,KAAKuoB,iBAAmB,KACxBvoB,KAAKyoB,6BAA+B,KAWjCQ,mBAAAA,CAAoB5pB,EAAgBwqB,GAEhC,OC9MC,SAAuBxqB,EAAgBwqB,GAEnD,MAAMC,EAA0B,GAW1BC,EAA4B,CAAC,0JAQnC,IAAIC,GAAoB,EACpB3B,EAAa,EACbD,EAAe,EAEnB,MAAMe,EAAcU,EAAapY,gBAAgBpS,EAAOT,WAE7C,UAAAgC,KAAKvB,EAAOkB,OACvB,CACU,MAAA0pB,EAAQ5qB,EAAOkB,OAAOK,GAE5BkpB,EAAc3Y,KAAK,+BAAAJ,OACCnQ,EAAC,2BAGV,UAAAI,KAAKipB,EAAM1qB,UACtB,CACU,MAAA+d,EAAW2M,EAAM1qB,UAAUyB,GAEjC,GAAIsc,aAAoBlf,EAAAA,EAEhBkf,EAASgM,IAETQ,EAAc3Y,KAAK,yFAAAJ,OAEC/P,EAAC,uDAAA+P,OACQnQ,EAAC,KAAAmQ,OAAI/P,EAAC,oCAAA+P,OACzBsX,IAAY,uDAMtByB,EAAc3Y,KAAK,8DAAAJ,OACoB/P,EAAC,0CAGhD,GACSsc,aAAoB4M,GAAAA,EAEzBJ,EAAc3Y,KAAK,iFAAAJ,OAEC/P,EAAC,mDAAA+P,OACQnQ,EAAC,KAAAmQ,OAAI/P,EAAC,gCAAA+P,OACzBsX,IAAY,oDAG1B,GACS/K,aAAoBxI,EAAAA,EAC7B,CACI,MAAMqV,EAAc9qB,EAAO+qB,gBAAgBxpB,GAAwBI,GAE7DsY,EAAc6P,EAAY7P,YAAY6Q,GAExC7Q,IAEK0Q,IAEmBA,GAAA,EACpBD,EAAgB5Y,KAAK,4EAKzB0Y,EAAaxlB,IAAIgmB,UAAU/Q,EAAYlI,SAAUgX,GAEjD0B,EAAc3Y,KAAK,+CAAAJ,OACK/P,EAAC,OAAA+P,OAAMqX,EAAY,6BAG3CA,IACJ,CACJ,CACJ,CAGE,MAAAkC,EAAiB,IAAIP,KAAoBD,GAAezY,KAAK,MAGnE,OAAO,IAAIkZ,SAAS,IAAK,IAAK,KAAMD,EACxC,CD0GeE,CAAuBnrB,EAAQwqB,EAAY,EA5L7CvB,GAGK/mB,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,U,eE3BP,MAAM2rB,GAAoE,CAC7ErR,IAAK,gGAIL,YAAa,4JAKb,YAAa,+MAMb,YAAa,kQAObsR,IAAK,gGAIL,YAAa,4JAKb,YAAa,+MAMb,YAAa,kQAObC,IAAK,iGAIL,YAAa,6JAKb,YAAa,gNAMb,YAAa,mQAObzH,KAAM,gGAIN,aAAc,4JAKd,aAAc,+MAMd,aAAc,kQAOd,cAAe,2CACf,cAAe,2CACf,cAAe,4CAGN0H,GAAmE,CAC5ExR,IAAK,8BACL,YAAa,8BACb,YAAa,8BACb,YAAa,8BACb,cAAe,2CACf,cAAe,2CACf,cAAe,2CACfsR,IAAK,8BACL,YAAa,8BACb,YAAa,8BACb,YAAa,8BACbC,IAAK,8BACL,YAAa,8BACb,YAAa,8BACb,YAAa,8BACbzH,KAAM,8BACN,aAAc,8BACd,aAAc,8BACd,aAAc,+BC7GX,MAAM2H,GAuBTloB,WAAAA,CAAY1C,GANZ,KAAQ6qB,OAA+C,CAAC,EAGxD,KAAQC,sBAA8E,CAAC,EAKnF/qB,KAAKoE,UAAYnE,EAEjBD,KAAKsE,GAAK,KACVtE,KAAK8qB,OAAS,CAAC,EAGT5nB,aAAAA,CAAcoB,GAEpBtE,KAAKsE,GAAKA,CAAA,CAUPjB,kBAAAA,CAAmB4mB,EAAqB7Z,EAAoB4a,GAE/D,MAAM7B,EAAcnpB,KAAKoE,UAAU/E,OAAOoS,gBAAgBrB,GAEtD,IAAC6Z,EAAMgB,UAAYhB,EAAMiB,WAAa/B,EAAYrJ,mBAAmBmK,EAAMzlB,KAC/E,CACI2kB,EAAYrJ,mBAAmBmK,EAAMzlB,KAAOylB,EAAMiB,SAEjClrB,KAAKmrB,wBAAwBlB,EAAO7Z,EAErDgb,CAASjC,EAAY7P,YAAa2Q,EAAM9rB,SAAU6B,KAAKoE,UAAW4mB,EAAQ,CAC9E,CAQIG,uBAAAA,CAAwBlB,EAAqB7Z,GACrD,IAAAib,EACW,OAA2C,QAA3CA,EAAArrB,KAAK+qB,sBAAsBd,EAAMqB,mBAAU,IAAAD,OAAA,EAA3CA,EAA+Cjb,EAAQmB,QACvDvR,KAAKurB,2BAA2BtB,EAAO7Z,EAAO,CAGjDmb,0BAAAA,CAA2BtB,EAAqB7Z,GAE9C,MAAAob,EAAuBxrB,KAAK+qB,sBAAsBd,EAAMqB,cACtDtrB,KAAK+qB,sBAAsBd,EAAMqB,YAAc,CAAC,GAElDtlB,EAAKhG,KAAKyrB,cAAcxB,EAAO7Z,EAAQ4W,aAAc,KASpD,OAPFhnB,KAAK8qB,OAAO9kB,KAEbhG,KAAK8qB,OAAO9kB,GAAMhG,KAAK0rB,sBAAsBzB,EAAO7Z,EAAQ4W,eAGhEwE,EAAqBpb,EAAQmB,MAAQvR,KAAK8qB,OAAO9kB,GAE1CwlB,EAAqBpb,EAAQmB,KAAI,CAGpCma,qBAAAA,CAAsBzB,EAAqB3Q,GAExC,OCxFC,SAAqB2Q,EAAqB3Q,GAEtD,MAAMwQ,EAAgB,CAAC,8JASZ,UAAAlpB,KAAKqpB,EAAM9rB,SACtB,CACQ,IAACmb,EAAY1Y,GACjB,CACQqpB,EAAM9rB,SAASyC,aAAcxC,EAAAA,EAExB6rB,EAAM9rB,SAASyC,GAAoB0oB,IAEpCQ,EAAc3Y,KAAK,iEAAAJ,OACuBnQ,EAAC,OAAAmQ,OAAMnQ,EAAC,8BAKlDkpB,EAAc3Y,KAAK,mEAAAJ,OACyBnQ,EAAC,6BAI5CqpB,EAAM9rB,SAASyC,aAAcspB,GAAAA,GAElCJ,EAAc3Y,KAAK,mEAAAJ,OAC6BnQ,EAAC,OAAAmQ,OAAMnQ,EAAC,8BAI5D,SAGE,MAAA+qB,EAAU1B,EAAM2B,kBAAkBhrB,GAExC,IAAIirB,GAAS,EAEb,IAAK,IAAI7qB,EAAI,EAAGA,EAAI8qB,GAAAA,EAAe5qB,OAAQF,IAC3C,CACU,MAAA+qB,EAASD,GAAAA,EAAe9qB,GAE9B,GAAI2qB,EAAQntB,OAASutB,EAAOvtB,MAAQutB,EAAO1O,KAAKsO,GAChD,CACI7B,EAAc3Y,KAAA,WAAAJ,OAAgBnQ,EAAC,MAAMkrB,GAAAA,EAAe9qB,GAAG2qB,SAC9CE,GAAA,EAET,MACJ,CAGJ,IAAKA,EACL,CACI,MAEMG,GAFgC,IAAjBL,EAAQ5qB,KAAa0pB,GAA4BG,IAExCe,EAAQntB,MAAMqZ,QAAQ,kBAAA9G,OAAmBnQ,EAAC,gBAExEkpB,EAAc3Y,KAAK,0BAAAJ,OACRnQ,EAAC,yDAAAmQ,OAEFnQ,EAAC,qBAAAmQ,OACTib,EAAQ,KAAG,CACjB,CAUG,WAAIzB,SAAS,KAAM,KAAM,WAAY,WAAYT,EAAczY,KAAK,MAC/E,CDSe4a,CAAqBhC,EAAO3Q,EAAW,CAW1CmS,aAAAA,CAAcxB,EAAqB3Q,EAAkC4S,GAEzE,MAAM/tB,EAAW8rB,EAAM9rB,SAEjB+S,EAAU,IAAAH,OAAImb,EAAM,MAE1B,IAAK,MAAMtrB,KAAKzC,EAEZ+S,EAAQC,KAAKvQ,GAET0Y,EAAY1Y,IAEZsQ,EAAQC,KAAKmI,EAAY1Y,GAAGpC,MAI7B,OAAA0S,EAAQG,KAAK,IAAG,CAIpB/P,OAAAA,GAEHtB,KAAKoE,UAAY,KACjBpE,KAAK8qB,OAAS,MAzHTD,GAGKtpB,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,gBEbd,MAWaqtB,GAAN,MAAMA,EA2DTxpB,WAAAA,GAEI3C,KAAKsE,GAAK,KAEVtE,KAAKosB,QAAU,EACfpsB,KAAKqsB,cAAgB,EACrBrsB,KAAKuD,UAAY,OAEjBvD,KAAKssB,UAAW,EAGhBtsB,KAAKwZ,IAAM,GACN,KAAAA,IAlFC,GAkFYxZ,KAAKusB,SAClB,KAAA/S,IAlFE,GAkFYxZ,KAAKwsB,UACnB,KAAAhT,IAlFG,GAkFYxZ,KAAKysB,YACpB,KAAAjT,IAlFM,GAkFYxZ,KAAK0sB,aACvB,KAAAlT,IAlFG,GAkFYxZ,KAAK2sB,aACpB,KAAAnT,IAlFM,GAkFYxZ,KAAK4sB,aAE5B5sB,KAAK6sB,OAAS,GAET,KAAAC,aAAehqB,EAAAA,EAAMC,OAAM,CAG1BG,aAAAA,CAAcoB,GAEpBtE,KAAKsE,GAAKA,EAEL,KAAAyoB,cClGN,SAAkCzoB,GAErC,MAAM0oB,EAAmD,CAAC,EA6BnD,OAzBPA,EAASC,OAAS,CAAC3oB,EAAG4oB,IAAK5oB,EAAG6oB,qBAC9BH,EAAS7pB,IAAM,CAACmB,EAAG4oB,IAAK5oB,EAAG4oB,KAClBF,EAAAI,SAAW,CAAC9oB,EAAG+oB,UAAW/oB,EAAG6oB,oBAAqB7oB,EAAG4oB,IAAK5oB,EAAG6oB,qBAC7DH,EAAAM,OAAS,CAAChpB,EAAG4oB,IAAK5oB,EAAGipB,oBAAqBjpB,EAAG4oB,IAAK5oB,EAAG6oB,qBACrDH,EAAAQ,KAAO,CAAC,EAAG,GAGXR,EAAA,cAAgB,CAAC1oB,EAAGmpB,UAAWnpB,EAAG6oB,oBAAqB7oB,EAAG4oB,IAAK5oB,EAAG6oB,qBAClEH,EAAA,WAAa,CAAC1oB,EAAGmpB,UAAWnpB,EAAG4oB,IAAK5oB,EAAG4oB,IAAK5oB,EAAG4oB,KAC/CF,EAAA,cAAgB,CAAC1oB,EAAGmpB,UAAWnpB,EAAGipB,oBAAqBjpB,EAAG4oB,IAAK5oB,EAAG6oB,qBAE3EH,EAASU,MAAQ,CAACppB,EAAGsT,KAAMtT,EAAG6oB,qBAcvBH,CACX,CDkE6BW,CAAyBrpB,GAE9CtE,KAAKuQ,OAAM,CAOR/M,GAAAA,CAAIf,GAKH,GAHJA,EAAQA,GAASzC,KAAK8sB,aAGlB9sB,KAAKosB,UAAY3pB,EAAM0C,KAC3B,CACQ,IAAAyoB,EAAO5tB,KAAKosB,QAAU3pB,EAAM0C,KAC5BvE,EAAI,EAGR,KAAOgtB,GAEQ,EAAPA,GAGK,KAAApU,IAAI5Y,GAAGitB,KAAK7tB,QAASyC,EAAM0C,KAAQ,GAAKvE,IAGjDgtB,IAAe,EACfhtB,IAGJZ,KAAKosB,QAAU3pB,EAAM0C,IAAA,CAMzB,IAAK,IAAIvE,EAAI,EAAGA,EAAIZ,KAAK6sB,OAAO3rB,OAAQN,IAEpCZ,KAAK6sB,OAAOjsB,GAAGZ,KAAMyC,EACzB,CAOGqrB,UAAAA,CAAWrrB,GAEdA,EAAQA,GAASzC,KAAK8sB,aACtB,IAAK,IAAIlsB,EAAI,EAAGA,EAAIZ,KAAKwZ,IAAItY,OAAQN,IAE5B,KAAA4Y,IAAI5Y,GAAGitB,KAAK7tB,QAASyC,EAAM0C,KAAQ,GAAKvE,IAEjD,IAAK,IAAIA,EAAI,EAAGA,EAAIZ,KAAK6sB,OAAO3rB,OAAQN,IAEpCZ,KAAK6sB,OAAOjsB,GAAGZ,KAAMyC,GAGzBzC,KAAKosB,QAAU3pB,EAAM0C,IAAA,CAOlBonB,QAAAA,CAASjuB,GAEP,KAAAyvB,aAAa5B,EAAc6B,gBAAiB1vB,GAEjD0B,KAAKsE,GAAGhG,EAAQ,SAAW,WAAW0B,KAAKsE,GAAG2pB,MAAK,CAOhDzB,SAAAA,CAAUluB,GAER,KAAAyvB,aAAa5B,EAAc+B,oBAAqB5vB,GAErD0B,KAAKsE,GAAGhG,EAAQ,SAAW,WAAW0B,KAAKsE,GAAG6pB,oBAAmB,CAO9DzB,YAAAA,CAAapuB,GAEhB0B,KAAKsE,GAAGhG,EAAQ,SAAW,WAAW0B,KAAKsE,GAAG8pB,WAAU,CAOrDxB,YAAAA,CAAatuB,GAEX,KAAAgG,GAAG+pB,UAAU/vB,EAAK,CAOpBmuB,WAAAA,CAAYnuB,GAEf0B,KAAKsE,GAAGhG,EAAQ,SAAW,WAAW0B,KAAKsE,GAAGgqB,UAAS,CAOpD3B,YAAAA,CAAaruB,GAEhB0B,KAAKsE,GAAGiqB,UAAUvuB,KAAKsE,GAAGhG,EAAQ,KAAO,OAAM,CAO5CkwB,YAAAA,CAAalwB,GAOZ,GALC0B,KAAK+sB,cAAczuB,KAEZA,EAAA,UAGRA,IAAU0B,KAAKuD,UAEf,OAGJvD,KAAKuD,UAAYjF,EAEX,MAAAma,EAAOzY,KAAK+sB,cAAczuB,GAC1BgG,EAAKtE,KAAKsE,GAEI,IAAhBmU,EAAKvX,OAELoD,EAAGmqB,UAAUhW,EAAK,GAAIA,EAAK,IAI3BnU,EAAGoqB,kBAAkBjW,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAGrC,IAAhBA,EAAKvX,QAELlB,KAAKssB,UAAW,EAChBhoB,EAAGqqB,sBAAsBlW,EAAK,GAAIA,EAAK,KAElCzY,KAAKssB,WAEVtsB,KAAKssB,UAAW,EAChBhoB,EAAGqqB,sBAAsBrqB,EAAGsqB,SAAUtqB,EAAGsqB,UAC7C,CAQGC,gBAAAA,CAAiBvwB,EAAewwB,GAE9B,KAAAxqB,GAAG+nB,cAAc/tB,EAAOwwB,EAAK,CAK/Bve,KAAAA,GAEHvQ,KAAKsE,GAAGyqB,YAAY/uB,KAAKsE,GAAG0qB,qBAAqB,GAE5C,KAAAlB,WAAW9tB,KAAK8sB,cAErB9sB,KAAKssB,UAAW,EAEhBtsB,KAAKuD,UAAY,GACjBvD,KAAKwuB,aAAa,SAAQ,CAYtBT,YAAAA,CAAakB,EAA4C3wB,GAE7D,MAAMuG,EAAQ7E,KAAK6sB,OAAOqC,QAAQD,GAE9B3wB,IACJ,IADauG,EAEJ,KAAAgoB,OAAO1b,KAAK8d,GAEX3wB,IACV,IADmBuG,GAEV,KAAAgoB,OAAOsC,OAAOtqB,EAAO,EAC9B,CAQJ,sBAAempB,CAAgBoB,EAAuB3sB,GAE3C2sB,EAAAZ,aAAa/rB,EAAMc,UAAS,CAQvC,0BAAe2qB,CAAoBkB,EAAuB3sB,GAE/C2sB,EAAAP,iBAAiB,EAAGpsB,EAAM4pB,cAAa,CAM3C/qB,OAAAA,GAEHtB,KAAKsE,GAAK,KACVtE,KAAK6sB,OAAO3rB,OAAS,IAnUhBirB,GAGK5qB,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,SAPP,IAAMuwB,GAANlD,G,eEZA,MAAMmD,GA2BT3sB,WAAAA,CAAYxB,GAzBZ,KAAOgT,OAAqBvI,EAAWkQ,WA2BnC9b,KAAKmB,QAAUA,EACfnB,KAAK+U,OAAQ,EACb/U,KAAKgV,QAAS,EACdhV,KAAKxB,KAAOsN,EAASI,cACrBlM,KAAK+e,eAAiBrT,EAAW6jB,KACjCvvB,KAAKwO,OAAS9C,EAAW6jB,KACzBvvB,KAAKwvB,YAAc,GCrCpB,MAAMC,GAA8B,CAEvCzpB,GAAI,QAEJ0pB,MAAAA,CAAO1tB,EAAuBsc,EAAsBha,GAE5Cga,EAAUvJ,QAAU/S,EAAO+S,OAASuJ,EAAUtJ,SAAWhT,EAAOgT,OAE7D1Q,EAAAqrB,cACCrrB,EAAGwX,WACH,EACA,EACA,EACAwC,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,UAKRhZ,EAAAsrB,WACCtR,EAAUnK,OACV,EACAmK,EAAUS,eACV/c,EAAO+S,MACP/S,EAAOgT,OACP,EACAsJ,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,UAIfgB,EAAUvJ,MAAQ/S,EAAO+S,MACzBuJ,EAAUtJ,OAAShT,EAAOgT,MAAA,GClC5B6a,GAA+C,CACjD,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,eAAe,EACf,eAAe,EACf,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,kBAAkB,EAClB,kBAAkB,EAClB,uBAAuB,EAIvB,kBAAkB,EAClB,uBAAuB,EACvB,oBAAoB,EACpB,yBAAyB,EACzB,mBAAmB,EACnB,wBAAwB,EACxB,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,EACjB,iBAAiB,EAIjB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,uBAAuB,EACvB,mBAAmB,EACnB,wBAAwB,EACxB,mBAAmB,EACnB,wBAAwB,EACxB,mBAAmB,EACnB,wBAAwB,EACxB,oBAAoB,EACpB,yBAAyB,EACzB,oBAAoB,EACpB,yBAAyB,EACzB,oBAAoB,EACpB,yBAAyB,GAGhBC,GAAoC,CAE7C9pB,GAAI,aAEJ0pB,MAAAA,CAAO1tB,EAA0Bsc,EAAsBha,GAEhDA,EAAAyqB,YAAYzqB,EAAGyrB,iBAAkB,GAEpC,IAAIC,EAAWhuB,EAAOoc,WAClB6R,EAAYjuB,EAAOua,YAEvB,MAAM2T,IAAeL,GAAoB7tB,EAAOwM,QAEhD,IAAK,IAAI5N,EAAI,EAAGA,EAAIoB,EAAOsb,SAASpc,OAAQN,IAC5C,CACU,MAAAuvB,EAAcnuB,EAAOsb,SAAS1c,GAEhCsvB,EAEG5rB,EAAA8rB,qBACC9rB,EAAGwX,WAAYlb,EAAG0d,EAAUS,eAC5BiR,EAAUC,EAAW,EACrBE,GAKD7rB,EAAAsrB,WACCtrB,EAAGwX,WAAYlb,EAAG0d,EAAUS,eAC5BiR,EAAUC,EAAW,EACrB3R,EAAU9P,OAAQ8P,EAAU9f,KAC5B2xB,GAGRH,EAAWrW,KAAKC,IAAIoW,GAAY,EAAG,GACnCC,EAAYtW,KAAKC,IAAIqW,GAAa,EAAG,EAAC,CAC1C,GChGKI,GAAwB,CAEjCrqB,GAAI,QAEJ0pB,MAAAA,CAAO1tB,EAAoCsc,EAAsBha,EAAwBmE,GAE/E,MAAAT,EAA0C,gCAArBhG,EAAOsuB,UAE/BhsB,EAAAyqB,YAAYzqB,EAAGisB,+BAAgCvoB,GAElD,MAAMwoB,EAAUlS,EAAUvJ,MACpB0b,EAAWnS,EAAUtJ,OAErB0b,EAAe1uB,EAAOoc,WACtBuS,EAAgB3uB,EAAOua,YAEvBqU,EAAgB5uB,EAAO4uB,cACvBC,EAAiB7uB,EAAO6uB,eAE1BD,EAAgBF,GAAgBG,EAAiBF,GAE7CH,IAAYE,GAAgBD,IAAaE,GAEtCrsB,EAAAsrB,WACCtR,EAAUnK,OACV,EACAmK,EAAUS,eACV2R,EACAC,EACA,EACArS,EAAU9P,OACV8P,EAAU9f,KACV,MAIa,IAAjBiK,EAEGnE,EAAAqrB,cACCrrB,EAAGwX,WACH,EACA,EACA,EACA8U,EACAC,EACAvS,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,UAKRhZ,EAAAqrB,cACCrrB,EAAGwX,WACH,EACA,EACA,EACAwC,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,WAIVkT,IAAYE,GAAgBD,IAAaE,EAE3CrsB,EAAAqrB,cACCrrB,EAAGwX,WACH,EACA,EACA,EACAwC,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,UAGW,IAAjB7U,EAEFnE,EAAAsrB,WACCtR,EAAUnK,OACV,EACAmK,EAAUS,eACV2R,EACAC,EACA,EACArS,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,UAKRhZ,EAAAsrB,WACCtR,EAAUnK,OACV,EACAmK,EAAUS,eACVT,EAAU9P,OACV8P,EAAU9f,KACVwD,EAAOsb,UAIfgB,EAAUvJ,MAAQ2b,EAClBpS,EAAUtJ,OAAS2b,CAAA,GCrGdG,GAAwB,CAEjC9qB,GAAI,QAEJ0pB,MAAAA,CAAO1tB,EAAqBsc,EAAsBha,EAAwBmE,GAEjEzG,EAAO+uB,QAiBZV,GAAsBX,OAAO1tB,EAAQsc,EAAWha,EAAImE,GAf7CnE,EAAAsrB,WACCtR,EAAUnK,OACV,EACAmK,EAAUS,eACV,EACA,EACA,EACAT,EAAU9P,OACV8P,EAAU9f,KACV,KAMwD,GC9B3DwyB,GAAsB,CAC/BC,OAAQ,KACRC,QAAS,MAGAC,GAA4B,CACrCF,OAAQ,CACJA,OAAQ,KACRC,QAAS,MAEbA,QAAS,CACLD,OAAQ,KACRC,QAAS,OAIJE,GAAsB,CAC/B,gBAAiB,MACjBC,OAAQ,MACR,gBAAiB,OAGRC,GAAyB,CAClCza,MAAO,IACPK,KAAM,IACNH,MAAO,IACP,aAAc,IACdM,QAAS,IACT,YAAa,IACb,gBAAiB,IACjBV,OAAQ,KCrBL,SAAS4a,GACZlvB,EACAiC,EACAktB,EAEAC,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAYF,EAGZG,EAAYV,GAAoBQ,EAAa,gBAAkBvvB,EAAM0vB,cACrEC,EAAYZ,GAAoBQ,EAAa,gBAAkBvvB,EAAM4vB,cACrEC,EAAYd,GAAoBQ,EAAa,gBAAkBvvB,EAAM8vB,cAa3E,GAXA7tB,EAAGotB,GAAgBG,EAAWvtB,EAAG8tB,eAAgBN,GACjDxtB,EAAGotB,GAAgBG,EAAWvtB,EAAG+tB,eAAgBL,GAG7C1tB,EAAGguB,gBAAgBhuB,EAAGotB,GAAgBG,EAAWvtB,EAAGguB,eAAgBJ,GAGrE5tB,EAAAotB,GAAgBG,EAAWvtB,EAAGiuB,mBAAoBvB,GAAoB3uB,EAAMmwB,YAI3EhB,EACJ,CACI,MAAMiB,EAAetB,GAA0B9uB,EAAMqwB,WAAWrwB,EAAMswB,cAEtEruB,EAAGotB,GAAgBG,EAAWvtB,EAAGsuB,mBAAoBH,EAAY,MAK9DnuB,EAAAotB,GAAgBG,EAAWvtB,EAAGsuB,mBAAoB5B,GAAoB3uB,EAAMqwB,YAI/E,GAAAjB,GAAkBpvB,EAAMwwB,cAAgB,EAC5C,CACU,MAAAC,EAAQnZ,KAAKoZ,IAAI1wB,EAAMwwB,cAAevuB,EAAGwkB,aAAa2I,EAAeuB,iCAE3E1uB,EAAGotB,GAAgBG,EAAWJ,EAAewB,2BAA4BH,EAAK,CAI9EzwB,EAAM0W,SAEHzU,EAAAotB,GAAgBG,EAAWvtB,EAAG4uB,qBAAsB5B,GAAuBjvB,EAAM0W,SAE5F,CCjCO,MAAMoa,GAqCTxwB,WAAAA,CAAY1C,GA3BZ,KAAgBmzB,gBAAmC,GAI3C,KAAAC,YAAgDpvB,OAAAC,OAAO,MACvD,KAAAovB,YAAmDrvB,OAAAC,OAAO,MAElE,KAAQqvB,eAAkC,GAC1C,KAAQC,wBAAyB,EAEzB,KAAAC,eAAsDxvB,OAAAC,OAAO,MAErE,KAAiBwvB,SAA8C,CAC3DC,MAAOtD,GACPzsB,OAAQ6rB,GACRmE,MAAO9C,GACPZ,WAAYJ,IAShB,KAAiB+D,sBAAuB,EAIpC7zB,KAAKoE,UAAYnE,CAAA,CAGXiD,aAAAA,CAAcoB,GAEpBtE,KAAKqE,IAAMC,EAENtE,KAAK8zB,6BAEN9zB,KAAK8zB,2BCnED,SACZxvB,EACA8C,GAGA,IAAIqD,EAAO,CAAC,EACRspB,EAAqBzvB,EAAGirB,KAmBrB,OAjBHjrB,aAAcoE,wBAEP+B,EAAA,CACH,kBAAmBnG,EAAG0vB,aACtB,kBAAmB1vB,EAAG0vB,cAG1BD,EAAazvB,EAAG2vB,OAEX7sB,EAAWqD,OAETA,EAAA,CACH,kBAAmBrD,EAAWqD,KAAKypB,iBACnC,kBAAmB9sB,EAAWqD,KAAKypB,mBAIpC,CAEHC,QAAS7vB,EAAG8vB,GACZC,QAAS/vB,EAAGgwB,SACZC,OAAQjwB,EAAGkwB,KACXC,OAAQnwB,EAAGowB,IAGXC,QAASrwB,EAAGswB,MACZC,QAASvwB,EAAGwwB,KACZC,SAAUzwB,EAAG0wB,KACbC,SAAU3wB,EAAG4wB,IACbC,SAAU7wB,EAAG8wB,UACbC,QAAS/wB,EAAGgxB,MACZC,QAASjxB,EAAGkxB,KAGZC,QAASnxB,EAAGoxB,MACZC,QAASrxB,EAAGsxB,KACZC,SAAUvxB,EAAGwxB,KACbC,SAAUzxB,EAAG0xB,OACbC,SAAU3xB,EAAG4xB,MACbC,UAAW7xB,EAAG8xB,MACdC,WAAY/xB,EAAGirB,QAEZ9kB,EAGH6rB,WAAYhyB,EAAGiyB,YACfC,UAAWlyB,EAAGmyB,QACdC,UAAWpyB,EAAGqyB,OACd5C,aACA6C,aAActyB,EAAGuyB,QACjBC,aAAcxyB,EAAGyyB,SACjBC,cAAe1yB,EAAG2yB,eAGlBC,SAAU5yB,EAAG6yB,OACbC,SAAU9yB,EAAG+yB,MACbC,UAAWhzB,EAAGizB,MACdC,WAAYlzB,EAAGmzB,SACfC,WAAYpzB,EAAGqzB,QACfC,YAAatzB,EAAGuzB,QAGhBC,WAAYxzB,EAAGyzB,SACfC,WAAY1zB,EAAG2zB,QACfC,YAAa5zB,EAAG6zB,QAGhBC,SAAU9zB,EAAG+zB,eACbC,aAAch0B,EAAGi0B,kBACjBC,YAAal0B,EAAGm0B,kBAChB,uBAAwBn0B,EAAG+a,iBAC3BqZ,aAAcp0B,EAAGq0B,mBACjB,wBAAyBr0B,EAAGs0B,qBAGzBxxB,EAAWoC,KAAO,CACjB,iBAAkBpC,EAAWoC,KAAKqvB,8BAClC,iBAAkBzxB,EAAWoC,KAAKsvB,8BAClC,iBAAkB1xB,EAAWoC,KAAKuvB,+BAClC,CAAC,KACF3xB,EAAWqC,UAAY,CACtB,sBAAuBrC,EAAWqC,UAAUuvB,oCAC5C,sBAAuB5xB,EAAWqC,UAAUwvB,oCAC5C,sBAAuB7xB,EAAWqC,UAAUyvB,qCAC5C,CAAC,KACF9xB,EAAW4C,KAAO,CACjB,cAAe5C,EAAW4C,KAAKmvB,yBAC/B,cAAe/xB,EAAW4C,KAAKovB,gCAC/B,eAAgBhyB,EAAW4C,KAAKqvB,+BAChC,eAAgBjyB,EAAW4C,KAAKsvB,uCAChC,CAAC,KACFlyB,EAAW2C,KAAO,CACjB,iBAAkB3C,EAAW2C,KAAKwvB,qCAClC,kBAAmBnyB,EAAW2C,KAAKyvB,uCACnC,iBAAkBpyB,EAAW2C,KAAK0vB,+BAClC,sBAAuBryB,EAAW2C,KAAK2vB,sCACvC,CAAC,KACFtyB,EAAWsC,IAAM,CAChB,iBAAkBtC,EAAWsC,IAAIiwB,qBACjC,sBAAuBvyB,EAAWsC,IAAIkwB,sBACtC,mBAAoBxyB,EAAWsC,IAAImwB,yCACnC,wBAAyBzyB,EAAWsC,IAAIowB,0CACxC,kBAAmB1yB,EAAWsC,IAAIqwB,0BAClC,uBAAwB3yB,EAAWsC,IAAIswB,iCACvC,eAAgB5yB,EAAWsC,IAAIuwB,mBAE/B,gBAAiB7yB,EAAWsC,IAAIwwB,4BAEhC,CAAC,KACF9yB,EAAW0C,KAAO,CACjB,iBAAkB1C,EAAW0C,KAAKqwB,6BAClC,sBAAuB/yB,EAAW0C,KAAKswB,qCACvC,iBAAkBhzB,EAAW0C,KAAKuwB,6BAClC,sBAAuBjzB,EAAW0C,KAAKwwB,qCACvC,iBAAkBlzB,EAAW0C,KAAKywB,6BAClC,sBAAuBnzB,EAAW0C,KAAK0wB,qCACvC,iBAAkBpzB,EAAW0C,KAAK2wB,6BAClC,sBAAuBrzB,EAAW0C,KAAK4wB,qCACvC,iBAAkBtzB,EAAW0C,KAAK6wB,6BAClC,sBAAuBvzB,EAAW0C,KAAK8wB,qCACvC,iBAAkBxzB,EAAW0C,KAAK+wB,6BAClC,sBAAuBzzB,EAAW0C,KAAKgxB,qCACvC,iBAAoB1zB,EAAW0C,KAAKixB,6BACpC,sBAAuB3zB,EAAW0C,KAAKkxB,qCACvC,iBAAkB5zB,EAAW0C,KAAKmxB,6BAClC,sBAAuB7zB,EAAW0C,KAAKoxB,qCACvC,kBAAmB9zB,EAAW0C,KAAKqxB,8BACnC,uBAAwB/zB,EAAW0C,KAAKsxB,sCACxC,kBAAmBh0B,EAAW0C,KAAKuxB,8BACnC,uBAAwBj0B,EAAW0C,KAAKwxB,sCACxC,kBAAmBl0B,EAAW0C,KAAKyxB,8BACnC,uBAAwBn0B,EAAW0C,KAAK0xB,sCACxC,mBAAoBp0B,EAAW0C,KAAK2xB,+BACpC,wBAAyBr0B,EAAW0C,KAAK4xB,uCACzC,mBAAoBt0B,EAAW0C,KAAK6xB,+BACpC,wBAAyBv0B,EAAW0C,KAAK8xB,uCACzC,mBAAoBx0B,EAAW0C,KAAK+xB,+BACpC,wBAAyBz0B,EAAW0C,KAAKgyB,wCACzC,CAAC,EAEb,CDjF8CC,CAA4Bz3B,EAAItE,KAAKoE,UAAUtE,QAAQsH,YAEpF,KAAA40B,iBEvEV,SAA2B13B,GAEvB,OAEH6vB,QAAS7vB,EAAG4H,cACZmoB,QAAS/vB,EAAG+H,KACZkoB,OAAQjwB,EAAG4H,cACXuoB,OAAQnwB,EAAG+H,KAGXsoB,QAASrwB,EAAGsI,eACZioB,QAASvwB,EAAGyI,MACZgoB,SAAUzwB,EAAGgJ,WACb2nB,SAAU3wB,EAAG4H,cACbipB,SAAU7wB,EAAG+H,KACbgpB,QAAS/wB,EAAG4H,cACZqpB,QAASjxB,EAAG+H,KAGZopB,QAASnxB,EAAGwJ,aACZ6nB,QAASrxB,EAAG6J,IACZ0nB,SAAUvxB,EAAGmJ,MACbsoB,SAAUzxB,EAAGsI,eACbqpB,SAAU3xB,EAAGyI,MACbopB,UAAW7xB,EAAGgJ,WACd+oB,WAAY/xB,EAAG4H,cACf,kBAAmB5H,EAAG4H,cAGtBoqB,WAAYhyB,EAAG+H,KACfmqB,UAAWlyB,EAAG4H,cACdwqB,UAAWpyB,EAAG+H,KACd0nB,WAAYzvB,EAAG4H,cACf,kBAAmB5H,EAAG4H,cACtB0qB,aAActyB,EAAG23B,yBACjBnF,aAAcxyB,EAAG43B,4BACjBlF,cAAe1yB,EAAG63B,6BAGlBjF,SAAU5yB,EAAGwJ,aACbspB,SAAU9yB,EAAG6J,IACbmpB,UAAWhzB,EAAGmJ,MACd+pB,WAAYlzB,EAAGsI,eACf8qB,WAAYpzB,EAAGyI,MACf6qB,YAAatzB,EAAGgJ,WAGhBwqB,WAAYxzB,EAAGwJ,aACfkqB,WAAY1zB,EAAG6J,IACf+pB,YAAa5zB,EAAGmJ,MAGhB2qB,SAAU9zB,EAAG4H,cACbosB,aAAch0B,EAAGsI,eACjB4rB,YAAal0B,EAAGwJ,aAChB,uBAAwBxJ,EAAG83B,kBAC3B1D,aAAcp0B,EAAGmJ,MACjB,wBAAyBnJ,EAAG+3B,+BAGpC,CFWoCC,CAAkBh4B,GACrC,KAAAi4B,mBGxEV,SAA6Bj4B,GAEzB,OAEH6vB,QAAS7vB,EAAGk4B,IACZnI,QAAS/vB,EAAGk4B,IACZjI,OAAQjwB,EAAGk4B,IACX/H,OAAQnwB,EAAGk4B,IAGX7H,QAASrwB,EAAGk4B,IACZ3H,QAAYvwB,EAAGk4B,IACfzH,SAAUzwB,EAAGk4B,IACbvH,SAAW3wB,EAAGm4B,GACdtH,SAAY7wB,EAAGm4B,GACfpH,QAAU/wB,EAAGm4B,GACblH,QAAUjxB,EAAGm4B,GAGbhH,QAASnxB,EAAGk4B,IACZ7G,QAASrxB,EAAGk4B,IACZ3G,SAAUvxB,EAAGk4B,IACbzG,SAAYzxB,EAAGm4B,GACfxG,SAAW3xB,EAAGm4B,GACdtG,UAAY7xB,EAAGm4B,GACfpG,WAAY/xB,EAAGirB,KACf,kBAAmBjrB,EAAGirB,KAGtB+G,WAAYhyB,EAAGirB,KACfiH,UAAWlyB,EAAGirB,KACdmH,UAAWpyB,EAAGirB,KACdwE,WAAYzvB,EAAGirB,KACf,kBAAmBjrB,EAAGirB,KACtBqH,aAActyB,EAAGo4B,IACjB5F,aAAcxyB,EAAGirB,KACjByH,cAAe1yB,EAAGo4B,IAGlBxF,SAAU5yB,EAAGm4B,GACbrF,SAAU9yB,EAAGm4B,GACbnF,UAAYhzB,EAAGm4B,GACfjF,WAAYlzB,EAAGirB,KACfmI,WAAYpzB,EAAGirB,KACfqI,YAAatzB,EAAGirB,KAGhBuI,WAAYxzB,EAAGirB,KACfyI,WAAY1zB,EAAGirB,KACf2I,YAAa5zB,EAAGirB,KAGhB6I,SAAU9zB,EAAG+zB,eACbC,aAAch0B,EAAGq4B,gBACjBnE,YAAal0B,EAAGq4B,gBAChB,uBAAwBr4B,EAAGib,cAC3BmZ,aAAcp0B,EAAGq4B,gBACjB,wBAAyBr4B,EAAGib,cAGpC,CHYsCqd,CAAoBt4B,IAG7C,KAAA+uB,YAAqBpvB,OAAAC,OAAO,MAC5B,KAAAovB,YAAqBrvB,OAAAC,OAAO,MAC5B,KAAAuvB,eAAwBxvB,OAAAC,OAAO,MAEpC,IAAK,IAAItD,EAAI,EAAGA,EAAI,GAAIA,IAEf,KAAAF,KAAKoB,EAAAA,EAAQC,MAAOnB,EAC7B,CAGGi8B,UAAAA,CAAW76B,GAEdhC,KAAKU,KAAKsB,EAAM,CAGbtB,IAAAA,CAAKS,GACZ,IADsCiQ,EAAAW,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,GAAAA,UAAA,GAAW,EAE7C,MAAM/P,EAASb,EAAQa,OAEnBb,GAEK,KAAAkd,WAAWrc,EAAQoP,GAEpBpR,KAAK6zB,sBAEA,KAAAiJ,aAAa96B,EAAOK,MAAO+O,KAK/B,KAAAiN,WAAW,KAAMjN,GAElBpR,KAAK6zB,sBAEA,KAAAiJ,aAAa,KAAM1rB,GAEhC,CAGGiN,UAAAA,CAAWrc,GAClB,IADyCoP,EAAAW,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,GAAAA,UAAA,GAAW,EAEhD,MAAMzN,EAAKtE,KAAKqE,IAIhB,GAFOrC,EAAA+6B,SAAW/8B,KAAKoE,UAAU44B,UAAUC,MAEvCj9B,KAAKuzB,eAAeniB,KAAcpP,EACtC,CACS,KAAAuxB,eAAeniB,GAAYpP,EAChChC,KAAKk9B,kBAAkB9rB,GAEdpP,EAAAA,GAAUF,EAAAA,EAAQC,MAAMC,OAG3B,MAAAsc,EAAYte,KAAKue,YAAYvc,GAEnCsC,EAAG64B,YAAY7e,EAAUnK,OAAQmK,EAAUnd,QAAO,CACtD,CAGI27B,YAAAA,CAAaz6B,GACrB,IAD0C+O,EAAAW,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,GAAAA,UAAA,GAAW,EAEjD,MAAMzN,EAAKtE,KAAKqE,IAEhB,IAAKhC,EAKD,OAHK,KAAAoxB,eAAeriB,GAAY,UAC7B9M,EAAA84B,YAAYhsB,EAAU,MAKvB,MAAAisB,EAAUr9B,KAAKs9B,cAAcj7B,GAE/BrC,KAAKyzB,eAAeriB,KAAcisB,IAE7B,KAAA5J,eAAeriB,GAAYisB,EAC7B/4B,EAAA84B,YAAYhsB,EAAUisB,GAC7B,CAGG7sB,MAAAA,CAAOrP,GAEV,MAAMa,EAASb,EAAQa,OACjBu7B,EAAgBv9B,KAAKuzB,eACrBjvB,EAAKtE,KAAKqE,IAEhB,IAAK,IAAIzD,EAAI,EAAGA,EAAI28B,EAAcr8B,OAAQN,IAElC,GAAA28B,EAAc38B,KAAOoB,EACzB,CACIhC,KAAKk9B,kBAAkBt8B,GAEjB,MAAA0d,EAAYte,KAAKue,YAAYvc,GAEhCsC,EAAA64B,YAAY7e,EAAUnK,OAAQ,MACjCopB,EAAc38B,GAAK,KAE3B,CAGIs8B,iBAAAA,CAAkB9rB,GAElBpR,KAAKwzB,yBAA2BpiB,IAEhCpR,KAAKwzB,uBAAyBpiB,EAC9BpR,KAAKqE,IAAIm5B,cAAcx9B,KAAKqE,IAAIo5B,SAAWrsB,GAC/C,CAGIssB,WAAAA,CAAY17B,GAEhB,MAAMsC,EAAKtE,KAAKqE,IAEVia,EAAY,IAAIgR,GAAUhrB,EAAGq5B,iBAM/B,GAJJrf,EAAU9f,KAAOwB,KAAKg8B,iBAAiBh6B,EAAOwM,QAC9C8P,EAAUS,eAAiB/e,KAAK8zB,2BAA2B9xB,EAAOwM,QAClE8P,EAAU9P,OAASxO,KAAKu8B,mBAAmBv6B,EAAOwM,QAE9CxM,EAAO47B,sBAAwB59B,KAAKoE,UAAUtE,QAAQ8G,SAASO,kBAAoBnF,EAAO67B,cAC9F,CACI,MAAMC,EAAmBnkB,KAAKC,IAAI5X,EAAO+S,MAAO/S,EAAOgT,QAEvDhT,EAAO+7B,cAAgBpkB,KAAKqkB,MAAMrkB,KAAKskB,KAAKH,IAAqB,EAoB9D,OAjBF,KAAAzK,YAAYrxB,EAAOwC,KAAO8Z,EAE1Bte,KAAKozB,gBAAgB8K,SAASl8B,KAE/BA,EAAOyE,GAAG,SAAUzG,KAAKm+B,eAAgBn+B,MACzCgC,EAAOyE,GAAG,SAAUzG,KAAKm+B,eAAgBn+B,MACzCgC,EAAOyE,GAAG,cAAezG,KAAKo+B,cAAep+B,MAC7CgC,EAAOyE,GAAG,UAAWzG,KAAKq+B,gBAAiBr+B,MAC3CgC,EAAOyE,GAAG,SAAUzG,KAAKs+B,eAAgBt+B,MACzCgC,EAAOyE,GAAG,gBAAiBzG,KAAKu+B,gBAAiBv+B,MAE5C,KAAAozB,gBAAgBjiB,KAAKnP,IAG9BhC,KAAKm+B,eAAen8B,GACpBhC,KAAKo+B,cAAcp8B,GAEZsc,CAAA,CAGD8f,aAAAA,CAAcp8B,GAEpB,MAAMsC,EAAKtE,KAAKqE,IAEVia,EAAYte,KAAKue,YAAYvc,GAEnCsC,EAAG64B,YAAY74B,EAAGwX,WAAYwC,EAAUnd,SAEnC,KAAAoyB,eAAevzB,KAAKwzB,wBAA0BxxB,EAEnDuvB,GACIvvB,EAAOK,MACPiC,EACAtC,EAAO+7B,cAAgB,EACvB/9B,KAAKoE,UAAUtE,QAAQsH,WAAWiC,qBAClC,gBACA/E,EAAGwX,YAEF9b,KAAKoE,UAAUtE,QAAQ8G,SAASK,oBAAsBjF,EAAO67B,aAClE,CAGMS,cAAAA,CAAet8B,GAErB,MAAMsc,EAAYte,KAAKqzB,YAAYrxB,EAAOwC,KAErC8Z,IAELte,KAAKwQ,OAAOxO,GACP,KAAAqxB,YAAYrxB,EAAOwC,KAAO,KAE1B,KAAAH,IAAIm6B,cAAclgB,EAAUnd,SAAO,CAGlCg9B,cAAAA,CAAen8B,GAErB,MAAMsC,EAAKtE,KAAKqE,IAEVia,EAAYte,KAAKue,YAAYvc,GAEnCsC,EAAG64B,YAAY74B,EAAGwX,WAAYwC,EAAUnd,SAEnC,KAAAoyB,eAAevzB,KAAKwzB,wBAA0BxxB,EAE/ChC,KAAK0zB,SAAS1xB,EAAOy8B,gBAEhB,KAAA/K,SAAS1xB,EAAOy8B,gBAAgB/O,OAAO1tB,EAAQsc,EAAWha,EAAItE,KAAKoE,UAAUtE,QAAQ2I,cAK1FnE,EAAGsrB,WAAWtrB,EAAGwX,WAAY,EAAGxX,EAAGirB,KAAMvtB,EAAOoc,WAAYpc,EAAOua,YAAa,EAAGjY,EAAGirB,KAAMjrB,EAAG4H,cAAe,MAG9GlK,EAAO47B,qBAAuB57B,EAAO+7B,cAAgB,GAEhD,KAAAQ,gBAAgBv8B,GAAQ,EACjC,CAGMu8B,eAAAA,CAAgBv8B,MAAuB+P,UAAA7Q,OAAA,QAAA8Q,IAAAD,UAAA,KAAAA,UAAA,KAE9B,KAAAsM,WAAWrc,EAAQ,GAE5B,MAAAsc,EAAYte,KAAKue,YAAYvc,GAE9B,KAAAqC,IAAIq6B,eAAepgB,EAAUnK,OAAM,CAGlCkqB,eAAAA,CAAgBr8B,GAEtBA,EAAO28B,IAAI,UAAW3+B,KAAKq+B,gBAAiBr+B,MAC5CgC,EAAO28B,IAAI,SAAU3+B,KAAKm+B,eAAgBn+B,MAC1CgC,EAAO28B,IAAI,SAAU3+B,KAAKm+B,eAAgBn+B,MAC1CgC,EAAO28B,IAAI,SAAU3+B,KAAKs+B,eAAgBt+B,MAC1CgC,EAAO28B,IAAI,cAAe3+B,KAAKo+B,cAAep+B,MAC9CgC,EAAO28B,IAAI,gBAAiB3+B,KAAKu+B,gBAAiBv+B,MAElDA,KAAKozB,gBAAgBjE,OAAOnvB,KAAKozB,gBAAgBlE,QAAQltB,GAAS,GAElEhC,KAAKs+B,eAAet8B,EAAM,CAGtB48B,YAAAA,CAAav8B,GAEjB,MAAMiC,EAAKtE,KAAKqE,IAEVw6B,EAAY7+B,KAAKqE,IAAIy6B,gBAcpB,OAZF,KAAAxL,YAAYjxB,EAAM08B,aAAeF,EAEtCtN,GACIlvB,EACAiC,EACAtE,KAAKuzB,eAAevzB,KAAKwzB,wBAAwBuK,cAAgB,EACjE/9B,KAAKoE,UAAUtE,QAAQsH,WAAWiC,qBAClC,oBACAw1B,GACA,GAGG7+B,KAAKszB,YAAYjxB,EAAM08B,YAAW,CAGrCzB,aAAAA,CAAcD,GAElB,OAAOr9B,KAAKszB,YAAY+J,EAAQ0B,cAAgB/+B,KAAK4+B,aAAavB,EAAO,CAGtE9e,WAAAA,CAAYvc,GAEf,OAAOhC,KAAKqzB,YAAYrxB,EAAOwC,MAAQxE,KAAK09B,YAAY17B,EAAM,CAG3Dg9B,cAAAA,CAAe79B,GAElB,MAAM,OAAE89B,EAAQlqB,MAAAA,EAAA,OAAOC,GAAWhV,KAAKk/B,UAAU/9B,GAE3C6H,EAASm2B,GAAAA,EAAWC,MAAMC,eAEhCr2B,EAAO+L,MAAQA,EACf/L,EAAOgM,OAASA,EAEV,MAAAsqB,EAAMt2B,EAAOE,WAAW,MAE9B,GAAIo2B,EACJ,CACI,MAAMC,EAAYD,EAAIE,gBAAgBzqB,EAAOC,GAEnCuqB,EAAAp6B,KAAK3B,IAAIy7B,GACfK,EAAAG,aAAaF,EAAW,EAAG,EAAC,CAG7B,OAAAv2B,CAAA,CAGJk2B,SAAAA,CAAU/9B,GAEP,MAAA8T,EAAa9T,EAAQa,OAAOiT,WAC5ByqB,EAAQv+B,EAAQu+B,MAEhB3qB,EAAQ4E,KAAKC,IAAID,KAAKgmB,MAAMD,EAAM3qB,MAAQE,GAAa,GACvDD,EAAS2E,KAAKC,IAAID,KAAKgmB,MAAMD,EAAM1qB,OAASC,GAAa,GACzDgqB,EAAS,IAAIW,WA7VH,EA6VgC7qB,EAAQC,GAElD/U,EAAWD,KAAKoE,UAEhB6P,EAAehU,EAASgU,aAAaC,gBAAgB/S,GACrD0+B,EAAiB5/B,EAASgU,aAAawH,mBAAmBxH,GAE1D3P,EAAKrE,EAASqE,GAsBb,OApBPA,EAAGoX,gBAAgBpX,EAAGqX,YAAakkB,EAAejkB,0BAE/CtX,EAAAw7B,WACCnmB,KAAKgmB,MAAMD,EAAM3jB,EAAI9G,GACrB0E,KAAKgmB,MAAMD,EAAM1jB,EAAI/G,GACrBF,EACAC,EACA1Q,EAAGirB,KACHjrB,EAAG4H,cACH+yB,GAWG,CAAEA,OAAQ,IAAIc,kBAAkBd,EAAOr7B,QAASmR,QAAOC,SAAO,CAGlE1T,OAAAA,GAIE,KAAA8xB,gBACA4M,QACAvjB,SAASza,GAAWhC,KAAKq+B,gBAAgBr8B,KAE7ChC,KAAKozB,gBAA2B,KAEhCpzB,KAAKoE,UAAqB,MAjYtB+uB,GAGK5xB,UAAY,CACtB/C,KAAM,CACFgD,EAAAA,GAAckF,aAElB5H,KAAM,WIVd,MAAMmhC,GAAsB,IACrBC,EAAAA,EACH3lB,GACAlF,EACA5J,EACA1H,EACAovB,GACA3T,GACA7Q,EACAkc,GACAvC,GACA5S,EACA2Z,GACApZ,EACAX,GAEE6qB,GAAoB,IAAIC,EAAAA,GACxBC,GAAuB,CAAC39B,EAAgBhB,EAAezD,GAGvDqiC,GAAwD,GACxDC,GAA0D,GAC1DC,GAAqD,GAE3Dp5B,EAAAA,GAAWq5B,kBAAkBj/B,EAAAA,GAAckF,YAAa45B,IACxDl5B,EAAAA,GAAWq5B,kBAAkBj/B,EAAAA,GAAck/B,WAAYH,IACvDn5B,EAAAA,GAAWq5B,kBAAkBj/B,EAAAA,GAAcC,kBAAmB++B,IAG9Dp5B,EAAAA,GAAWjE,OAAO88B,MAAwBE,MAAsBE,IA4FzD,MAAMM,WACDC,EAAAA,EAKRj+B,WAAAA,GAUI+c,MARqB,CACjB5gB,KAAM,QACNN,KAAMqiC,EAAAA,EAAaC,MACnBR,WACAC,eACAC,uBAGc,E,yDCjK1B,MAAMO,EAAe,IAAIvgB,WAAWthB,EAAAA,GAEpC,IAAK,IAAI0B,EAAI,EAAGA,EAAI1B,EAAAA,EAAc0B,IAE9BmgC,EAAangC,GAAKA,EAGT,MAAAlB,EAA4B,IAAItB,EAAAA,EAAa,CACtD4iC,UAAW,CAAE1iC,MAAOyiC,EAAcviC,KAAM,MAAOuC,KAAM7B,EAAAA,IACtD,CAAE+rB,UAAU,G","sources":["../node_modules/pixi.js/src/scene/graphics/gl/GlGraphicsAdaptor.ts","../node_modules/pixi.js/src/scene/mesh/gl/GlMeshAdaptor.ts","../node_modules/pixi.js/src/rendering/batcher/gl/GlBatchAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/const.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/GlBuffer.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/GlBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/context/GlContextSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/const.ts","../node_modules/pixi.js/src/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/geometry/GlGeometrySystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlBackBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlColorMaskSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlEncoderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlStencilSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/createUboElementsSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/createUboSyncSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlUboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlRenderTarget.ts","../node_modules/pixi.js/src/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlProgramData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/compileShader.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/defaultValue.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/mapType.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/logProgramError.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/generateProgram.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getUniformData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getUboData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlShaderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GenerateShaderSyncCode.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlUniformGroupSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateUniformsSync.ts","../node_modules/pixi.js/src/rendering/renderers/gl/state/GlStateSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/GlTexture.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/pixiToGlMaps.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/applyStyleParams.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/GlTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlType.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/WebGLRenderer.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/batchSamplersUniformGroup.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses WebGL to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'graphics',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                localUniformBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this.shader = new Shader({\n            glProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            geometry, instructions,\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGL specific..\n        shader.groups[0] = renderer.globalUniforms.bindGroup;\n\n        renderer.shader.bind(shader);\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.textures.length; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw('triangle-list', batch.size, batch.start);\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * A MeshAdaptor that uses the WebGL to render meshes.\n * @memberof rendering\n * @ignore\n */\nexport class GlMeshAdaptor implements MeshAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBitGl,\n                textureBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                uTexture: Texture.EMPTY.source,\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh): void\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            const source = mesh.texture.source;\n\n            shader.resources.uTexture = source;\n            shader.resources.uSampler = source.style;\n        }\n        else if (!shader.glProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no glProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        // setting the groups to be high to be compatible and not\n        // overlap any other groups\n        shader.groups[100] = renderer.globalUniforms.bindGroup;\n        shader.groups[101] = meshPipe.localUniformsBindGroup;\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state,\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGlProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBitGl } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { State } from '../../renderers/shared/state/State';\nimport { MAX_TEXTURES } from '../shared/const';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _didUpload = false;\n    private readonly _tempState = State.for2d();\n\n    public init(batcherPipe: BatcherPipe): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'batch',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUpload = false;\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        renderer.shader.bind(this._shader, this._didUpload);\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, this._shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._didUpload = true;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < textures.length; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","/**\n * Constants for various buffer types in Pixi\n * @see BUFFER_TYPE\n * @name BUFFER_TYPE\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\nexport enum BUFFER_TYPE\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    ELEMENT_ARRAY_BUFFER = 34963,\n    ARRAY_BUFFER = 34962,\n    UNIFORM_BUFFER = 35345,\n}\n\n","import type { BUFFER_TYPE } from './const';\n\nexport class GlBuffer\n{\n    public buffer: WebGLBuffer;\n    public updateID: number;\n    public byteLength: number;\n    public type: number;\n\n    constructor(buffer: WebGLBuffer, type: BUFFER_TYPE)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.type = type;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferUsage } from '../../shared/buffer/const';\nimport { BUFFER_TYPE } from './const';\nimport { GlBuffer } from './GlBuffer';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the Buffer class.\n * @class\n * @memberof rendering\n */\nexport class GlBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    private _gl: GlRenderingContext;\n    private _gpuBuffers: {[key: number]: GlBuffer} = Object.create(null);\n\n    /** Cache keeping track of the base bound buffer bases */\n    private readonly _boundBufferBases: {[key: number]: Buffer} = Object.create(null);\n\n    private _renderer: WebGLRenderer;\n\n    /**\n     * @param {Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._gl = null;\n        this._gpuBuffers = null;\n        (this._boundBufferBases as null) = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this._gpuBuffers = Object.create(null);\n        this._gl = this._renderer.gl;\n    }\n\n    public getGlBuffer(buffer: Buffer): GlBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    public bind(buffer: Buffer): void\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    public bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { _gl: gl } = this;\n\n        if (this._boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = this.getGlBuffer(buffer);\n\n            this._boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    public bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { _gl: gl } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {Buffer} buffer - the buffer to update\n     */\n    public updateBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return glBuffer;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n\n        const data = buffer.data;\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // assuming our buffers are aligned to 4 bits...\n            // offset is always zero for now!\n            gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n        }\n        else\n        {\n            const drawType = (buffer.descriptor.usage & BufferUsage.STATIC) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = data.byteLength;\n\n            // assuming our buffers are aligned to 4 bits...\n            gl.bufferData(glBuffer.type, data, drawType);\n        }\n\n        return glBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        const gl = this._gl;\n\n        for (const id in this._gpuBuffers)\n        {\n            gl.deleteBuffer(this._gpuBuffers[id].buffer);\n        }\n\n        this._gpuBuffers = Object.create(null);\n    }\n\n    /**\n     * Disposes buffer\n     * @param {Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onBufferDestroy(buffer: Buffer, contextLost?: boolean): void\n    {\n        const glBuffer = this._gpuBuffers[buffer.uid];\n\n        const gl = this._gl;\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        let type = BUFFER_TYPE.ARRAY_BUFFER;\n\n        if ((buffer.descriptor.usage & BufferUsage.INDEX))\n        {\n            type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n        else if ((buffer.descriptor.usage & BufferUsage.UNIFORM))\n        {\n            type = BUFFER_TYPE.UNIFORM_BUFFER;\n        }\n\n        const glBuffer = new GlBuffer(gl.createBuffer(), type);\n\n        this._gpuBuffers[buffer.uid] = glBuffer;\n\n        buffer.on('destroy', this.onBufferDestroy, this);\n\n        return glBuffer;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { type GpuPowerPreference } from '../../types';\n\nimport type { System } from '../../shared/system/System';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\n/**\n * Options for the context system.\n * @ignore\n */\nexport interface ContextSystemOptions\n{\n    /** **WebGL Only.** User-provided WebGL rendering context object. */\n    context: WebGL2RenderingContext | null;\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     */\n    powerPreference?: GpuPowerPreference;\n\n    /** **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha. */\n    premultipliedAlpha: boolean;\n    /**\n     * **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     */\n    preserveDrawingBuffer: boolean;\n\n    antialias?: boolean;\n\n    preferWebGLVersion?: 1 | 2;\n}\n\n/**\n * System plugin to the renderer to manage the context\n * @memberof rendering\n */\nexport class GlContextSystem implements System<ContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'context',\n    } as const;\n\n    /** @ignore */\n    public static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link WebGLOptions.context}\n         * @default null\n         */\n        context: null,\n        /**\n         * {@link WebGLOptions.premultipliedAlpha}\n         * @default true\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link WebGLOptions.preserveDrawingBuffer}\n         * @default false\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link WebGLOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * {@link WebGLOptions.webGLVersion}\n         * @default 2\n         */\n        preferWebGLVersion: 2,\n    };\n\n    protected CONTEXT_UID: number;\n    protected gl: WebGL2RenderingContext;\n\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    public supports = {\n        /** Support for 32-bit indices buffer. */\n        uint32Indices: true,\n        /** Support for UniformBufferObjects */\n        uniformBufferObject: true,\n        /** Support for VertexArrayObjects */\n        vertexArrayObject: true,\n        /** Support for SRGB texture format */\n        srgbTextures: true,\n        /** Support for wrapping modes if a texture is non-power of two */\n        nonPowOf2wrapping: true,\n        /** Support for MSAA (antialiasing of dynamic textures) */\n        msaa: true,\n        /** Support for mipmaps if a texture is non-power of two */\n        nonPowOf2mipmaps: true,\n    };\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    public webGLVersion: 1 | 2;\n\n    private _renderer: WebGLRenderer;\n    private _contextLossForced: boolean;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.extensions = Object.create(null);\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n        this._renderer.gl = gl;\n    }\n\n    public init(options: ContextSystemOptions): void\n    {\n        options = { ...GlContextSystem.defaultOptions, ...options };\n\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this._renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha ?? true;\n            const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n\n            this.createContext(options.preferWebGLVersion, {\n                alpha,\n                premultipliedAlpha,\n                antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference ?? 'default',\n            });\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    protected initFromContext(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n\n        this.webGLVersion = gl instanceof WebGL2RenderingContext ? 2 : 1;\n\n        this.getExtensions();\n\n        this.validateContext(gl);\n\n        this._renderer.runners.contextChange.emit(gl);\n\n        const element = this._renderer.view.canvas;\n\n        (element as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        element.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param preferWebGLVersion\n     * @param {object} options - context attributes\n     */\n    protected createContext(preferWebGLVersion: 1 | 2, options: WebGLContextAttributes): void\n    {\n        let gl: WebGL2RenderingContext | WebGLRenderingContext;\n        const canvas = this._renderer.view.canvas;\n\n        if (preferWebGLVersion === 2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as WebGL2RenderingContext;\n\n        this.initFromContext(this.gl);\n    }\n\n    /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc'),\n            rgtc: gl.getExtension('EXT_texture_compression_rgtc'),\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            this.extensions = {\n                ...common,\n\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n                vertexAttribDivisorANGLE: gl.getExtension('ANGLE_instanced_arrays'),\n                srgb: gl.getExtension('EXT_sRGB'),\n            };\n        }\n        else\n        {\n            this.extensions = {\n                ...common,\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n            };\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n\n        // only restore if we purposefully nuked it\n        if (this._contextLossForced)\n        {\n            this._contextLossForced = false;\n            // Restore the context after this event has exited\n            setTimeout(() =>\n            {\n                if (this.gl.isContextLost())\n                {\n                    this.extensions.loseContext?.restoreContext();\n                }\n            }, 0);\n        }\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this._renderer.runners.contextChange.emit(this.gl);\n    }\n\n    public destroy(): void\n    {\n        const element = this._renderer.view.canvas;\n\n        this._renderer = null;\n\n        // remove listeners\n        (element as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        element.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        this.extensions.loseContext?.loseContext();\n    }\n\n    /**\n     * this function can be called to force a webGL context loss\n     * this will release all resources on the GPU.\n     * Useful if you need to put Pixi to sleep, and save some GPU memory\n     *\n     * As soon as render is called - all resources will be created again.\n     */\n    public forceContextLoss(): void\n    {\n        this.extensions.loseContext?.loseContext();\n        this._contextLossForced = true;\n    }\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: WebGL2RenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n\n        // support\n        const supports = this.supports;\n\n        const isWebGl2 = this.webGLVersion === 2;\n        const extensions = this.extensions;\n\n        supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n        supports.uniformBufferObject = isWebGl2;\n        supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n        supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n        supports.nonPowOf2wrapping = isWebGl2;\n        supports.nonPowOf2mipmaps = isWebGl2;\n        supports.msaa = isWebGl2;\n\n        if (!supports.uint32Indices)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not support 32 index buffer, large scenes may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n    }\n}\n","/**\n * Various GL texture/resources formats.\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} [RGBA=6408] -\n * @property {number} [RGB=6407] -\n * @property {number} [RG=33319] -\n * @property {number} [RED=6403] -\n * @property {number} [RGBA_INTEGER=36249] -\n * @property {number} [RGB_INTEGER=36248] -\n * @property {number} [RG_INTEGER=33320] -\n * @property {number} [RED_INTEGER=36244] -\n * @property {number} [ALPHA=6406] -\n * @property {number} [LUMINANCE=6409] -\n * @property {number} [LUMINANCE_ALPHA=6410] -\n * @property {number} [DEPTH_COMPONENT=6402] -\n * @property {number} [DEPTH_STENCIL=34041] -\n */\nexport enum GL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    RGBA = 6408,\n    RGB = 6407,\n    RG = 33319,\n    RED = 6403,\n    RGBA_INTEGER = 36249,\n    RGB_INTEGER = 36248,\n    RG_INTEGER = 33320,\n    RED_INTEGER = 36244,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} [TEXTURE_2D=3553] -\n * @property {number} [TEXTURE_CUBE_MAP=34067] -\n * @property {number} [TEXTURE_2D_ARRAY=35866] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -\n */\nexport enum GL_TARGETS\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @name WRAP_MODES\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nexport enum GL_WRAP_MODES\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    CLAMP = 33071,\n    REPEAT = 10497,\n    MIRRORED_REPEAT = 33648,\n}\n\nexport enum GL_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 8 bits per channel for gl.RGBA\n     * @default 5121\n     */\n    UNSIGNED_BYTE = 5121,\n    /**\n     * @default 5123\n     */\n    UNSIGNED_SHORT = 5123,\n    /**\n     * 5 red bits, 6 green bits, 5 blue bits.\n     * @default 33635\n     */\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    /**\n     * 4 red bits, 4 green bits, 4 blue bits, 4 alpha bits.\n     * @default 32819\n     */\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    /**\n     * 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n     * @default 32820\n     */\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    /**\n     * @default 5125\n     */\n    UNSIGNED_INT = 5125,\n    /**\n     * @default 35899\n     */\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    /**\n     * @default 33640\n     */\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    /**\n     * @default 34042\n     */\n    UNSIGNED_INT_24_8 = 34042,\n    /**\n     * @default 35902\n     */\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    /**\n     * @default 5120\n     */\n    BYTE = 5120,\n    /**\n     * @default 5122\n     */\n    SHORT = 5122,\n    /**\n     * @default 5124\n     */\n    INT = 5124,\n    /**\n     * @default 5126\n     */\n    FLOAT = 5126,\n    /**\n     * @default 36269\n     */\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    /**\n     * @default 36193\n     */\n    HALF_FLOAT = 36193,\n}\n\n","import { GL_TYPES } from '../../texture/const';\n\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nconst infoMap = {\n    uint8x2: GL_TYPES.UNSIGNED_BYTE,\n    uint8x4: GL_TYPES.UNSIGNED_BYTE,\n    sint8x2: GL_TYPES.BYTE,\n    sint8x4: GL_TYPES.BYTE,\n    unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n    unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n    snorm8x2: GL_TYPES.BYTE,\n    snorm8x4: GL_TYPES.BYTE,\n    uint16x2: GL_TYPES.UNSIGNED_SHORT,\n    uint16x4: GL_TYPES.UNSIGNED_SHORT,\n    sint16x2: GL_TYPES.SHORT,\n    sint16x4: GL_TYPES.SHORT,\n    unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n    unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n    snorm16x2: GL_TYPES.SHORT,\n    snorm16x4: GL_TYPES.SHORT,\n    float16x2: GL_TYPES.HALF_FLOAT,\n    float16x4: GL_TYPES.HALF_FLOAT,\n    float32: GL_TYPES.FLOAT,\n    float32x2: GL_TYPES.FLOAT,\n    float32x3: GL_TYPES.FLOAT,\n    float32x4: GL_TYPES.FLOAT,\n    uint32: GL_TYPES.UNSIGNED_INT,\n    uint32x2: GL_TYPES.UNSIGNED_INT,\n    uint32x3: GL_TYPES.UNSIGNED_INT,\n    uint32x4: GL_TYPES.UNSIGNED_INT,\n    sint32: GL_TYPES.INT,\n    sint32x2: GL_TYPES.INT,\n    sint32x3: GL_TYPES.INT,\n    sint32x4: GL_TYPES.INT\n};\n\nexport function getGlTypeFromFormat(format: VertexFormat): number\n{\n    return infoMap[format] ?? infoMap.float32;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { getAttributeInfoFromFormat } from '../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ensureAttributes } from '../shader/program/ensureAttributes';\nimport { getGlTypeFromFormat } from './utils/getGlTypeFromFormat';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { GlProgram } from '../shader/GlProgram';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\nconst topologyToGlMap = {\n    'point-list': 0x0000,\n    'line-list': 0x0001,\n    'line-strip': 0x0003,\n    'triangle-list': 0x0004,\n    'triangle-strip': 0x0005\n};\n\n/**\n * System plugin to the renderer to manage geometry.\n * @memberof rendering\n */\nexport class GlGeometrySystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'geometry',\n    } as const;\n\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    protected gl: GlRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n\n    protected _geometryVaoHash: Record<number, Record<string, WebGLVertexArrayObject>> = Object.create(null);\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private _renderer: WebGLRenderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        const gl = this.gl = this._renderer.gl;\n\n        if (!this._renderer.context.supports.vertexArrayObject)\n        {\n            throw new Error('[PixiJS] Vertex Array Objects are not supported on this device');\n        }\n\n        const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n\n        if (nativeVaoExtension)\n        {\n            gl.createVertexArray = (): WebGLVertexArrayObject =>\n                nativeVaoExtension.createVertexArrayOES();\n\n            gl.bindVertexArray = (vao): void =>\n                nativeVaoExtension.bindVertexArrayOES(vao);\n\n            gl.deleteVertexArray = (vao): void =>\n                nativeVaoExtension.deleteVertexArrayOES(vao);\n        }\n\n        const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n\n        if (nativeInstancedExtension)\n        {\n            gl.drawArraysInstanced = (a, b, c, d): void =>\n            {\n                nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n            };\n\n            gl.drawElementsInstanced = (a, b, c, d, e): void =>\n            {\n                nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n            };\n\n            gl.vertexAttribDivisor = (a, b): void =>\n                nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n        }\n\n        this._activeGeometry = null;\n        this._activeVao = null;\n        this._geometryVaoHash = Object.create(null);\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param program - Instance of program to use vao for.\n     */\n    public bind(geometry?: Geometry, program?: GlProgram): void\n    {\n        // shader = shader || this.renderer.shader.shader;\n\n        const gl = this.gl;\n\n        this._activeGeometry = geometry;\n\n        const vao = this.getVao(geometry, program);\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            gl.bindVertexArray(vao);\n        }\n\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    public reset(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    public updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this._renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.updateBuffer(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: GlProgram): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: GlProgram): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        const strings = ['g', geometry.uid];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    protected getVao(geometry: Geometry, program: GlProgram): WebGLVertexArrayObject\n    {\n        return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param program\n     * @param _incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, program: GlProgram, _incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this._renderer.gl;\n        // const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this._renderer.buffer;\n\n        this._renderer.shader._getProgramData(program);\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        if (!this._geometryVaoHash[geometry.uid])\n        {\n            this._geometryVaoHash[geometry.uid] = Object.create(null);\n\n            geometry.on('destroy', this.onGeometryDestroy, this);\n        }\n\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program._key] = vao;\n\n            return vao;\n        }\n\n        ensureAttributes(geometry, program._attributeData);\n\n        const buffers = geometry.buffers;\n\n        // @TODO: We don't know if VAO is supported.\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        // add it to the cache!\n        vaoObjectHash[program._key] = vao;\n        vaoObjectHash[signature] = vao;\n\n        gl.bindVertexArray(null);\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onGeometryDestroy(geometry: Geometry, contextLost?: boolean): void\n    {\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        const gl = this.gl;\n\n        if (vaoObjectHash)\n        {\n            if (contextLost)\n            {\n                for (const i in vaoObjectHash)\n                {\n                    if (this._activeVao !== vaoObjectHash[i])\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[i]);\n                }\n            }\n\n            this._geometryVaoHash[geometry.uid] = null;\n        }\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    public destroyAll(contextLost = false): void\n    {\n        const gl = this.gl;\n\n        for (const i in this._geometryVaoHash)\n        {\n            if (contextLost)\n            {\n                for (const j in this._geometryVaoHash[i])\n                {\n                    const vaoObjectHash = this._geometryVaoHash[i];\n\n                    if (this._activeVao !== vaoObjectHash)\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[j]);\n                }\n            }\n\n            this._geometryVaoHash[i] = null;\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: GlProgram): void\n    {\n        const gl = this._renderer.gl;\n\n        const bufferSystem = this._renderer.buffer;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = attribute.buffer;\n            const glBuffer = bufferSystem.getGlBuffer(buffer);\n\n            if (program._attributeData[j])\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = attribute.location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                const attributeInfo = getAttributeInfoFromFormat(attribute.format);\n\n                gl.vertexAttribPointer(location,\n                    attributeInfo.size,\n                    getGlTypeFromFormat(attribute.format),\n                    attributeInfo.normalised,\n                    attribute.stride,\n                    attribute.offset);\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        gl.vertexAttribDivisor(location, 1);// attribute.divisor);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param topology - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    public draw(topology?: Topology, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this._renderer;\n        const geometry = this._activeGeometry;\n\n        const glTopology = topologyToGlMap[geometry.topology || topology];\n\n        instanceCount ||= geometry.instanceCount;\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (instanceCount > 1)\n            {\n                /* eslint-disable max-len */\n                gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n                /* eslint-enable max-len */\n            }\n            else\n            {\n                /* eslint-disable max-len */\n                gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                /* eslint-enable max-len */\n            }\n        }\n        else if (instanceCount > 1)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n        }\n        else\n        {\n            gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this.gl = null;\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { warn } from '../../../utils/logging/warn';\nimport { Geometry } from '../shared/geometry/Geometry';\nimport { Shader } from '../shared/shader/Shader';\nimport { State } from '../shared/state/State';\nimport { TextureSource } from '../shared/texture/sources/TextureSource';\nimport { Texture } from '../shared/texture/Texture';\nimport { GlProgram } from './shader/GlProgram';\n\nimport type { RenderOptions } from '../shared/system/AbstractRenderer';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nconst bigTriangleGeometry = new Geometry({\n    attributes: {\n        aPosition: [\n            -1.0, -1.0, // Bottom left corner\n            3.0, -1.0, // Bottom right corner, extending beyond right edge\n            -1.0, 3.0 // Top left corner, extending beyond top edge\n        ],\n    },\n});\n\n/** The options for the back buffer system. */\nexport interface GlBackBufferOptions\n{\n    /** if true will use the back buffer where required */\n    useBackBuffer?: boolean;\n    /** if true will ensure the texture is antialiased */\n    antialias?: boolean;\n}\n\n/**\n * For blend modes you need to know what pixels you are actually drawing to. For this to be possible in WebGL\n * we need to render to a texture and then present that texture to the screen. This system manages that process.\n *\n * As the main scene is rendered to a texture, it means we can sample it anc copy its pixels,\n * something not possible on the main canvas.\n *\n * If antialiasing is set to to true and useBackBuffer is set to true, then the back buffer will be antialiased.\n * and the main gl context will not.\n *\n * You only need to activate this back buffer if you are using a blend mode that requires it.\n *\n * to activate is simple, you pass `useBackBuffer:true` to your render options\n * @memberof rendering\n */\nexport class GlBackBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'backBuffer',\n        priority: 1\n    } as const;\n\n    /** default options for the back buffer system */\n    public static defaultOptions: GlBackBufferOptions = {\n        useBackBuffer: false,\n    };\n\n    /** if true, the back buffer is used */\n    public useBackBuffer = false;\n\n    private _backBufferTexture: Texture;\n    private readonly _renderer: WebGLRenderer;\n    private _targetTexture: TextureSource;\n    private _useBackBufferThisRender = false;\n    private _antialias: boolean;\n    private _state: State;\n    private _bigTriangleShader: Shader;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: GlBackBufferOptions = {})\n    {\n        const { useBackBuffer, antialias } = { ...GlBackBufferSystem.defaultOptions, ...options };\n\n        this.useBackBuffer = useBackBuffer;\n\n        this._antialias = antialias;\n\n        if (!this._renderer.context.supports.msaa)\n        {\n            warn('antialiasing, is not supported on when using the back buffer');\n\n            this._antialias = false;\n        }\n\n        this._state = State.for2d();\n\n        const bigTriangleProgram = new GlProgram({\n            vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n        \n                void main() {\n                    gl_Position = gl_Position = vec4(aPosition, 0.0, 1.0);\n        \n                    vUv = (aPosition + 1.0) / 2.0;\n        \n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n            fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n        \n                uniform sampler2D uTexture;\n        \n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n            name: 'big-triangle',\n        });\n\n        this._bigTriangleShader = new Shader({\n            glProgram: bigTriangleProgram,\n            resources: {\n                uTexture: Texture.WHITE.source,\n            },\n        });\n    }\n\n    /**\n     * This is called before the RenderTargetSystem is started. This is where\n     * we replace the target with the back buffer if required.\n     * @param options - The options for this render.\n     */\n    protected renderStart(options: RenderOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n        this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n\n        if (this._useBackBufferThisRender)\n        {\n            const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n            this._targetTexture = renderTarget.colorTexture;\n\n            options.target = this._getBackBufferTexture(renderTarget.colorTexture);\n        }\n    }\n\n    protected renderEnd()\n    {\n        this._presentBackBuffer();\n    }\n\n    private _presentBackBuffer()\n    {\n        const renderer = this._renderer;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (!this._useBackBufferThisRender) return;\n\n        renderer.renderTarget.bind(this._targetTexture, false);\n\n        this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n\n        renderer.encoder.draw({\n            geometry: bigTriangleGeometry,\n            shader: this._bigTriangleShader,\n            state: this._state,\n        });\n    }\n\n    private _getBackBufferTexture(targetSourceTexture: TextureSource)\n    {\n        this._backBufferTexture = this._backBufferTexture || new Texture({\n            source: new TextureSource({\n                width: targetSourceTexture.width,\n                height: targetSourceTexture.height,\n                resolution: targetSourceTexture._resolution,\n                antialias: this._antialias,\n            }),\n        });\n\n        // this will not resize if its the same size already! No extra check required\n        this._backBufferTexture.source.resize(\n            targetSourceTexture.width,\n            targetSourceTexture.height,\n            targetSourceTexture._resolution,\n        );\n\n        return this._backBufferTexture;\n    }\n\n    /** destroys the back buffer */\n    public destroy()\n    {\n        if (this._backBufferTexture)\n        {\n            this._backBufferTexture.destroy();\n            this._backBufferTexture = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles color masking for the WebGL.\n * @memberof rendering\n */\nexport class GlColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGLRenderer;\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.gl.colorMask(\n            !!(colorMask & 0b1000),\n            !!(colorMask & 0b0100),\n            !!(colorMask & 0b0010),\n            !!(colorMask & 0b0001)\n        );\n    }\n\n    public destroy?: () => void;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles encoding commands for the WebGL.\n * @memberof rendering\n */\nexport class GlEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'encoder',\n    } as const;\n\n    public readonly commandFinished = Promise.resolve();\n    private readonly _renderer: WebGLRenderer;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setGeometry(geometry: Geometry, shader?: Shader)\n    {\n        this._renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public finishRenderPass()\n    {\n        // noop\n    }\n\n    public draw(options: {\n        geometry: Geometry,\n        shader: Shader,\n        state?: State,\n        topology?: Topology,\n        size?: number,\n        start?: number,\n        instanceCount?: number\n        skipSync?: boolean,\n    })\n    {\n        const renderer = this._renderer;\n        const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n\n        renderer.shader.bind(shader, skipSync);\n\n        renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n\n        if (state)\n        {\n            renderer.state.set(state);\n        }\n\n        renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GlStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private _gl: WebGLRenderingContext;\n\n    private readonly _stencilCache = {\n        enabled: false,\n        stencilReference: 0,\n        stencilMode: STENCIL_MODES.NONE,\n    };\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _stencilOpsMapping: {\n        keep: number;\n        zero: number;\n        replace: number;\n        invert: number;\n        'increment-clamp': number;\n        'decrement-clamp': number;\n        'increment-wrap': number;\n        'decrement-wrap': number;\n    };\n\n    private _comparisonFuncMapping: {\n        always: number;\n        never: number;\n        equal: number;\n        'not-equal': number;\n        less: number;\n        'less-equal': number;\n        greater: number;\n        'greater-equal': number;\n    };\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected contextChange(gl: WebGLRenderingContext)\n    {\n        // TODO - this could be declared in a gl const\n        // we know the numbers don't tend to change!\n        this._gl = gl;\n\n        this._comparisonFuncMapping = {\n            always: gl.ALWAYS,\n            never: gl.NEVER,\n            equal: gl.EQUAL,\n            'not-equal': gl.NOTEQUAL,\n            less: gl.LESS,\n            'less-equal': gl.LEQUAL,\n            greater: gl.GREATER,\n            'greater-equal': gl.GEQUAL,\n        };\n\n        this._stencilOpsMapping = {\n            keep: gl.KEEP,\n            zero: gl.ZERO,\n            replace: gl.REPLACE,\n            invert: gl.INVERT,\n            'increment-clamp': gl.INCR,\n            'decrement-clamp': gl.DECR,\n            'increment-wrap': gl.INCR_WRAP,\n            'decrement-wrap': gl.DECR_WRAP,\n        };\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        if (this._activeRenderTarget === renderTarget) return;\n\n        this._activeRenderTarget = renderTarget;\n\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        // restore the current render targets stencil state..\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        const gl = this._gl;\n        const mode = GpuStencilModesToPixi[stencilMode];\n\n        const _stencilCache = this._stencilCache;\n\n        // store the stencil state for restoration later, if a render target changes\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        if (stencilMode === STENCIL_MODES.DISABLED)\n        {\n            if (this._stencilCache.enabled)\n            {\n                this._stencilCache.enabled = false;\n\n                gl.disable(gl.STENCIL_TEST);\n            }\n\n            return;\n        }\n\n        if (!this._stencilCache.enabled)\n        {\n            this._stencilCache.enabled = true;\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference)\n        {\n            _stencilCache.stencilMode = stencilMode;\n            _stencilCache.stencilReference = stencilReference;\n\n            // this is pretty simple mapping.\n            // will work for pixi's simple mask cases.\n            // although a true mapping of the GPU state to webGL state should be done\n            gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 0xFF);\n            gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n        }\n    }\n\n    public destroy?: () => void;\n}\n","import type { UboElement, UboLayout, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_TO_STD40_SIZE: Record<string, number> = {\n    f32: 4,\n    'vec2<f32>': 8,\n    'vec3<f32>': 12,\n    'vec4<f32>': 16,\n\n    'mat2x2<f32>': 16 * 2,\n    'mat3x3<f32>': 16 * 3,\n    'mat4x4<f32>': 16 * 4,\n\n    // TODO - not essential for now but support these in the future\n    // int:      4,\n    // ivec2:    8,\n    // ivec3:    12,\n    // ivec4:    16,\n\n    // uint:     4,\n    // uvec2:    8,\n    // uvec3:    12,\n    // uvec4:    16,\n\n    // bool:     4,\n    // bvec2:    8,\n    // bvec3:    12,\n    // bvec4:    16,\n\n    // mat2:     16 * 2,\n    // mat3:     16 * 3,\n    // mat4:     16 * 4,\n};\n\nexport function createUboElementsSTD40(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let size = 0;\n    let chunkSize = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (!size)\n        {\n            throw new Error(`Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, 16) * uboElement.data.size;\n        }\n\n        uboElement.size = size;\n\n        // add some size offset..\n        // must align to the nearest 16 bytes or internally nearest round size\n        if (chunkSize % size !== 0 && chunkSize < 16)\n        {\n            // diff required to line up..\n            const lineUpValue = (chunkSize % size) % 16;\n\n            chunkSize += lineUpValue;\n            offset += lineUpValue;\n        }\n\n        if ((chunkSize + size) > 16)\n        {\n            offset = Math.ceil(offset / 16) * 16;\n            uboElement.offset = offset;\n            offset += size;\n            chunkSize = size;\n        }\n        else\n        {\n            uboElement.offset = offset;\n            chunkSize += size;\n            offset += size;\n        }\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the std140 layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncSTD40(uboElement: UboElement, offsetToAdd: number): string\n{\n    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n\n    const remainder = (4 - (elementSize % 4)) % 4;\n\n    return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n        }\n    `;\n}\n","/* eslint-disable quote-props */\n\nimport { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsSTD40 } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncSTD40 } from './generateArraySyncSTD40';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionSTD40(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboStd40',\n        generateArraySyncSTD40,\n        uboSyncFunctionsSTD40,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsSTD40 } from './shader/utils/createUboElementsSTD40';\nimport { createUboSyncFunctionSTD40 } from './shader/utils/createUboSyncSTD40';\n\n/**\n * System plugin to the renderer to manage uniform buffers. But with an WGSL adaptor.\n * @memberof rendering\n */\nexport class GlUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsSTD40,\n            generateUboSync: createUboSyncFunctionSTD40,\n        });\n    }\n}\n","/**\n * Represents a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTarget\n{\n    public width = -1;\n    public height = -1;\n    public msaa = false;\n    public framebuffer: WebGLFramebuffer;\n    public resolveTargetFramebuffer: WebGLFramebuffer;\n    public msaaRenderBuffer: WebGLRenderbuffer[] = [];\n    public depthStencilRenderBuffer: WebGLRenderbuffer;\n}\n","import { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { warn } from '../../../../utils/logging/warn';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource';\nimport { CLEAR } from '../const';\nimport { GlRenderTarget } from '../GlRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { CLEAR_OR_BOOL } from '../const';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGL renderer\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTargetAdaptor implements RenderTargetAdaptor<GlRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GlRenderTarget>;\n    private _renderer: WebGLRenderer<HTMLCanvasElement>;\n    private _clearColorCache: RgbaArray = [0, 0, 0, 0];\n    private _viewPortCache: Rectangle = new Rectangle();\n\n    public init(renderer: WebGLRenderer, renderTargetSystem: RenderTargetSystem<GlRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n\n        renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._clearColorCache = [0, 0, 0, 0];\n        this._viewPortCache = new Rectangle();\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const renderer = this._renderer;\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n        const gl = renderer.gl;\n\n        this.finishRenderPass(sourceRenderSurfaceTexture);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n\n        renderer.texture.bind(destinationTexture, 0);\n\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0,\n            originDest.x, originDest.y,\n            originSrc.x,\n            originSrc.y,\n            size.width,\n            size.height\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const source = renderTarget.colorTexture;\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        let viewPortY = viewport.y;\n\n        if (renderTarget.isRoot)\n        {\n            // /TODO this is the same logic?\n            viewPortY = source.pixelHeight - viewport.height;\n        }\n\n        // unbind the current render texture..\n        renderTarget.colorTextures.forEach((texture) =>\n        {\n            this._renderer.texture.unbind(texture);\n        });\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n\n        const viewPortCache = this._viewPortCache;\n\n        if (viewPortCache.x !== viewport.x\n            || viewPortCache.y !== viewPortY\n            || viewPortCache.width !== viewport.width\n            || viewPortCache.height !== viewport.height)\n        {\n            viewPortCache.x = viewport.x;\n            viewPortCache.y = viewPortY;\n            viewPortCache.width = viewport.width;\n            viewPortCache.height = viewport.height;\n\n            gl.viewport(\n                viewport.x,\n                viewPortY,\n                viewport.width,\n                viewport.height,\n            );\n        }\n\n        // if the stencil buffer has been requested, we need to create a stencil buffer\n        if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth))\n        {\n            this._initStencil(gpuRenderTarget);\n        }\n\n        this.clear(renderTarget, clear, clearColor);\n    }\n\n    public finishRenderPass(renderTarget?: RenderTarget)\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (!glRenderTarget.msaa) return;\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        gl.blitFramebuffer(\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            gl.COLOR_BUFFER_BIT, gl.NEAREST,\n        );\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        // dont think we need this anymore? keeping around just in case the wheels fall off\n        // gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GlRenderTarget\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n\n        // do single...\n\n        const glRenderTarget = new GlRenderTarget();\n\n        // we are rendering to a canvas..\n        if (CanvasSource.test(renderTarget.colorTexture.resource))\n        {\n            glRenderTarget.framebuffer = null;\n\n            return glRenderTarget;\n        }\n\n        this._initColor(renderTarget, glRenderTarget);\n\n        // set up a depth texture..\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        return glRenderTarget;\n    }\n\n    public clear(_renderTarget: RenderTarget, clear: CLEAR_OR_BOOL, clearColor?: RgbaArray)\n    {\n        if (!clear) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        // if clear is boolean..\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const gl = this._renderer.gl;\n\n        if (clear & CLEAR.COLOR)\n        {\n            clearColor ??= renderTargetSystem.defaultClearColor;\n\n            const clearColorCache = this._clearColorCache;\n            const clearColorArray = clearColor as number[];\n\n            if (clearColorCache[0] !== clearColorArray[0]\n                || clearColorCache[1] !== clearColorArray[1]\n                || clearColorCache[2] !== clearColorArray[2]\n                || clearColorCache[3] !== clearColorArray[3])\n            {\n                clearColorCache[0] = clearColorArray[0];\n                clearColorCache[1] = clearColorArray[1];\n                clearColorCache[2] = clearColorArray[2];\n                clearColorCache[3] = clearColorArray[3];\n\n                gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n            }\n        }\n\n        gl.clear(clear);\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        if (renderTarget.isRoot) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        this._resizeColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil)\n        {\n            this._resizeStencil(glRenderTarget);\n        }\n    }\n\n    private _initColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n        // deal with our outputs..\n        const resolveTargetFramebuffer = gl.createFramebuffer();\n\n        glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n\n        // set up the texture..\n        gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n\n        glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n        glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            const source = colorTexture.source;\n\n            if (source.antialias)\n            {\n                if (renderer.context.supports.msaa)\n                {\n                    glRenderTarget.msaa = true;\n                }\n                else\n                {\n                    warn('[RenderTexture] Antialiasing on textures is not supported in WebGL1');\n                }\n            }\n\n            // TODO bindSource could return the glTexture\n            renderer.texture.bindSource(source, 0);\n            const glSource = renderer.texture.getGlSource(source);\n\n            const glTexture = glSource.texture;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                3553, // texture.target,\n                glTexture,\n                0);// mipLevel);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const viewFramebuffer = gl.createFramebuffer();\n\n            glRenderTarget.framebuffer = viewFramebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((_, i) =>\n            {\n                const msaaRenderBuffer = gl.createRenderbuffer();\n\n                glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n            });\n        }\n        else\n        {\n            glRenderTarget.framebuffer = resolveTargetFramebuffer;\n        }\n\n        this._resizeColor(renderTarget, glRenderTarget);\n    }\n\n    private _resizeColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const source = renderTarget.colorTexture.source;\n\n        glRenderTarget.width = source.pixelWidth;\n        glRenderTarget.height = source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            // nno need to resize the first texture..\n            if (i === 0) return;\n\n            colorTexture.source.resize(source.width, source.height, source._resolution);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const renderer = this._renderer;\n            const gl = renderer.gl;\n\n            const viewFramebuffer = glRenderTarget.framebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const source = colorTexture.source;\n\n                renderer.texture.bindSource(source, 0);\n                const glSource = renderer.texture.getGlSource(source);\n\n                const glInternalFormat = glSource.internalFormat;\n\n                const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n\n                gl.bindRenderbuffer(\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n\n                gl.renderbufferStorageMultisample(\n                    gl.RENDERBUFFER,\n                    4,\n                    glInternalFormat,\n                    source.pixelWidth,\n                    source.pixelHeight\n                );\n\n                gl.framebufferRenderbuffer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n            });\n        }\n    }\n\n    private _initStencil(glRenderTarget: GlRenderTarget)\n    {\n        // this already exists on the default screen\n        if (glRenderTarget.framebuffer === null) return;\n\n        const gl = this._renderer.gl;\n\n        const depthStencilRenderBuffer = gl.createRenderbuffer();\n\n        glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        // TDO DO>>\n        this._resizeStencil(glRenderTarget);\n    }\n\n    private _resizeStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            glRenderTarget.depthStencilRenderBuffer\n        );\n\n        if (glRenderTarget.msaa)\n        {\n            gl.renderbufferStorageMultisample(\n                gl.RENDERBUFFER,\n                4,\n                gl.DEPTH24_STENCIL8,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n        else\n        {\n            gl.renderbufferStorage(\n                gl.RENDERBUFFER,\n                this._renderer.context.webGLVersion === 2\n                    ? gl.DEPTH24_STENCIL8\n                    : gl.DEPTH_STENCIL,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GlRenderTargetAdaptor } from './GlRenderTargetAdaptor';\n\nimport type { GlRenderTarget } from '../GlRenderTarget';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GlRenderTargetSystem extends RenderTargetSystem<GlRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GlRenderTargetAdaptor();\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","/**\n * @private\n */\nexport class IGLUniformData\n{\n    public location: WebGLUniformLocation;\n    public value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @private\n */\nexport class GlProgramData\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Record<string, any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Record<string, any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBlockBindings: Record<string, any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Record<string, any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Record<string, any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBlockBindings = {};\n    }\n\n    /** Destroys this program. */\n    public destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBlockBindings = null;\n        this.program = null;\n    }\n}\n","/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n","function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @method defaultValue\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n","import type { Dict } from '../../../../../utils/types';\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\nconst GLSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    float: 'float32',\n    vec2: 'float32x2',\n    vec3: 'float32x3',\n    vec4: 'float32x4',\n\n    int: 'sint32',\n    ivec2: 'sint32x2',\n    ivec3: 'sint32x3',\n    ivec4: 'sint32x4',\n\n    uint: 'uint32',\n    uvec2: 'uint32x2',\n    uvec3: 'uint32x3',\n    uvec4: 'uint32x4',\n\n    bool: 'uint32',\n    bvec2: 'uint32x2',\n    bvec3: 'uint32x3',\n    bvec4: 'uint32x4',\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n\nexport function mapGlToVertexFormat(gl: any, type: number): VertexFormat\n{\n    const typeValue = mapType(gl, type);\n\n    return GLSL_TO_VERTEX_TYPES[typeValue] || 'float32';\n}\n","/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n * @private\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n","import { warn } from '../../../../../utils/logging/warn';\nimport { GlProgramData } from '../GlProgramData';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram';\nimport { getUboData } from './getUboData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlProgram } from '../GlProgram';\nimport type { IGLUniformData } from '../GlProgramData';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n * @private\n */\nexport function generateProgram(gl: GlRenderingContext, program: GlProgram): GlProgramData\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    program._attributeData = extractAttributesFromGlProgram(\n        webGLProgram,\n        gl,\n        !(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertex)\n    );\n\n    program._uniformData = getUniformData(webGLProgram, gl);\n    program._uniformBlockData = getUboData(webGLProgram, gl);\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program._uniformData)\n    {\n        const data = program._uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GlProgramData(webGLProgram, uniformData);\n\n    return glProgram;\n}\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { mapGlToVertexFormat } from './mapType';\n\nimport type { Attribute } from '../../../shared/geometry/Geometry';\n\nexport type ExtractedAttributeData = Omit<Attribute, 'buffer'>;\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @returns {object} the attribute data for this program\n */\n\nexport function extractAttributesFromGlProgram(\n    program: WebGLProgram,\n    gl: WebGLRenderingContextBase,\n    sortAttributes = false\n): Record<string, ExtractedAttributeData>\n{\n    const attributes: {[key: string]: ExtractedAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        // ignore the default ones!\n        if (attribData.name.startsWith('gl_'))\n        {\n            continue;\n        }\n\n        const format = mapGlToVertexFormat(gl, attribData.type);\n\n        attributes[attribData.name] = {\n            location: 0, // set further down..\n            format,\n            stride: getAttributeInfoFromFormat(format).stride,\n            offset: 0,\n            instance: false,\n            start: 0,\n        };\n    }\n\n    const keys = Object.keys(attributes);\n\n    if (sortAttributes)\n    {\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = i;\n\n            gl.bindAttribLocation(program, i, keys[i]);\n        }\n\n        gl.linkProgram(program);\n    }\n    else\n    {\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n        }\n    }\n\n    return attributes;\n}\n","import { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\nimport type { GlUniformData } from '../GlProgram';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: GlUniformData}\n{\n    const uniforms: {[key: string]: GlUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n","import type { GlUniformBlockData } from '../GlProgram';\n\n/**\n * returns the uniform block data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUboData(program: WebGLProgram, gl: WebGL2RenderingContext): Record<string, GlUniformBlockData>\n{\n    // if uniform buffer data is not supported, early out\n    if (!gl.ACTIVE_UNIFORM_BLOCKS) return {};\n\n    const uniformBlocks: Record<string, GlUniformBlockData> = {};\n\n    // const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n    for (let i = 0; i < totalUniformsBlocks; i++)\n    {\n        const name = gl.getActiveUniformBlockName(program, i);\n        const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n\n        const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n\n        uniformBlocks[name] = {\n            name,\n            index: uniformBlockIndex,\n            size,\n        };\n    }\n\n    return uniformBlocks;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateShaderSyncCode } from './GenerateShaderSyncCode';\nimport { generateProgram } from './program/generateProgram';\n\nimport type { BufferResource } from '../../shared/buffer/BufferResource';\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram } from './GlProgram';\nimport type { GlProgramData } from './GlProgramData';\n\nexport interface ShaderSyncData\n{\n    textureCount: number;\n    blockIndex: number;\n}\n\nexport type ShaderSyncFunction = (renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData) => void;\n\n// default sync data so we don't create a new one each time!\nconst defaultSyncData: ShaderSyncData = {\n    textureCount: 0,\n    blockIndex: 0,\n};\n\n/**\n * System plugin to the renderer to manage the shaders for WebGL.\n * @memberof rendering\n */\nexport class GlShaderSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    /**\n     * @internal\n     * @private\n     */\n    public _activeProgram: GlProgram = null;\n\n    private _programDataHash: Record<string, GlProgramData> = Object.create(null);\n    private readonly _renderer: WebGLRenderer;\n    public _gl: WebGL2RenderingContext;\n    private _maxBindings: number;\n    private _nextIndex = 0;\n    private _boundUniformsIdsToIndexHash: Record<number, number> = Object.create(null);\n    private _boundIndexToUniformsHash: Record<number, UniformGroup | BufferResource> = Object.create(null);\n    private _shaderSyncFunctions: Record<string, ShaderSyncFunction> = Object.create(null);\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        this._maxBindings = gl.MAX_UNIFORM_BUFFER_BINDINGS ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n\n        this._programDataHash = Object.create(null);\n        this._boundUniformsIdsToIndexHash = Object.create(null);\n        this._boundIndexToUniformsHash = Object.create(null);\n        this._activeProgram = null;\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param skipSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    public bind(shader: Shader, skipSync?: boolean): void\n    {\n        this._setProgram(shader.glProgram);\n\n        if (skipSync) return;\n\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.blockIndex = 0;\n\n        let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n\n        if (!syncFunction)\n        {\n            syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n        }\n\n        syncFunction(this._renderer, shader, defaultSyncData);\n    }\n\n    /**\n     * Updates the uniform group.\n     * @param uniformGroup - the uniform group to update\n     */\n    public updateUniformGroup(uniformGroup: UniformGroup): void\n    {\n        this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n    }\n\n    /**\n     * Binds a uniform block to the shader.\n     * @param uniformGroup - the uniform group to bind\n     * @param name - the name of the uniform block\n     * @param index - the index of the uniform block\n     */\n    public bindUniformBlock(uniformGroup: UniformGroup | BufferResource, name: string, index = 0): void\n    {\n        const bufferSystem = this._renderer.buffer;\n        const programData = this._getProgramData(this._activeProgram);\n\n        const isBufferResource = (uniformGroup as BufferResource)._bufferResource;\n\n        if (isBufferResource)\n        {\n            this._renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n        }\n\n        bufferSystem.updateBuffer(uniformGroup.buffer);\n\n        let boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid];\n\n        // check if it is already bound..\n        if (boundIndex === undefined)\n        {\n            const nextIndex = this._nextIndex++ % this._maxBindings;\n\n            const currentBoundUniformGroup = this._boundIndexToUniformsHash[nextIndex];\n\n            if (currentBoundUniformGroup)\n            {\n                this._boundUniformsIdsToIndexHash[currentBoundUniformGroup.uid] = undefined;\n            }\n\n            // find a free slot..\n            boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid] = nextIndex;\n            this._boundIndexToUniformsHash[nextIndex] = uniformGroup;\n\n            if (isBufferResource)\n            {\n                bufferSystem.bindBufferRange(uniformGroup.buffer, nextIndex, (uniformGroup as BufferResource).offset);\n            }\n            else\n            {\n                bufferSystem.bindBufferBase(uniformGroup.buffer, nextIndex);\n            }\n        }\n\n        const gl = this._gl;\n\n        const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n\n        if (programData.uniformBlockBindings[index] === boundIndex) return;\n        programData.uniformBlockBindings[index] = boundIndex;\n\n        gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundIndex);\n    }\n\n    private _setProgram(program: GlProgram)\n    {\n        if (this._activeProgram === program) return;\n\n        this._activeProgram = program;\n\n        const programData = this._getProgramData(program);\n\n        this._gl.useProgram(programData.program);\n    }\n\n    /**\n     * @param program - the program to get the data for\n     * @internal\n     * @private\n     */\n    public _getProgramData(program: GlProgram): GlProgramData\n    {\n        return this._programDataHash[program._key] || this._createProgramData(program);\n    }\n\n    private _createProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program._key;\n\n        this._programDataHash[key] = generateProgram(this._gl, program);\n\n        return this._programDataHash[key];\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._programDataHash))\n        {\n            const programData = this._programDataHash[key];\n\n            programData.destroy();\n            this._programDataHash[key] = null;\n        }\n\n        this._programDataHash = null;\n        this._boundUniformsIdsToIndexHash = null;\n    }\n\n    /**\n     * Creates a function that can be executed that will sync the shader as efficiently as possible.\n     * Overridden by the unsafe eval package if you don't want eval used in your project.\n     * @param shader - the shader to generate the sync function for\n     * @param shaderSystem - the shader system to use\n     * @returns - the generated sync function\n     * @ignore\n     */\n    public _generateShaderSync(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n    {\n        return generateShaderSyncCode(shader, shaderSystem);\n    }\n}\n","import { BufferResource } from '../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\n\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { GlShaderSystem, ShaderSyncFunction } from './GlShaderSystem';\n\n/**\n * Generates the a function that will efficiantly sync shader resources with the GPU.\n * @param shader - The shader to generate the code for\n * @param shaderSystem - An instance of the shader system\n */\nexport function generateShaderSyncCode(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n{\n    const funcFragments: string[] = [];\n\n    /**\n     * rS = renderer.shader\n     * sS = shaderSystem\n     * sD = shaderData\n     * g = shader.groups\n     * s = shader\n     * r = renderer\n     * ugS = renderer.uniformGroupSystem\n     */\n    const headerFragments: string[] = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n\n    let addedTextreSystem = false;\n    let blockIndex = 0;\n    let textureCount = 0;\n\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    for (const i in shader.groups)\n    {\n        const group = shader.groups[i];\n\n        funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n\n        for (const j in group.resources)\n        {\n            const resource = group.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            sS._uniformBindMap[${i}[${j}],\n                            ${blockIndex++}\n                        );\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        sS._uniformBindMap[${i}[${j}],\n                        ${blockIndex++}\n                    );\n                `);\n            }\n            else if (resource instanceof TextureSource)\n            {\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (!addedTextreSystem)\n                    {\n                        addedTextreSystem = true;\n                        headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n                    }\n\n                    shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n\n                    funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n\n                    textureCount++;\n                }\n            }\n        }\n    }\n\n    const functionSource = [...headerFragments, ...funcFragments].join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('r', 's', 'sD', functionSource) as ShaderSyncFunction;\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport type { UNIFORM_TYPES } from '../../../shared/shader/types';\n\nexport type ArraySetterFunction = (v: any, location: WebGLUniformLocation, gl: any) => void;\n\nexport const UNIFORM_TO_SINGLE_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n    'vec2<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n    'vec3<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n    i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n    'vec2<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n    'vec3<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n    bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n};\n\nexport const UNIFORM_TO_ARRAY_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `gl.uniform1fv(location, v);`,\n    'vec2<f32>': `gl.uniform2fv(location, v);`,\n    'vec3<f32>': `gl.uniform3fv(location, v);`,\n    'vec4<f32>': `gl.uniform4fv(location, v);`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n    i32: `gl.uniform1iv(location, v);`,\n    'vec2<i32>': `gl.uniform2iv(location, v);`,\n    'vec3<i32>': `gl.uniform3iv(location, v);`,\n    'vec4<i32>': `gl.uniform4iv(location, v);`,\n    u32: `gl.uniform1iv(location, v);`,\n    'vec2<u32>': `gl.uniform2iv(location, v);`,\n    'vec3<u32>': `gl.uniform3iv(location, v);`,\n    'vec4<u32>': `gl.uniform4iv(location, v);`,\n    bool: `gl.uniform1iv(location, v);`,\n    'vec2<bool>': `gl.uniform2iv(location, v);`,\n    'vec3<bool>': `gl.uniform3iv(location, v);`,\n    'vec4<bool>': `gl.uniform4iv(location, v);`,\n};\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateUniformsSync } from './utils/generateUniformsSync';\n\nimport type { UniformsSyncCallback } from '../../shared/shader/types';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram, GlUniformData } from './GlProgram';\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof rendering\n */\nexport class GlUniformGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'uniformGroup',\n    } as const;\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: GlRenderingContext;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private _cache: Record<string, UniformsSyncCallback> = {};\n    private _renderer: WebGLRenderer;\n\n    private _uniformGroupSyncHash: Record<string, Record<string, UniformsSyncCallback>> = {};\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.gl = null;\n        this._cache = {};\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param group - the uniforms values that be applied to the current shader\n     * @param program\n     * @param syncData\n     * @param syncData.textureCount\n     */\n    public updateUniformGroup(group: UniformGroup, program: GlProgram, syncData: { textureCount: number }): void\n    {\n        const programData = this._renderer.shader._getProgramData(program);\n\n        if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid])\n        {\n            programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n\n            const syncFunc = this._getUniformSyncFunction(group, program);\n\n            syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param program\n     */\n    private _getUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        return this._uniformGroupSyncHash[group._signature]?.[program._key]\n            || this._createUniformSyncFunction(group, program);\n    }\n\n    private _createUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature]\n            || (this._uniformGroupSyncHash[group._signature] = {});\n\n        const id = this._getSignature(group, program._uniformData, 'u');\n\n        if (!this._cache[id])\n        {\n            this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n        }\n\n        uniformGroupSyncHash[program._key] = this._cache[id];\n\n        return uniformGroupSyncHash[program._key];\n    }\n\n    private _generateUniformsSync(group: UniformGroup, uniformData: Record<string, GlUniformData>): UniformsSyncCallback\n    {\n        return generateUniformsSync(group, uniformData);\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private _getSignature(group: UniformGroup, uniformData: Record<string, any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /** Destroys this System and removes all its textures. */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._cache = null;\n    }\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport { BufferResource } from '../../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../../shared/shader/UniformGroup';\nimport { uniformParsers } from '../../../shared/shader/utils/uniformParsers';\nimport { UNIFORM_TO_ARRAY_SETTERS, UNIFORM_TO_SINGLE_SETTERS } from './generateUniformsSyncTypes';\n\nimport type { UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function generateUniformsSync(group: UniformGroup, uniformData: Record<string, any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        if (!uniformData[i])\n        {\n            if (group.uniforms[i] instanceof UniformGroup)\n            {\n                if ((group.uniforms[i] as UniformGroup).ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, \"${i}\");\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n                }\n            }\n            else if (group.uniforms[i] instanceof BufferResource)\n            {\n                funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, \"${i}\");\n                    `);\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                funcFragments.push(`name = \"${i}\";`, uniformParsers[j].uniform);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n\n            const template = templateType[uniform.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @memberof rendering\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    public reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n","import type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n","import { GL_FORMATS, GL_TARGETS, GL_TYPES } from './const';\n\n/**\n * Internal texture for WebGL context\n * @memberof rendering\n * @ignore\n */\nexport class GlTexture\n{\n    public target: GL_TARGETS = GL_TARGETS.TEXTURE_2D;\n\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** Type copied from texture source. */\n    public type: number;\n\n    /** Type copied from texture source. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link SAMPLER_TYPES} */\n    public samplerType: number;\n\n    public format: GL_FORMATS;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.type = GL_TYPES.UNSIGNED_BYTE;\n        this.internalFormat = GL_FORMATS.RGBA;\n        this.format = GL_FORMATS.RGBA;\n        this.samplerType = 0;\n    }\n}\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadBufferImageResource = {\n\n    id: 'image',\n\n    upload(source: TextureSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        if (glTexture.width === source.width || glTexture.height === source.height)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                source.width,\n                source.height,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n\n        glTexture.width = source.width;\n        glTexture.height = source.height;\n    }\n} as GLTextureUploader;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nconst compressedFormatMap: Record<string, boolean> = {\n    'bc1-rgba-unorm': true,\n    'bc1-rgba-unorm-srgb': true,\n    'bc2-rgba-unorm': true,\n    'bc2-rgba-unorm-srgb': true,\n    'bc3-rgba-unorm': true,\n    'bc3-rgba-unorm-srgb': true,\n    'bc4-r-unorm': true,\n    'bc4-r-snorm': true,\n    'bc5-rg-unorm': true,\n    'bc5-rg-snorm': true,\n    'bc6h-rgb-ufloat': true,\n    'bc6h-rgb-float': true,\n    'bc7-rgba-unorm': true,\n    'bc7-rgba-unorm-srgb': true,\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'etc2-rgb8unorm': true,\n    'etc2-rgb8unorm-srgb': true,\n    'etc2-rgb8a1unorm': true,\n    'etc2-rgb8a1unorm-srgb': true,\n    'etc2-rgba8unorm': true,\n    'etc2-rgba8unorm-srgb': true,\n    'eac-r11unorm': true,\n    'eac-r11snorm': true,\n    'eac-rg11unorm': true,\n    'eac-rg11snorm': true,\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'astc-4x4-unorm': true,\n    'astc-4x4-unorm-srgb': true,\n    'astc-5x4-unorm': true,\n    'astc-5x4-unorm-srgb': true,\n    'astc-5x5-unorm': true,\n    'astc-5x5-unorm-srgb': true,\n    'astc-6x5-unorm': true,\n    'astc-6x5-unorm-srgb': true,\n    'astc-6x6-unorm': true,\n    'astc-6x6-unorm-srgb': true,\n    'astc-8x5-unorm': true,\n    'astc-8x5-unorm-srgb': true,\n    'astc-8x6-unorm': true,\n    'astc-8x6-unorm-srgb': true,\n    'astc-8x8-unorm': true,\n    'astc-8x8-unorm-srgb': true,\n    'astc-10x5-unorm': true,\n    'astc-10x5-unorm-srgb': true,\n    'astc-10x6-unorm': true,\n    'astc-10x6-unorm-srgb': true,\n    'astc-10x8-unorm': true,\n    'astc-10x8-unorm-srgb': true,\n    'astc-10x10-unorm': true,\n    'astc-10x10-unorm-srgb': true,\n    'astc-12x10-unorm': true,\n    'astc-12x10-unorm-srgb': true,\n    'astc-12x12-unorm': true,\n    'astc-12x12-unorm-srgb': true,\n};\n\nexport const glUploadCompressedTextureResource = {\n\n    id: 'compressed',\n\n    upload(source: CompressedSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const compressed = !!compressedFormatMap[source.format];\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            if (compressed)\n            {\n                gl.compressedTexImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    levelBuffer\n                );\n            }\n            else\n            {\n                gl.texImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    glTexture.format, glTexture.type,\n                    levelBuffer);\n            }\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GLTextureUploader;\n\n","import type { CanvasSource } from '../../../shared/texture/sources/CanvasSource';\nimport type { ImageSource } from '../../../shared/texture/sources/ImageSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadImageResource = {\n\n    id: 'image',\n\n    upload(source: ImageSource | CanvasSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n\n        const glWidth = glTexture.width;\n        const glHeight = glTexture.height;\n\n        const textureWidth = source.pixelWidth;\n        const textureHeight = source.pixelHeight;\n\n        const resourceWidth = source.resourceWidth;\n        const resourceHeight = source.resourceHeight;\n\n        if (resourceWidth < textureWidth || resourceHeight < textureHeight)\n        {\n            if (glWidth !== textureWidth || glHeight !== textureHeight)\n            {\n                gl.texImage2D(\n                    glTexture.target,\n                    0,\n                    glTexture.internalFormat,\n                    textureWidth,\n                    textureHeight,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    null\n                );\n            }\n\n            if (webGLVersion === 2)\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    resourceWidth,\n                    resourceHeight,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n            else\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n        }\n        else if (glWidth === textureWidth || glHeight === textureHeight)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else if (webGLVersion === 2)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                textureWidth,\n                textureHeight,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n\n        glTexture.width = textureWidth;\n        glTexture.height = textureHeight;\n    }\n} as GLTextureUploader;\n\n","import { glUploadImageResource } from './glUploadImageResource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadVideoResource = {\n\n    id: 'video',\n\n    upload(source: VideoSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        if (!source.isValid)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                1,\n                1,\n                0,\n                glTexture.format,\n                glTexture.type,\n                null\n            );\n\n            return;\n        }\n\n        glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n    }\n} as GLTextureUploader;\n\n","export const scaleModeToGlFilter = {\n    linear: 9729,\n    nearest: 9728,\n};\n\nexport const mipmapScaleModeToGlFilter = {\n    linear: {\n        linear: 9987,\n        nearest: 9985,\n    },\n    nearest: {\n        linear: 9986,\n        nearest: 9984,\n    }\n};\n\nexport const wrapModeToGlAddress = {\n    'clamp-to-edge': 33071,\n    repeat: 10497,\n    'mirror-repeat': 33648,\n};\n\nexport const compareModeToGlCompare = {\n    never: 512,\n    less: 513,\n    equal: 514,\n    'less-equal': 515,\n    greater: 516,\n    'not-equal': 517,\n    'greater-equal': 518,\n    always: 519,\n};\n\n","import {\n    compareModeToGlCompare,\n    mipmapScaleModeToGlFilter,\n    scaleModeToGlFilter,\n    wrapModeToGlAddress\n} from './pixiToGlMaps';\n\nimport type { TextureStyle } from '../../../shared/texture/TextureStyle';\n\nexport function applyStyleParams(\n    style: TextureStyle,\n    gl: WebGL2RenderingContext,\n    mipmaps: boolean,\n    // eslint-disable-next-line camelcase\n    anisotropicExt: EXT_texture_filter_anisotropic,\n    glFunctionName: 'samplerParameteri' | 'texParameteri',\n    firstParam: 3553 | WebGLSampler,\n    forceClamp: boolean\n)\n{\n    const castParam = firstParam as 3553;\n\n    // 1. set the wrapping mode\n    const wrapModeS = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeU];\n    const wrapModeT = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeV];\n    const wrapModeR = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeW];\n\n    gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n    gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n\n    // does not exist in webGL1\n    if (gl.TEXTURE_WRAP_R) gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n\n    // 2. set the filtering mode\n    gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n\n    // assuming the currently bound texture is the one we want to set the filter for\n    // the only smelly part of this code, WebGPU is much better here :P\n    if (mipmaps)\n    {\n        const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n\n        gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n    }\n\n    else\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n    }\n\n    // 3. set the anisotropy\n    if (anisotropicExt && style.maxAnisotropy > 1)\n    {\n        const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n        gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n    }\n\n    // 4. set the compare mode\n    if (style.compare)\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Texture } from '../../shared/texture/Texture';\nimport { GlTexture } from './GlTexture';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource';\nimport { glUploadCompressedTextureResource } from './uploaders/glUploadCompressedTextureResource';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource';\nimport { glUploadVideoResource } from './uploaders/glUploadVideoResource';\nimport { applyStyleParams } from './utils/applyStyleParams';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType';\nimport { unpremultiplyAlpha } from './utils/unpremultiplyAlpha';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GLTextureUploader } from './uploaders/GLTextureUploader';\n\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The system for managing textures in WebGL.\n * @memberof rendering\n */\nexport class GlTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    private readonly _renderer: WebGLRenderer;\n\n    private _glTextures: Record<number, GlTexture> = Object.create(null);\n    private _glSamplers: Record<string, WebGLSampler> = Object.create(null);\n\n    private _boundTextures: TextureSource[] = [];\n    private _activeTextureLocation = -1;\n\n    private _boundSamplers: Record<number, WebGLSampler> = Object.create(null);\n\n    private readonly _uploads: Record<string, GLTextureUploader> = {\n        image: glUploadImageResource,\n        buffer: glUploadBufferImageResource,\n        video: glUploadVideoResource,\n        compressed: glUploadCompressedTextureResource,\n    };\n\n    private _gl: GlRenderingContext;\n    private _mapFormatToInternalFormat: Record<string, number>;\n    private _mapFormatToType: Record<string, number>;\n    private _mapFormatToFormat: Record<string, number>;\n\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    private readonly _useSeparateSamplers = false;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        if (!this._mapFormatToInternalFormat)\n        {\n            this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n\n            this._mapFormatToType = mapFormatToGlType(gl);\n            this._mapFormatToFormat = mapFormatToGlFormat(gl);\n        }\n\n        this._glTextures = Object.create(null);\n        this._glSamplers = Object.create(null);\n        this._boundSamplers = Object.create(null);\n\n        for (let i = 0; i < 16; i++)\n        {\n            this.bind(Texture.EMPTY, i);\n        }\n    }\n\n    public initSource(source: TextureSource)\n    {\n        this.bind(source);\n    }\n\n    public bind(texture: BindableTexture, location = 0)\n    {\n        const source = texture.source;\n\n        if (texture)\n        {\n            this.bindSource(source, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(source.style, location);\n            }\n        }\n        else\n        {\n            this.bindSource(null, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(null, location);\n            }\n        }\n    }\n\n    public bindSource(source: TextureSource, location = 0): void\n    {\n        const gl = this._gl;\n\n        source._touched = this._renderer.textureGC.count;\n\n        if (this._boundTextures[location] !== source)\n        {\n            this._boundTextures[location] = source;\n            this._activateLocation(location);\n\n            source = source || Texture.EMPTY.source;\n\n            // bind texture and source!\n            const glTexture = this.getGlSource(source);\n\n            gl.bindTexture(glTexture.target, glTexture.texture);\n        }\n    }\n\n    private _bindSampler(style: TextureStyle, location = 0): void\n    {\n        const gl = this._gl;\n\n        if (!style)\n        {\n            this._boundSamplers[location] = null;\n            gl.bindSampler(location, null);\n\n            return;\n        }\n\n        const sampler = this._getGlSampler(style);\n\n        if (this._boundSamplers[location] !== sampler)\n        {\n            this._boundSamplers[location] = sampler;\n            gl.bindSampler(location, sampler);\n        }\n    }\n\n    public unbind(texture: BindableTexture): void\n    {\n        const source = texture.source;\n        const boundTextures = this._boundTextures;\n        const gl = this._gl;\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === source)\n            {\n                this._activateLocation(i);\n\n                const glTexture = this.getGlSource(source);\n\n                gl.bindTexture(glTexture.target, null);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    private _activateLocation(location: number): void\n    {\n        if (this._activeTextureLocation !== location)\n        {\n            this._activeTextureLocation = location;\n            this._gl.activeTexture(this._gl.TEXTURE0 + location);\n        }\n    }\n\n    private _initSource(source: TextureSource): GlTexture\n    {\n        const gl = this._gl;\n\n        const glTexture = new GlTexture(gl.createTexture());\n\n        glTexture.type = this._mapFormatToType[source.format];\n        glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n        glTexture.format = this._mapFormatToFormat[source.format];\n\n        if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo))\n        {\n            const biggestDimension = Math.max(source.width, source.height);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        this._glTextures[source.uid] = glTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceUpdate, this);\n            source.on('styleChange', this.onStyleChange, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n        this.onStyleChange(source);\n\n        return glTexture;\n    }\n\n    protected onStyleChange(source: TextureSource): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        applyStyleParams(\n            source.style,\n            gl,\n            source.mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'texParameteri',\n            gl.TEXTURE_2D,\n            // will force a clamp to edge if the texture is not a power of two\n            !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo\n        );\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const glTexture = this._glTextures[source.uid];\n\n        if (!glTexture) return;\n\n        this.unbind(source);\n        this._glTextures[source.uid] = null;\n\n        this._gl.deleteTexture(glTexture.texture);\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source, false);\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource, bind = true): void\n    {\n        if (bind) this.bindSource(source, 0);\n\n        const glTexture = this.getGlSource(source);\n\n        this._gl.generateMipmap(glTexture.target);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('update', this.onSourceUpdate, this);\n        source.off('resize', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('styleChange', this.onStyleChange, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    private _initSampler(style: TextureStyle): WebGLSampler\n    {\n        const gl = this._gl;\n\n        const glSampler = this._gl.createSampler();\n\n        this._glSamplers[style._resourceId] = glSampler;\n\n        applyStyleParams(\n            style,\n            gl,\n            this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'samplerParameteri',\n            glSampler,\n            false\n        );\n\n        return this._glSamplers[style._resourceId];\n    }\n\n    private _getGlSampler(sampler: TextureStyle): WebGLSampler\n    {\n        return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGlSource(source: TextureSource): GlTexture\n    {\n        return this._glTextures[source.uid] || this._initSource(source);\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const { pixels, width, height } = this.getPixels(texture);\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n\n        if (ctx)\n        {\n            const imageData = ctx.createImageData(width, height);\n\n            imageData.data.set(pixels);\n            ctx.putImageData(imageData, 0, 0);\n        }\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const resolution = texture.source.resolution;\n        const frame = texture.frame;\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        const renderer = this._renderer;\n\n        const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n        const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n\n        const gl = renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        // if (texture.source.premultiplyAlpha > 0)\n        // TODO - premultiplied alpha does not exist right now, need to add that back in!\n        // eslint-disable-next-line no-constant-condition\n        if (false)\n        {\n            unpremultiplyAlpha(pixels);\n        }\n\n        return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the array with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        (this._renderer as null) = null;\n    }\n}\n\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { WebGLExtensions } from '../../context/WebGLExtensions';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param gl - The rendering context.\n * @param extensions - The WebGL extensions.\n * @returns Lookup table.\n */\nexport function mapFormatToGlInternalFormat(\n    gl: GlRenderingContext,\n    extensions: WebGLExtensions,\n): Record<string, number>\n{\n    let srgb = {};\n    let bgra8unorm: number = gl.RGBA;\n\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        srgb = {\n            'rgba8unorm-srgb': gl.SRGB8_ALPHA8,\n            'bgra8unorm-srgb': gl.SRGB8_ALPHA8,\n        };\n\n        bgra8unorm = gl.RGBA8;\n    }\n    else if (extensions.srgb)\n    {\n        srgb = {\n            'rgba8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n            'bgra8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n        };\n    }\n\n    return {\n        // 8-bit formats\n        r8unorm: gl.R8,\n        r8snorm: gl.R8_SNORM,\n        r8uint: gl.R8UI,\n        r8sint: gl.R8I,\n\n        // 16-bit formats\n        r16uint: gl.R16UI,\n        r16sint: gl.R16I,\n        r16float: gl.R16F,\n        rg8unorm: gl.RG8,\n        rg8snorm: gl.RG8_SNORM,\n        rg8uint: gl.RG8UI,\n        rg8sint: gl.RG8I,\n\n        // 32-bit formats\n        r32uint: gl.R32UI,\n        r32sint: gl.R32I,\n        r32float: gl.R32F,\n        rg16uint: gl.RG16UI,\n        rg16sint: gl.RG16I,\n        rg16float: gl.RG16F,\n        rgba8unorm: gl.RGBA,\n\n        ...srgb,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA8_SNORM,\n        rgba8uint: gl.RGBA8UI,\n        rgba8sint: gl.RGBA8I,\n        bgra8unorm,\n        rgb9e5ufloat: gl.RGB9_E5,\n        rgb10a2unorm: gl.RGB10_A2,\n        rg11b10ufloat: gl.R11F_G11F_B10F,\n\n        // 64-bit formats\n        rg32uint: gl.RG32UI,\n        rg32sint: gl.RG32I,\n        rg32float: gl.RG32F,\n        rgba16uint: gl.RGBA16UI,\n        rgba16sint: gl.RGBA16I,\n        rgba16float: gl.RGBA16F,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA32UI,\n        rgba32sint: gl.RGBA32I,\n        rgba32float: gl.RGBA32F,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT16,\n        depth24plus: gl.DEPTH_COMPONENT24,\n        'depth24plus-stencil8': gl.DEPTH24_STENCIL8,\n        depth32float: gl.DEPTH_COMPONENT32F,\n        'depth32float-stencil8': gl.DEPTH32F_STENCIL8,\n\n        // Compressed formats\n        ...extensions.s3tc ? {\n            'bc1-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.s3tc_sRGB ? {\n            'bc1-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.rgtc ? {\n            'bc4-r-unorm': extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n            'bc4-r-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n            'bc5-rg-unorm': extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n            'bc5-rg-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\n        } : {},\n        ...extensions.bptc ? {\n            'bc6h-rgb-float': extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n            'bc6h-rgb-ufloat': extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n            'bc7-rgba-unorm': extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n            'bc7-rgba-unorm-srgb': extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\n        } : {},\n        ...extensions.etc ? {\n            'etc2-rgb8unorm': extensions.etc.COMPRESSED_RGB8_ETC2,\n            'etc2-rgb8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ETC2,\n            'etc2-rgb8a1unorm': extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgb8a1unorm-srgb': extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgba8unorm': extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n            'etc2-rgba8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n            'eac-r11unorm': extensions.etc.COMPRESSED_R11_EAC,\n            // 'eac-r11snorm'\n            'eac-rg11unorm': extensions.etc.COMPRESSED_SIGNED_RG11_EAC,\n            // 'eac-rg11snorm'\n        } : {},\n        ...extensions.astc ? {\n            'astc-4x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n            'astc-4x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n            'astc-5x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n            'astc-5x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n            'astc-5x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n            'astc-5x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n            'astc-6x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n            'astc-6x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n            'astc-6x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n            'astc-6x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n            'astc-8x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n            'astc-8x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n            'astc-8x6-unorm':   extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n            'astc-8x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n            'astc-8x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n            'astc-8x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n            'astc-10x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n            'astc-10x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n            'astc-10x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n            'astc-10x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n            'astc-10x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n            'astc-10x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n            'astc-10x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n            'astc-10x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n            'astc-12x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n            'astc-12x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n            'astc-12x12-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n            'astc-12x12-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\n        } : {},\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlType(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.UNSIGNED_BYTE,\n        r8snorm: gl.BYTE,\n        r8uint: gl.UNSIGNED_BYTE,\n        r8sint: gl.BYTE,\n\n        // 16-bit formats\n        r16uint: gl.UNSIGNED_SHORT,\n        r16sint: gl.SHORT,\n        r16float: gl.HALF_FLOAT,\n        rg8unorm: gl.UNSIGNED_BYTE,\n        rg8snorm: gl.BYTE,\n        rg8uint: gl.UNSIGNED_BYTE,\n        rg8sint: gl.BYTE,\n\n        // 32-bit formats\n        r32uint: gl.UNSIGNED_INT,\n        r32sint: gl.INT,\n        r32float: gl.FLOAT,\n        rg16uint: gl.UNSIGNED_SHORT,\n        rg16sint: gl.SHORT,\n        rg16float: gl.HALF_FLOAT,\n        rgba8unorm: gl.UNSIGNED_BYTE,\n        'rgba8unorm-srgb': gl.UNSIGNED_BYTE,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.BYTE,\n        rgba8uint: gl.UNSIGNED_BYTE,\n        rgba8sint: gl.BYTE,\n        bgra8unorm: gl.UNSIGNED_BYTE,\n        'bgra8unorm-srgb': gl.UNSIGNED_BYTE,\n        rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n        rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n        rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n\n        // 64-bit formats\n        rg32uint: gl.UNSIGNED_INT,\n        rg32sint: gl.INT,\n        rg32float: gl.FLOAT,\n        rgba16uint: gl.UNSIGNED_SHORT,\n        rgba16sint: gl.SHORT,\n        rgba16float: gl.HALF_FLOAT,\n\n        // 128-bit formats\n        rgba32uint: gl.UNSIGNED_INT,\n        rgba32sint: gl.INT,\n        rgba32float: gl.FLOAT,\n\n        // Depth/stencil formats\n        stencil8: gl.UNSIGNED_BYTE,\n        depth16unorm: gl.UNSIGNED_SHORT,\n        depth24plus: gl.UNSIGNED_INT,\n        'depth24plus-stencil8': gl.UNSIGNED_INT_24_8,\n        depth32float: gl.FLOAT,\n        'depth32float-stencil8': gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlFormat(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.RED,\n        r8snorm: gl.RED,\n        r8uint: gl.RED,\n        r8sint: gl.RED,\n\n        // 16-bit formats\n        r16uint: gl.RED,\n        r16sint:    gl.RED,\n        r16float: gl.RED,\n        rg8unorm:  gl.RG,\n        rg8snorm:   gl.RG,\n        rg8uint:  gl.RG,\n        rg8sint:  gl.RG,\n\n        // 32-bit formats\n        r32uint: gl.RED,\n        r32sint: gl.RED,\n        r32float: gl.RED,\n        rg16uint:   gl.RG,\n        rg16sint:  gl.RG,\n        rg16float:  gl.RG,\n        rgba8unorm: gl.RGBA,\n        'rgba8unorm-srgb': gl.RGBA,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA,\n        rgba8uint: gl.RGBA,\n        rgba8sint: gl.RGBA,\n        bgra8unorm: gl.RGBA,\n        'bgra8unorm-srgb': gl.RGBA,\n        rgb9e5ufloat: gl.RGB,\n        rgb10a2unorm: gl.RGBA,\n        rg11b10ufloat: gl.RGB,\n\n        // 64-bit formats\n        rg32uint: gl.RG,\n        rg32sint: gl.RG,\n        rg32float:  gl.RG,\n        rgba16uint: gl.RGBA,\n        rgba16sint: gl.RGBA,\n        rgba16float: gl.RGBA,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA,\n        rgba32sint: gl.RGBA,\n        rgba32float: gl.RGBA,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT,\n        depth24plus: gl.DEPTH_COMPONENT,\n        'depth24plus-stencil8': gl.DEPTH_STENCIL,\n        depth32float: gl.DEPTH_COMPONENT,\n        'depth32float-stencil8': gl.DEPTH_STENCIL,\n\n    };\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GlGraphicsAdaptor } from '../../../scene/graphics/gl/GlGraphicsAdaptor';\nimport { GlMeshAdaptor } from '../../../scene/mesh/gl/GlMeshAdaptor';\nimport { GlBatchAdaptor } from '../../batcher/gl/GlBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { GlBufferSystem } from './buffer/GlBufferSystem';\nimport { GlContextSystem } from './context/GlContextSystem';\nimport { GlGeometrySystem } from './geometry/GlGeometrySystem';\nimport { GlBackBufferSystem } from './GlBackBufferSystem';\nimport { GlColorMaskSystem } from './GlColorMaskSystem';\nimport { GlEncoderSystem } from './GlEncoderSystem';\nimport { GlStencilSystem } from './GlStencilSystem';\nimport { GlUboSystem } from './GlUboSystem';\nimport { GlRenderTargetSystem } from './renderTarget/GlRenderTargetSystem';\nimport { GlShaderSystem } from './shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from './shader/GlUniformGroupSystem';\nimport { GlStateSystem } from './state/GlStateSystem';\nimport { GlTextureSystem } from './texture/GlTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\nimport type { GlRenderingContext } from './context/GlRenderingContext';\n\nconst DefaultWebGLSystems = [\n    ...SharedSystems,\n    GlUboSystem,\n    GlBackBufferSystem,\n    GlContextSystem,\n    GlBufferSystem,\n    GlTextureSystem,\n    GlRenderTargetSystem,\n    GlGeometrySystem,\n    GlUniformGroupSystem,\n    GlShaderSystem,\n    GlEncoderSystem,\n    GlStateSystem,\n    GlStencilSystem,\n    GlColorMaskSystem,\n];\nconst DefaultWebGLPipes = [...SharedRenderPipes];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGLSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGLPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGLPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\ntype WebGLSystems = ExtractSystemTypes<typeof DefaultWebGLSystems> & PixiMixins.RendererSystems & PixiMixins.WebGLSystems;\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\nexport type WebGLPipes = ExtractSystemTypes<typeof DefaultWebGLPipes> & PixiMixins.RendererPipes & PixiMixins.WebGLPipes;\n\n/**\n * Options for WebGLRenderer.\n * @memberof rendering\n */\nexport interface WebGLOptions\n    extends ExtractRendererOptions<typeof DefaultWebGLSystems>,\n    PixiMixins.RendererOptions,\n    PixiMixins.WebGLOptions {}\n\n/**\n * The default WebGL renderer, uses WebGL2 contexts.\n * @memberof rendering\n */\nexport interface WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>,\n    WebGLSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGL PixiJS Renderer. This renderer allows you to use the most common graphics API, WebGL (and WebGL2).\n *\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGLRenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n *\n *\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer({\n *    preference:'webgl',\n * });\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGL renderer:\n *\n * | WebGL Core Systems                          | Systems that are specific to the WebGL renderer                               |\n * | ------------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GlUboSystem}               | This manages WebGL2 uniform buffer objects feature for shaders                |\n * | {@link rendering.GlBackBufferSystem}        | manages the back buffer, used so that we can pixi can pixels from the screen  |\n * | {@link rendering.GlContextSystem}           | This manages the WebGL context and its extensions                             |\n * | {@link rendering.GlBufferSystem}            | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GlTextureSystem}           | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GlRenderTargetSystem}      | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GlGeometrySystem}          | This manages geometry, used for drawing meshes via the GPU                    |\n * | {@link rendering.GlUniformGroupSystem}      | This manages uniform groups. Syncing shader properties with the GPU           |\n * | {@link rendering.GlShaderSystem}            | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GlEncoderSystem}           | This manages encoders, a WebGPU Paradigm, use it to draw a mesh + shader      |\n * | {@link rendering.GlStateSystem}             | This manages the state of the WebGL context. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.GlStencilSystem}           | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.GlColorMaskSystem}         | This manages the color mask. Used for color masking                           |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GlUboSystem} ubo - UboSystem instance.\n * @property {rendering.GlBackBufferSystem} backBuffer - BackBufferSystem instance.\n * @property {rendering.GlContextSystem} context - ContextSystem instance.\n * @property {rendering.GlBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GlTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GlRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GlGeometrySystem} geometry - GeometrySystem instance.\n * @property {rendering.GlUniformGroupSystem} uniformGroup - UniformGroupSystem instance.\n * @property {rendering.GlShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GlEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GlStateSystem} state - StateSystem instance.\n * @property {rendering.GlStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.GlColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @extends rendering.AbstractRenderer\n */\n/* eslint-enable max-len */\nexport class WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>\n    implements WebGLSystems\n{\n    public gl: GlRenderingContext;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgl',\n            type: RendererType.WEBGL,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n","import { MAX_TEXTURES } from '../../../batcher/shared/const';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst sampleValues = new Int32Array(MAX_TEXTURES);\n\nfor (let i = 0; i < MAX_TEXTURES; i++)\n{\n    sampleValues[i] = i;\n}\n\nexport const batchSamplersUniformGroup = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: MAX_TEXTURES }\n}, { isStatic: true });\n"],"names":["GlGraphicsAdaptor","init","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uRound","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","MAX_TEXTURES","localUniformBitGl","roundPixelsBitGl","shader","Shader","resources","localUniforms","batchSamplers","batchSamplersUniformGroup","execute","graphicsPipe","renderable","context","customShader","this","renderer","contextSystem","graphicsContext","geometry","instructions","getContextRenderData","groups","globalUniforms","bindGroup","bind","batches","i","instructionSize","batch","size","j","textures","length","texture","draw","start","destroy","extension","ExtensionType","WebGLPipesAdaptor","GlMeshAdaptor","textureBitGl","_shader","uTexture","Texture","EMPTY","source","meshPipe","mesh","warn","uSampler","style","localUniformsBindGroup","encoder","_geometry","state","GlBatchAdaptor","constructor","_didUpload","_tempState","State","for2d","batcherPipe","runners","contextChange","add","batchPipe","updateUniformGroup","uniformGroup","blendMode","set","BUFFER_TYPE","BUFFER_TYPE2","GlBuffer","buffer","updateID","byteLength","GlBufferSystem","_gpuBuffers","Object","create","_boundBufferBases","_renderer","_gl","gl","getGlBuffer","uid","createGLBuffer","glBuffer","bindBuffer","bindBufferBase","index","UNIFORM_BUFFER","bindBufferRange","offset","updateBuffer","_updateID","data","bufferSubData","_updateSize","BYTES_PER_ELEMENT","drawType","descriptor","usage","BufferUsage","STATIC","STATIC_DRAW","DYNAMIC_DRAW","bufferData","destroyAll","id","deleteBuffer","onBufferDestroy","contextLost","ARRAY_BUFFER","INDEX","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","on","WebGLSystem","_GlContextSystem","supports","uint32Indices","uniformBufferObject","vertexArrayObject","srgbTextures","nonPowOf2wrapping","msaa","nonPowOf2mipmaps","extensions","handleContextLost","handleContextRestored","isLost","isContextLost","options","defaultOptions","initFromContext","_options$premultiplie","_options$powerPrefere","alpha","background","premultipliedAlpha","antialias","backBuffer","useBackBuffer","createContext","preferWebGLVersion","stencil","preserveDrawingBuffer","powerPreference","webGLVersion","WebGL2RenderingContext","getExtensions","validateContext","emit","element","view","canvas","addEventListener","getContext","Error","common","anisotropicFiltering","getExtension","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","rgtc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","vertexAttribDivisorANGLE","srgb","colorBufferFloat","event","preventDefault","_contextLossForced","setTimeout","_this$extensions$lose","restoreContext","_this$extensions$lose2","removeEventListener","useProgram","forceContextLoss","_this$extensions$lose3","attributes","getContextAttributes","isWebGl2","GlContextSystem","GL_FORMATS","GL_FORMATS2","GL_TARGETS","GL_TARGETS2","GL_TYPES","GL_TYPES2","infoMap","uint8x2","UNSIGNED_BYTE","uint8x4","sint8x2","BYTE","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","UNSIGNED_SHORT","uint16x4","sint16x2","SHORT","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","HALF_FLOAT","float16x4","float32","FLOAT","float32x2","float32x3","float32x4","uint32","UNSIGNED_INT","uint32x2","uint32x3","uint32x4","sint32","INT","sint32x2","sint32x3","sint32x4","getGlTypeFromFormat","format","_infoMap$format","topologyToGlMap","GlGeometrySystem","_geometryVaoHash","_activeGeometry","_activeVao","hasVao","hasInstance","nativeVaoExtension","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","drawArraysInstanced","a","b","c","d","drawArraysInstancedANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","vertexAttribDivisor","program","getVao","updateBuffers","reset","unbind","bufferSystem","buffers","checkCompatibility","geometryAttributes","shaderAttributes","_attributeData","concat","getSignature","attribs","strings","push","location","join","_this$_geometryVaoHas","_key","initGeometryVao","_getProgramData","signature","onGeometryDestroy","vaoObjectHash","ensureAttributes","activateVao","arguments","undefined","indexBuffer","lastBuffer","attribute","enableVertexAttribArray","attributeInfo","getAttributeInfoFromFormat","vertexAttribPointer","normalised","stride","instance","topology","instanceCount","glTopology","byteSize","glType","drawElements","getSize","drawArrays","bigTriangleGeometry","Geometry","aPosition","_GlBackBufferSystem","_useBackBufferThisRender","_antialias","_state","bigTriangleProgram","GlProgram","vertex","fragment","_bigTriangleShader","WHITE","renderStart","renderTarget","getRenderTarget","target","isRoot","renderTarget2","_targetTexture","colorTexture","_getBackBufferTexture","renderEnd","_presentBackBuffer","finishRenderPass","_backBufferTexture","targetSourceTexture","TextureSource","width","height","resolution","_resolution","resize","priority","GlBackBufferSystem","GlColorMaskSystem","_colorMaskCache","setMask","colorMask","GlEncoderSystem","commandFinished","Promise","resolve","setGeometry","skipSync","_activeProgram","GlStencilSystem","_stencilCache","enabled","stencilReference","stencilMode","STENCIL_MODES","NONE","_renderTargetStencilState","onRenderTargetChange","_comparisonFuncMapping","always","ALWAYS","never","NEVER","equal","EQUAL","NOTEQUAL","less","LESS","LEQUAL","greater","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","replace","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","DISABLED","setStencilMode","mode","GpuStencilModesToPixi","enable","STENCIL_TEST","stencilFunc","stencilBack","compare","stencilOp","passOp","disable","WGSL_TO_STD40_SIZE","f32","createUboElementsSTD40","uniformData","uboElements","map","chunkSize","uboElement","Math","max","lineUpValue","ceil","generateArraySyncSTD40","offsetToAdd","rowSize","elementSize","remainder","createUboSyncFunctionSTD40","createUboSyncFunction","uboSyncFunctionsSTD40","GlUboSystem","UboSystem","createUboElements","generateUboSync","GlRenderTarget","msaaRenderBuffer","GlRenderTargetAdaptor","_clearColorCache","_viewPortCache","Rectangle","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","glRenderTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","copyTexSubImage2D","TEXTURE_2D","x","y","startRenderPass","clear","clearColor","viewport","gpuRenderTarget","viewPortY","pixelHeight","colorTextures","forEach","framebuffer","viewPortCache","depthStencilRenderBuffer","depth","_initStencil","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","CanvasSource","test","resource","_initColor","_renderTarget","CLEAR","ALL","COLOR","_clearColor","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","pixelWidth","bindSource","glTexture","getGlSource","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","source2","glInternalFormat","internalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","GlRenderTargetSystem","RenderTargetSystem","super","adaptor","GlProgramData","uniformGroups","uniformDirtyGroups","uniformBlockBindings","compileShader","src","createShader","shaderSource","booleanArray","array","Array","defaultValue","Int32Array","Uint32Array","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","GLSL_TO_VERTEX_TYPES","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bool","bvec2","bvec3","bvec4","mapType","typeNames","keys","tn","mapGlToVertexFormat","typeValue","logPrettyShaderError","shaderSrc","getShaderSource","split","line","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","filter","n","logArgs","number","fragmentSourceToLog","console","error","groupCollapsed","groupEnd","generateProgram","glVertShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","vertexShader","fragmentShader","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","logProgramError","sortAttributes","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","startsWith","sort","bindAttribLocation","getAttribLocation","extractAttributesFromGlProgram","_uniformData","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","isArray","match","getUniformData","_uniformBlockData","ACTIVE_UNIFORM_BLOCKS","uniformBlocks","totalUniformsBlocks","getActiveUniformBlockName","uniformBlockIndex","getUniformBlockIndex","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","getUboData","deleteShader","getUniformLocation","defaultSyncData","textureCount","blockIndex","GlShaderSystem","_programDataHash","_nextIndex","_boundUniformsIdsToIndexHash","_boundIndexToUniformsHash","_shaderSyncFunctions","_maxBindings","MAX_UNIFORM_BUFFER_BINDINGS","getParameter","_setProgram","syncFunction","_generateShaderSync","bindUniformBlock","programData","isBufferResource","_bufferResource","ubo","boundIndex","nextIndex","currentBoundUniformGroup","uniformBlockBinding","_createProgramData","key","shaderSystem","funcFragments","headerFragments","addedTextreSystem","group","BufferResource","uniformName","_uniformBindMap","uniform1i","functionSource","Function","generateShaderSyncCode","UNIFORM_TO_SINGLE_SETTERS","i32","u32","UNIFORM_TO_ARRAY_SETTERS","GlUniformGroupSystem","_cache","_uniformGroupSyncHash","syncData","isStatic","_dirtyId","_getUniformSyncFunction","syncFunc","_this$_uniformGroupSy","_signature","_createUniformSyncFunction","uniformGroupSyncHash","_getSignature","_generateUniformsSync","uniform","uniformStructures","parsed","uniformParsers","parser","template","generateUniformsSync","preFix","_GlStateSystem","stateId","polygonOffset","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","blendModesMap","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","mapWebGLBlendModesToPixi","diff","call","forceState","_updateCheck","_checkBlendMode","BLEND","_checkPolygonOffset","POLYGON_OFFSET_FILL","DEPTH_TEST","depthMask","CULL_FACE","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","indexOf","splice","system","GlStateSystem","GlTexture","RGBA","samplerType","glUploadBufferImageResource","upload","texSubImage2D","texImage2D","compressedFormatMap","glUploadCompressedTextureResource","UNPACK_ALIGNMENT","mipWidth","mipHeight","compressed","levelBuffer","compressedTexImage2D","glUploadImageResource","alphaMode","UNPACK_PREMULTIPLY_ALPHA_WEBGL","glWidth","glHeight","textureWidth","textureHeight","resourceWidth","resourceHeight","glUploadVideoResource","isValid","scaleModeToGlFilter","linear","nearest","mipmapScaleModeToGlFilter","wrapModeToGlAddress","repeat","compareModeToGlCompare","applyStyleParams","mipmaps","anisotropicExt","glFunctionName","firstParam","forceClamp","castParam","wrapModeS","addressModeU","wrapModeT","addressModeV","wrapModeR","addressModeW","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MAG_FILTER","magFilter","glFilterMode","minFilter","mipmapFilter","TEXTURE_MIN_FILTER","maxAnisotropy","level","min","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_COMPARE_FUNC","GlTextureSystem","managedTextures","_glTextures","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","video","_useSeparateSamplers","_mapFormatToInternalFormat","bgra8unorm","SRGB8_ALPHA8","RGBA8","SRGB8_ALPHA8_EXT","r8unorm","R8","r8snorm","R8_SNORM","r8uint","R8UI","r8sint","R8I","r16uint","R16UI","r16sint","R16I","r16float","R16F","rg8unorm","RG8","rg8snorm","RG8_SNORM","rg8uint","RG8UI","rg8sint","RG8I","r32uint","R32UI","r32sint","R32I","r32float","R32F","rg16uint","RG16UI","rg16sint","RG16I","rg16float","RG16F","rgba8unorm","rgba8snorm","RGBA8_SNORM","rgba8uint","RGBA8UI","rgba8sint","RGBA8I","rgb9e5ufloat","RGB9_E5","rgb10a2unorm","RGB10_A2","rg11b10ufloat","R11F_G11F_B10F","rg32uint","RG32UI","rg32sint","RG32I","rg32float","RG32F","rgba16uint","RGBA16UI","rgba16sint","RGBA16I","rgba16float","RGBA16F","rgba32uint","RGBA32UI","rgba32sint","RGBA32I","rgba32float","RGBA32F","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT16","depth24plus","DEPTH_COMPONENT24","depth32float","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","mapFormatToGlInternalFormat","_mapFormatToType","UNSIGNED_INT_5_9_9_9_REV","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","mapFormatToGlType","_mapFormatToFormat","RED","RG","RGB","DEPTH_COMPONENT","mapFormatToGlFormat","initSource","_bindSampler","_touched","textureGC","count","_activateLocation","bindTexture","bindSampler","sampler","_getGlSampler","boundTextures","activeTexture","TEXTURE0","_initSource","createTexture","autoGenerateMipmaps","isPowerOfTwo","biggestDimension","mipLevelCount","floor","log2","includes","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","deleteTexture","uploadMethodId","generateMipmap","off","_initSampler","glSampler","createSampler","_resourceId","generateCanvas","pixels","getPixels","DOMAdapter","get","createCanvas","ctx","imageData","createImageData","putImageData","frame","round","Uint8Array","glRenterTarget","readPixels","Uint8ClampedArray","slice","DefaultWebGLSystems","SharedSystems","DefaultWebGLPipes","SharedRenderPipes","DefaultWebGLAdapters","systems","renderPipes","renderPipeAdaptors","handleByNamedList","WebGLPipes","WebGLRenderer","AbstractRenderer","RendererType","WEBGL","sampleValues","uTextures"],"sourceRoot":""}