{"version":3,"file":"static/js/763.7ff7e6a4.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/textureBit.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/ensureAttributes.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/shared/buffer/BufferResource.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTarget.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/UboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uniformParsers.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/scene/container/CustomRenderPipe.ts","../node_modules/pixi.js/src/scene/container/utils/executeInstructions.ts","../node_modules/pixi.js/src/scene/container/RenderGroupPipe.ts","../node_modules/pixi.js/src/scene/container/utils/buildInstructions.ts","../node_modules/pixi.js/src/scene/container/utils/clearList.ts","../node_modules/pixi.js/src/scene/container/utils/collectRenderGroups.ts","../node_modules/pixi.js/src/scene/container/utils/mixColors.ts","../node_modules/pixi.js/src/scene/container/utils/mixHexColors.ts","../node_modules/pixi.js/src/scene/container/utils/updateRenderGroupTransforms.ts","../node_modules/pixi.js/src/scene/container/utils/validateRenderables.ts","../node_modules/pixi.js/src/scene/container/RenderGroupSystem.ts","../node_modules/pixi.js/src/scene/sprite/SpritePipe.ts","../node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts","../node_modules/pixi.js/src/filters/Filter.ts","../node_modules/pixi.js/src/filters/mask/MaskFilter.ts","../node_modules/pixi.js/src/rendering/mask/alpha/AlphaMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/color/ColorMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/stencil/StencilMaskPipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/background/BackgroundSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/blendModes/BlendModePipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/ExtractSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/SchedulerSystem.ts","../node_modules/pixi.js/src/utils/sayHello.ts","../node_modules/pixi.js/src/rendering/renderers/shared/startup/HelloSystem.ts","../node_modules/pixi.js/src/utils/data/clean.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderableGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/view/ViewSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/system/SharedSystems.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/TexturePool.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts"],"sourcesContent":["export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n    stencilBack: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n};\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        this.destroyed = true;\n\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.emit('change', this);\n\n        this.buffer = null;\n    }\n}\n","// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    /** unique id for this render target */\n    public readonly uid: number = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    private readonly _managedColorTextures: boolean = false;\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            this._managedColorTextures = true;\n\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this._managedColorTextures)\n        {\n            this.colorTextures.forEach((texture) =>\n            {\n                texture.destroy();\n            });\n        }\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /** called after the render pass is finished */\n    postrender?(renderTarget: RenderTarget,): void;\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        renderer.renderableGC.addManagedHash(this, '_gpuRenderTargetHash');\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    }\n\n    public postrender()\n    {\n        this.adaptor.postrender?.(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas).source;\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        data ||= (uniformGroup.buffer.data as Float32Array);\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","/* eslint-disable quote-props */\nimport { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\nexport interface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","/* eslint-disable max-len */\nimport type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>, RenderPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public updateRenderable() { /** empty */ }\n    public destroyRenderable() { /** empty */ }\n    public validateRenderable() { return false; }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(renderGroup);\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.worldTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n\n        // now render a quad..\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Renderer, RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\n/**\n * @param renderGroup\n * @param renderPipes\n * @deprecated since 8.3.0\n */\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes): void;\nexport function buildInstructions(renderGroup: RenderGroup, renderer: Renderer): void;\nexport function buildInstructions(renderGroup: RenderGroup, rendererOrPipes: RenderPipes | Renderer): void\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n    const renderer = (rendererOrPipes as Renderer).renderPipes\n        ? (rendererOrPipes as Renderer)\n        : (rendererOrPipes as RenderPipes).batch.renderer;\n    const renderPipes = renderer.renderPipes;\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n}\n\n/**\n * @param container\n * @param instructionSet\n * @param renderer\n * @deprecated since 8.3.0\n */\nexport function collectAllRenderables(container: Container, instructionSet: InstructionSet, renderer: RenderPipes): void;\nexport function collectAllRenderables(container: Container, instructionSet: InstructionSet, renderer: Renderer): void;\nexport function collectAllRenderables(\n    container: Container, instructionSet: InstructionSet, rendererOrPipes: Renderer | RenderPipes\n): void\n{\n    // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n    const renderer = (rendererOrPipes as Renderer).renderPipes\n        ? (rendererOrPipes as Renderer)\n        : (rendererOrPipes as RenderPipes).batch.renderer;\n\n    // if there is 0b01 or 0b10 the return value\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, renderer);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderer: Renderer,\n): void\n{\n    if (container.renderPipeId)\n    {\n        const renderable = container as Renderable;\n        const { renderPipes, renderableGC } = renderer;\n\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(renderable, container.groupBlendMode, instructionSet);\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[renderable.renderPipeId].addRenderable(renderable, instructionSet);\n\n        renderableGC.addRenderable(renderable, instructionSet);\n\n        renderable.didViewUpdate = false;\n    }\n\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderer);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderer: Renderer,\n    isRoot: boolean\n): void\n{\n    const { renderPipes, renderableGC } = renderer;\n\n    if (!isRoot && container.renderGroup)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderable = container as Renderable;\n        const renderPipeId = renderable.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(renderable, renderable.groupBlendMode, instructionSet);\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(renderable, instructionSet);\n\n            renderableGC.addRenderable(renderable, instructionSet);\n\n            renderable.didViewUpdate = false;\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderer);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n","/**\n * nulls all slots in an array from a certain index.\n * assume that when a null item is hit, the rest are also null.\n * Which will be the case for where this is used!\n * @param list - the array to clean\n * @param index - the index to start from\n */\nexport function clearList(list: Array<unknown>, index?: number)\n{\n    index ||= 0;\n\n    for (let j = index; j < list.length; j++)\n    {\n        if (list[j])\n        {\n            list[j] = null;\n        }\n        else\n        {\n            break;\n        }\n    }\n}\n","import type { RenderGroup } from '../RenderGroup';\n\nexport function collectRenderGroups(renderGroup: RenderGroup, out: RenderGroup[] = [])\n{\n    out.push(renderGroup);\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n    }\n\n    return out;\n}\n","import { mixHexColors } from './mixHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\nexport function mixColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n\n    return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\n\nexport function mixStandardAnd32BitColors(localColorRGB: number, localAlpha: number, parentColor: number)\n{\n    const parentAlpha = ((parentColor >> 24) & 0xFF) / 255;\n\n    const globalAlpha = ((localAlpha * parentAlpha) * 255);\n\n    // flip rgb to bgr\n    const localBGRColor = ((localColorRGB & 0xFF) << 16) + (localColorRGB & 0xFF00) + ((localColorRGB >> 16) & 0xFF);\n\n    const parentBGRColor = parentColor & 0x00FFFFFF;\n\n    let sharedBGRColor: number;\n\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n    else\n    {\n        sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n    }\n\n    return sharedBGRColor + (globalAlpha << 24);\n}\n","export function mixHexColors(color1: number, color2: number, ratio: number): number\n{\n    const r1 = (color1 >> 16) & 0xFF;\n    const g1 = (color1 >> 8) & 0xFF;\n    const b1 = color1 & 0xFF;\n\n    const r2 = (color2 >> 16) & 0xFF;\n    const g2 = (color2 >> 8) & 0xFF;\n    const b2 = color2 & 0xFF;\n\n    const r = r1 + ((r2 - r1) * ratio);\n    const g = g1 + ((g2 - g1) * ratio);\n    const b = b1 + ((b2 - b1) * ratio);\n\n    return (r << 16) + (g << 8) + b;\n}\n\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { clearList } from './clearList';\nimport { mixColors } from './mixColors';\n\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const renderGroupDepth = Number(j);\n\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            const child = list[i];\n\n            // check that these things match our layer and depth - if the renderGroup does not match,\n            // the child has been re-parented into another rendergroup since it asked to be updated so we can ignore it here\n            // secondly if the relativeRenderGroupDepth has changed, then the it means it will have been nested at a\n            // different different level in the render group - so we can wait for the update that does in fact match\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth)\n            {\n                updateTransformAndChildren(child, updateTick, 0);\n            }\n        }\n\n        clearList(list, index);\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = mixColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.renderGroup))\n    {\n        updateFlags = updateFlags | container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.parentRenderGroup;\n        const renderable = container as ViewContainer;\n\n        if (renderable.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(renderable);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = mixColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        // note to self: there is no need to check if container.parentRenderGroup || !container.renderGroup\n        // exist here, as this function is only called if the structure did NOT change\n        // which means they have to be valid if this function is called\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { clearList } from './utils/clearList';\nimport { collectRenderGroups } from './utils/collectRenderGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { ViewContainer } from '../view/ViewContainer';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        container.isRenderGroup = true;\n\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const renderGroups = collectRenderGroups(container.renderGroup, []);\n\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < renderGroups.length; i++)\n        {\n            const renderGroup = renderGroups[i];\n\n            renderGroup.runOnRender();\n\n            renderGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!renderGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(renderGroup, renderPipes);\n            }\n            else\n            {\n                clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateRenderGroupTransforms(renderGroup);\n\n            if (renderGroup.structureDidChange)\n            {\n                renderGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(renderGroup, renderer);\n            }\n            else\n            {\n                // update remaining renderables\n                updateRenderables(renderGroup);\n            }\n\n            // reset the renderables to update\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n\nfunction updateRenderables(renderGroup: RenderGroup)\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            renderGroup.updateRenderable(container as ViewContainer);\n        }\n    }\n\n    clearList(list, index);\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: Sprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.transform = sprite.groupTransform;\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { DefaultBatcher } from './DefaultBatcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableElement, Batcher } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    init?(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    contextChange?(): void;\n}\n\n/**\n * A pipe that batches elements into batches and sends them to the renderer.\n *\n * You can install new Batchers using ExtensionType.Batcher. Each render group will\n * have a default batcher and any required ones will be created on demand.\n * @memberof rendering\n */\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private readonly _batchersByInstructionSet: Record<number, Record<string, Batcher>> = Object.create(null);\n\n    private _adaptor: BatcherAdaptor;\n\n    /** A record of all active batchers, keyed by their names */\n    private _activeBatches: Record<string, Batcher> = Object.create(null);\n\n    /** The currently active batcher being used to batch elements */\n    private _activeBatch: Batcher;\n\n    public static _availableBatchers: Record<string, new () => Batcher> = Object.create(null);\n\n    public static getBatcher(name: string): Batcher\n    {\n        return new this._availableBatchers[name as keyof typeof this._availableBatchers]();\n    }\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init?.(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        let batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        if (!batchers)\n        {\n            batchers = this._batchersByInstructionSet[instructionSet.uid] = Object.create(null);\n            batchers.default ||= new DefaultBatcher();\n        }\n\n        this._activeBatches = batchers;\n\n        this._activeBatch = this._activeBatches.default;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].begin();\n        }\n    }\n\n    public addToBatch(batchableObject: BatchableElement, instructionSet: InstructionSet)\n    {\n        if (this._activeBatch.name !== batchableObject.batcherName)\n        {\n            this._activeBatch.break(instructionSet);\n\n            let batch = this._activeBatches[batchableObject.batcherName];\n\n            if (!batch)\n            {\n                batch = this._activeBatches[batchableObject.batcherName]\n                    = BatcherPipe.getBatcher(batchableObject.batcherName);\n                batch.begin();\n            }\n\n            this._activeBatch = batch;\n        }\n\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n\n        const batches = this._activeBatches;\n\n        for (const i in batches)\n        {\n            const batch = batches[i as keyof typeof batches];\n            const geometry = batch.geometry;\n\n            geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n\n            geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n        }\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        for (const i in batchers)\n        {\n            const batcher = batchers[i as keyof typeof batchers];\n            const geometry = batcher.geometry;\n\n            if (batcher.dirty)\n            {\n                batcher.dirty = false;\n\n                geometry.buffers[0].update(batcher.attributeSize * 4);\n            }\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = batcher.geometry;\n            const shader = batcher.shader;\n\n            this._adaptor.start(this, geometry, shader);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor = null;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].destroy();\n        }\n\n        this._activeBatches = null;\n    }\n}\n\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\n\nextensions.add(DefaultBatcher);\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader';\nimport { State } from '../rendering/renderers/shared/state/State';\n\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type {\n    IShaderWithResources,\n    ShaderFromResources,\n    ShaderWithResources\n} from '../rendering/renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../rendering/renderers/shared/state/const';\nimport type { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * Filters provide additional shading and post-processing effects to any display object and its children\n * they are attached to.\n *\n * You attached filters to a display object using its `filters` array property.\n *\n * ```js\n * import { Sprite, BlurFilter, HardMixBlend } from 'pixi.js';\n *\n * const sprite = Sprite.from('myTexture.png');\n *\n * // single filter\n * sprite.filters = new BlurFilter({ strength: 8 });\n *\n * // or multiple filters\n * sprite.filters = [new BlurFilter({ strength: 8 }), new HardMixBlend()];\n * ```\n *\n * Pixi has a number of built-in filters which can be used in your game or application:\n *\n * - {@link filters.AlphaFilter} - Applies alpha to the display object and any of its children.\n * - {@link filters.BlurFilter} - Applies a Gaussian blur to the display object.\n * - {@link filters.BlurFilterPass} - Applies a blur pass to an object.\n * - {@link filters.ColorBurnBlend} - Blend mode to add color burn to display objects.\n * - {@link filters.ColorDodgeBlend} - Blend mode to add color dodge to display objects.\n * - {@link filters.ColorMatrixFilter} - Transform the color channels by matrix multiplication.\n * - {@link filters.DarkenBlend} - Blend mode to darken display objects.\n * - {@link filters.DisplacementFilter} - Applies a displacement map to distort an object.\n * - {@link filters.DivideBlend} - Blend mode to divide display objects.\n * - {@link filters.HardMixBlend} - Blend mode to hard mix display objects.\n * - {@link filters.LinearBurnBlend} - Blend mode to add linear burn to display objects.\n * - {@link filters.LinearDodgeBlend} - Blend mode to add linear dodge to display objects.\n * - {@link filters.LinearLightBlend} - Blend mode to add linear light to display objects.\n * - {@link filters.NoiseFilter} - Applies random noise to an object.\n * - {@link filters.PinLightBlend} - Blend mode to add pin light to display objects.\n * - {@link filters.SubtractBlend} - Blend mode to subtract display objects.\n *\n * <br/>\n * For more available filters, check out the\n *  {@link https://pixijs.io/filters/docs/ pixi-filters} repository.\n *\n * You can also check out the awesome {@link https://pixijs.io/filters/examples/ Filter demo} to see\n * filters in action and combine them!\n * @namespace filters\n */\n\n/**\n * The options to use when creating a new filter.\n * @memberof filters\n */\nexport interface FilterOptions\n{\n    /** optional blend mode used by the filter when rendering (defaults to 'normal') */\n    blendMode?: BLEND_MODES;\n    /**\n     * the resolution the filter should be rendered at. The lower the resolution, the more performant\n     * the filter will be, but the lower the quality of the output. (default 1)\n     * If 'inherit', the resolution of the render target is used.\n     * Consider lowering this for things like blurs filters\n     */\n    resolution?: number | 'inherit';\n    /**\n     * the amount of pixels to pad the container with when applying the filter. For example a blur extends the\n     * container out as it blurs, so padding is applied to ensure that extra detail is rendered as well\n     * without clipping occurring. (default 0)\n     */\n    padding?: number;\n    /**\n     * If true the filter will make use of antialiasing. Although it looks better this can have a performance impact.\n     * If set to 'inherit', the filter will detect the antialiasing of the render target and change this automatically.\n     * Definitely don't set this to true if the render target has antialiasing set to false. As it will antialias,\n     * but you won't see the difference. (default 'off')\n     *\n     * This can be a boolean or [FilterAntialias]{@link filters.FilterAntialias} string.\n     */\n    antialias?: FilterAntialias | boolean;\n    /**\n     * If this is set to true, the filter system will grab a snap shot of the area being rendered\n     * to and pass this into the shader. This is useful for blend modes that need to be aware of the pixels\n     * they are rendering to. Only use if you need that data, otherwise its an extra gpu copy you don't need!\n     * (default false)\n     */\n    blendRequired?: boolean;\n    /**\n     * If this is set to true, the filter system will clip filter texture into viewport\n     * This is useful for filters that applied to whole texture.\n     * (default true)\n     */\n    clipToViewport?: boolean;\n}\n\n/** Filter options mixed with shader resources. A filter needs a shader and some resources to work. */\nexport type FilterWithShader = FilterOptions & IShaderWithResources;\n\n/**\n * The antialiasing mode of the filter. This can be either:\n * - `on` - the filter is always antialiased regardless of the render target settings\n * - `off` - (default) the filter is never antialiased regardless of the render target settings\n * - `inherit` - the filter uses the antialias settings of the render target\n * @memberof filters\n */\nexport type FilterAntialias = 'on' | 'off' | 'inherit';\n\n/**\n * The Filter class is the base for all filter effects used in Pixi.js\n * As it extends a shader, it requires that a glProgram is parsed in to work with WebGL and a gpuProgram for WebGPU.\n * If you don't proved one, then the filter is skipped and just rendered as if it wasn't there for that renderer.\n *\n * A filter can be applied to anything that extends Container in Pixi.js which also includes Sprites, Graphics etc.\n *\n * Its worth noting Performance-wise filters can be pretty expensive if used too much in a single scene.\n * The following happens under the hood when a filter is applied:\n *\n * .1. Break the current batch\n * <br>\n * .2. The target is measured using getGlobalBounds\n * (recursively go through all children and figure out how big the object is)\n * <br>\n * .3. Get the closest Po2 Textures from the texture pool\n * <br>\n * .4. Render the target to that texture\n * <br>\n * .5. Render that texture back to the main frame buffer as a quad using the filters program.\n * <br>\n * <br>\n * Some filters (such as blur) require multiple passes too which can result in an even bigger performance hit. So be careful!\n * Its not generally the complexity of the shader that is the bottle neck,\n * but all the framebuffer / shader switching that has to take place.\n * One filter applied to a container with many objects is MUCH faster than many filter applied to many objects.\n * @class\n * @memberof filters\n */\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    public static readonly defaultOptions: FilterOptions = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'off',\n        blendRequired: false,\n        clipToViewport: true,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntialias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    public _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default 1\n     */\n    public resolution: number | 'inherit';\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    /**\n     * Clip texture into viewport or not\n     * @default true\n     */\n    public clipToViewport: boolean;\n\n    /**\n     * @param options - The optional parameters of this filter.\n     */\n    constructor(options: FilterWithShader)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super(options as ShaderWithResources);\n\n        this.blendMode = options.blendMode;\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias;\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n        this.clipToViewport = options.clipToViewport;\n\n        this.addResource('uTexture', 0, 1);\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the blend mode of the filter.\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    /** Sets the blend mode of the filter. */\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n\n    /**\n     * A short hand function to create a filter based of a vertex and fragment shader src.\n     * @param options\n     * @returns A shiny new PixiJS filter!\n     */\n    public static from(options: FilterOptions & ShaderFromResources): Filter\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Filter({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    inverse?: boolean;\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n            uInverse: { value: options.inverse ? 1 : 0, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    set inverse(value: boolean)\n    {\n        this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n    }\n\n    get inverse(): boolean\n    {\n        return this.resources.filterUniforms.uniforms.uInverse === 1;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../renderers/types';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super();\n\n        this.filters = [new MaskFilter({\n            sprite: new Sprite(Texture.EMPTY),\n            inverse: false,\n            resolution: 'inherit',\n            antialias: 'inherit'\n        })];\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    get inverse(): boolean\n    {\n        return (this.filters[0] as MaskFilter).inverse;\n    }\n\n    set inverse(value: boolean)\n    {\n        (this.filters[0] as MaskFilter).inverse = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    inverse: boolean;\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        (mask as AlphaMask).inverse = maskedContainer._maskOptions.inverse;\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            collectAllRenderables(\n                maskContainer,\n                instructionSet,\n                renderer\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            inverse: _maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            filterEffect.inverse = instruction.inverse;\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    colorTextureSource._resolution,\n                    colorTextureSource.antialias\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                // WebGPU blit's automatically, but WebGL does not!\n                if (renderer.type === RendererType.WEBGL)\n                {\n                    renderer.renderTarget.finishRenderPass();\n                }\n\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    inverse: boolean,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        collectAllRenderables(\n            maskContainer,\n            instructionSet,\n            renderer,\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        let filterEffect = this._filterHash[blendMode];\n\n        // this does need an execute?\n        if (!filterEffect)\n        {\n            filterEffect = this._filterHash[blendMode] = new FilterEffect();\n\n            filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()];\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect,\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy();\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy();\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): RenderTexture\n    {\n        return new RenderTexture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): RenderTexture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        target.source.updateMipmaps();\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\nexport interface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get globalUniformData()\n    {\n        return this._currentGlobalUniformData;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Ticker } from '../../../ticker/Ticker';\n\nimport type { System } from './system/System';\n\n// start at one too keep it positive!\nlet uid = 1;\n\n/**\n * The SchedulerSystem manages scheduled tasks with specific intervals.\n * @memberof rendering\n */\nexport class SchedulerSystem implements System<null>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'scheduler',\n        priority: 0,\n    } as const;\n\n    private readonly _tasks: {\n        func: (elapsed: number) => void;\n        duration: number;\n        offset: number\n        start: number;\n        last: number;\n        repeat: boolean;\n        id: number;\n    }[] = [];\n\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    private _offset = 0;\n\n    /** Initializes the scheduler system and starts the ticker. */\n    public init(): void\n    {\n        Ticker.system.add(this._update, this);\n    }\n\n    /**\n     * Schedules a repeating task.\n     * @param func - The function to execute.\n     * @param duration - The interval duration in milliseconds.\n     * @param useOffset - this will spread out tasks so that they do not all run at the same time\n     * @returns The unique identifier for the scheduled task.\n     */\n    public repeat(func: (elapsed: number) => void, duration: number, useOffset = true): number\n    {\n        const id = uid++;\n\n        let offset = 0;\n\n        if (useOffset)\n        {\n            this._offset += 1000;\n            offset = this._offset;\n        }\n\n        this._tasks.push({\n            func,\n            duration,\n            start: performance.now(),\n            offset,\n            last: performance.now(),\n            repeat: true,\n            id\n        });\n\n        return id;\n    }\n\n    /**\n     * Cancels a scheduled task.\n     * @param id - The unique identifier of the task to cancel.\n     */\n    public cancel(id: number): void\n    {\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            if (this._tasks[i].id === id)\n            {\n                this._tasks.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Updates and executes the scheduled tasks.\n     * @private\n     */\n    private _update(): void\n    {\n        const now = performance.now();\n\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            const task = this._tasks[i];\n\n            if ((now - task.offset) - task.last >= task.duration)\n            {\n                const elapsed = now - task.start;\n\n                task.func(elapsed);\n                task.last = now;\n            }\n        }\n    }\n\n    /**\n     * Destroys the scheduler system and removes all tasks.\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        Ticker.system.remove(this._update, this);\n\n        this._tasks.length = 0;\n    }\n}\n","import { DOMAdapter } from '../environment/adapter';\nimport { VERSION } from './const';\n\nlet saidHello = false;\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","/**\n * Takes a hash and removes all the `undefined`/`null` values from it.\n * In PixiJS, we tend to null properties instead of using 'delete' for performance reasons.\n * However, in some cases, this could be a problem if the hash grows too large over time,\n * this function can be used to clean a hash.\n * @param hash - The hash to clean.\n * @returns A new hash with all the `undefined`/`null` values removed.\n * @memberof utils\n */\nexport function cleanHash<T>(hash: Record<string, T>): Record<string, T>\n{\n    let clean = false;\n\n    for (const i in hash)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (hash[i] == undefined)\n        {\n            clean = true;\n            break;\n        }\n    }\n\n    if (!clean) return hash;\n\n    const cleanHash = Object.create(null);\n\n    for (const i in hash)\n    {\n        const value = hash[i];\n\n        if (value)\n        {\n            cleanHash[i] = value;\n        }\n    }\n\n    return cleanHash;\n}\n\n/**\n * Removes all `undefined`/`null` elements from the given array and compacts the array.\n *\n * This function iterates through the array, shifting non-undefined elements to the left\n * to fill gaps created by `undefined` elements. The length of the array is then adjusted\n * to remove the trailing `undefined` elements.\n * @param arr - The array to be cleaned.\n * @returns The cleaned array with all `undefined` elements removed.\n * @example\n * // Example usage:\n * const arr = [1, undefined, 2, undefined, 3];\n * const cleanedArr = cleanArray(arr);\n * console.log(cleanedArr); // Output: [1, 2, 3]\n * @memberof utils\n */\nexport function cleanArray<T>(arr: T[]): T[]\n{\n    let offset = 0;\n\n    for (let i = 0; i < arr.length; i++)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (arr[i] == undefined)\n        {\n            offset++;\n        }\n        else\n        {\n            arr[i - offset] = arr[i];\n        }\n    }\n\n    arr.length = arr.length - offset;\n\n    return arr;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { cleanArray, cleanHash } from '../../../../utils/data/clean';\n\nimport type { Container } from '../../../../scene/container/Container';\nimport type { Renderer } from '../../types';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { RenderPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link RenderableGCSystem}.\n * @memberof rendering\n * @property {boolean} [renderableGCActive=true] - If set to true, this will enable the garbage collector on the renderables.\n * @property {number} [renderableGCAMaxIdle=60000] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [renderableGCCheckCountMax=60000] - time between two garbage collections.\n */\nexport interface RenderableGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCMaxUnusedTime: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCFrequency: number;\n}\n/**\n * System plugin to the renderer to manage renderable garbage collection. When rendering\n * stuff with the renderer will assign resources to each renderable. This could be for example\n * a batchable Sprite, or a text texture. If the renderable is not used for a certain amount of time\n * its resources will be tided up by its render pipe.\n * @memberof rendering\n */\nexport class RenderableGCSystem implements System<RenderableGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'renderableGC',\n        priority: 0\n    } as const;\n\n    /** default options for the renderableGCSystem */\n    public static defaultOptions: RenderableGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        renderableGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        renderableGCMaxUnusedTime: 60000,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        renderableGCFrequency: 30000,\n    };\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see renderableGCSystem.defaultMaxIdle\n     */\n    public maxUnusedTime: number;\n\n    private _renderer: Renderer;\n\n    private readonly _managedRenderables: Renderable[] = [];\n    private _handler: number;\n    private _frequency: number;\n    private _now: number;\n\n    private readonly _managedHashes: {context: any, hash: string}[] = [];\n    private _hashHandler: number;\n\n    private readonly _managedArrays: {context: any, hash: string}[] = [];\n    private _arrayHandler: number;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: RenderableGCSystemOptions): void\n    {\n        options = { ...RenderableGCSystem.defaultOptions, ...options };\n\n        this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n        this._frequency = options.renderableGCFrequency;\n\n        this.enabled = options.renderableGCActive;\n    }\n\n    get enabled(): boolean\n    {\n        return !!this._handler;\n    }\n\n    set enabled(value: boolean)\n    {\n        if (this.enabled === value) return;\n\n        if (value)\n        {\n            this._handler = this._renderer.scheduler.repeat(\n                () => this.run(),\n                this._frequency,\n                false\n            );\n\n            this._hashHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const hash of this._managedHashes)\n                    {\n                        hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n                    }\n                },\n                this._frequency\n            );\n\n            this._arrayHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const array of this._managedArrays)\n                    {\n                        cleanArray(array.context[array.hash]);\n                    }\n                },\n                this._frequency\n            );\n        }\n        else\n        {\n            this._renderer.scheduler.cancel(this._handler);\n            this._renderer.scheduler.cancel(this._hashHandler);\n            this._renderer.scheduler.cancel(this._arrayHandler);\n        }\n    }\n\n    public addManagedHash<T>(context: T, hash: string): void\n    {\n        this._managedHashes.push({ context, hash: hash as string });\n    }\n\n    public addManagedArray<T>(context: T, hash: string): void\n    {\n        this._managedArrays.push({ context, hash: hash as string });\n    }\n\n    public prerender(): void\n    {\n        this._now = performance.now();\n    }\n\n    public addRenderable(renderable: Renderable, instructionSet: InstructionSet): void\n    {\n        if (!this.enabled) return;\n\n        renderable._lastUsed = this._now;\n\n        if (renderable._lastInstructionTick === -1)\n        {\n            this._managedRenderables.push(renderable);\n            renderable.once('destroyed', this._removeRenderable, this);\n        }\n\n        renderable._lastInstructionTick = instructionSet.tick;\n    }\n\n    /** Runs the scheduled garbage collection */\n    public run(): void\n    {\n        const now = performance.now();\n\n        const managedRenderables = this._managedRenderables;\n\n        const renderPipes = this._renderer.renderPipes;\n\n        let offset = 0;\n\n        for (let i = 0; i < managedRenderables.length; i++)\n        {\n            const renderable = managedRenderables[i];\n\n            if (renderable === null)\n            {\n                offset++;\n                continue;\n            }\n\n            const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n            const currentIndex = renderGroup?.instructionSet?.tick ?? -1;\n\n            if (renderable._lastInstructionTick !== currentIndex && now - renderable._lastUsed > this.maxUnusedTime)\n            {\n                if (!renderable.destroyed)\n                {\n                    const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n                    rp[renderable.renderPipeId].destroyRenderable(renderable);\n                }\n\n                // remove from the array as this has been destroyed..\n                renderable._lastInstructionTick = -1;\n                offset++;\n                renderable.off('destroyed', this._removeRenderable, this);\n            }\n            else\n            {\n                managedRenderables[i - (offset)] = renderable;\n            }\n        }\n\n        managedRenderables.length = managedRenderables.length - offset;\n    }\n\n    public destroy(): void\n    {\n        this.enabled = false;\n        this._renderer = null as any as Renderer;\n        this._managedRenderables.length = 0;\n        this._managedHashes.length = 0;\n        this._managedArrays.length = 0;\n    }\n\n    private _removeRenderable(renderable: Container): void\n    {\n        const index = this._managedRenderables.indexOf(renderable as Renderable);\n\n        if (index >= 0)\n        {\n            renderable.off('destroyed', this._removeRenderable, this);\n            this._managedRenderables[index] = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * @deprecated since 8.3.0\n     * @see {@link TextureGCSystem.textureGCMaxIdle}\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * @deprecated since 8.3.0\n         * @see {@link TextureGCSystem.textureGCMaxIdle}\n         */\n        textureGCAMaxIdle: null,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture<CanvasSource>;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public get autoDensity(): boolean\n    {\n        return this.texture.source.autoDensity;\n    }\n    public set autoDensity(value: boolean)\n    {\n        this.texture.source.autoDensity = value;\n    }\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        this.texture.source.transparent = options.backgroundAlpha < 1;\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { SchedulerSystem } from '../SchedulerSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n    RendererInitHook,\n    RenderableGCSystem,\n    SchedulerSystem,\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions\n{\n    /**\n     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.\n     * It is false by default, and means PixiJS will load all the default extensions, based\n     * on the environment e.g browser/webworker.\n     * If you set this to true, then you will need to manually import the systems and extensions you need.\n     *\n     * e.g.\n     * ```js\n     * import 'accessibility';\n     * import 'app';\n     * import 'events';\n     * import 'spritesheet';\n     * import 'graphics';\n     * import 'mesh';\n     * import 'text';\n     * import 'text-bitmap';\n     * import 'text-html';\n     * import { autoDetectRenderer } from 'pixi.js';\n     *\n     * const renderer = await autoDetectRenderer({\n     *   width: 800,\n     *   height: 600,\n     *   skipExtensionImports: true,\n     * });\n     * ```\n     * @default false\n     */\n    skipExtensionImports?: boolean;\n    /**\n     * @default true\n     * @deprecated since 8.1.6\n     * @see `skipExtensionImports`\n     */\n    manageImports?: boolean;\n}\n","import { nextPow2 } from '../../../../maths/misc/pow2';\nimport { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\nlet count = 0;\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in default pool\n * @memberof rendering\n * @name TexturePool\n */\nexport class TexturePoolClass\n{\n    /** The default options for texture pool */\n    public textureOptions: TextureSourceOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n\n    private _texturePool: {[x in string | number]: Texture[]};\n    private _poolKeyHash: Record<number, number> = Object.create(null);\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n     */\n    constructor(textureOptions?: TextureSourceOptions)\n    {\n        this._texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     * @param antialias\n     */\n    public createTexture(pixelWidth: number, pixelHeight: number, antialias: boolean): Texture\n    {\n        const textureSource = new TextureSource({\n            ...this.textureOptions,\n\n            width: pixelWidth,\n            height: pixelHeight,\n            resolution: 1,\n            antialias,\n            autoGarbageCollect: true,\n        });\n\n        return new Texture({\n            source: textureSource,\n            label: `texturePool_${count++}`,\n        });\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param frameWidth - The minimum width of the render texture.\n     * @param frameHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param antialias\n     * @returns The new render texture.\n     */\n    public getOptimalTexture(frameWidth: number, frameHeight: number, resolution = 1, antialias: boolean): Texture\n    {\n        let po2Width = Math.ceil((frameWidth * resolution) - 1e-6);\n        let po2Height = Math.ceil((frameHeight * resolution) - 1e-6);\n\n        po2Width = nextPow2(po2Width);\n        po2Height = nextPow2(po2Height);\n\n        const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n\n        if (!this._texturePool[key])\n        {\n            this._texturePool[key] = [];\n        }\n\n        let texture = this._texturePool[key].pop();\n\n        if (!texture)\n        {\n            texture = this.createTexture(po2Width, po2Height, antialias);\n        }\n\n        texture.source._resolution = resolution;\n        texture.source.width = po2Width / resolution;\n        texture.source.height = po2Height / resolution;\n        texture.source.pixelWidth = po2Width;\n        texture.source.pixelHeight = po2Height;\n\n        // fit the layout to the requested original size\n        texture.frame.x = 0;\n        texture.frame.y = 0;\n        texture.frame.width = frameWidth;\n        texture.frame.height = frameHeight;\n\n        texture.updateUvs();\n\n        this._poolKeyHash[texture.uid] = key;\n\n        return texture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     * @param texture - The texture to check what size it is.\n     * @param antialias - Whether to use antialias.\n     * @returns A texture that is a power of two\n     */\n    public getSameSizeTexture(texture: Texture, antialias = false)\n    {\n        const source = texture.source;\n\n        return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    public returnTexture(renderTexture: Texture): void\n    {\n        const key = this._poolKeyHash[renderTexture.uid];\n\n        this._texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    public clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this._texturePool)\n            {\n                const textures = this._texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this._texturePool = {};\n    }\n}\n\nexport const TexturePool = new TexturePoolClass();\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture<CanvasSource>> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture<CanvasSource>\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { ViewContainer } from '../view/ViewContainer';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: ViewContainer;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n"],"names":["localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","textureBit","fragment","textureBitGl","ensureAttributes","geometry","extractedData","i","attributes","attribute","attributeData","format","offset","instance","warn","buffers","tempStride","tempStart","j","buffer","uid","getAttributeInfoFromFormat","stride","start","ensureStartAndStride","GpuStencilModesToPixi","STENCIL_MODES","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","BufferResource","EventEmitter","constructor","_ref","size","_resourceType","_touched","_resourceId","_bufferResource","destroyed","this","on","onBufferChange","emit","destroy","destroyBuffer","arguments","length","undefined","_RenderTarget","descriptor","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","stencil","depth","push","TextureSource","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","onSourceResize","depthStencilTexture","Texture","ensureDepthStencilTexture","pixelWidth","pixelHeight","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","off","RenderTarget","RenderTargetSystem","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","Map","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","renderableGC","addManagedHash","finishRenderPass","adaptor","renderTarget","renderStart","target","clear","clearColor","frame","copyFrom","rootRenderTarget","renderingToScreen","resource","globalThis","HTMLCanvasElement","document","body","contains","isRenderingToScreen","postrender","bind","renderSurface","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","x","y","pm","flipY","sign","identity","a","d","tx","ty","calculateProjection","startRenderPass","CLEAR","ALL","contextChange","pop","currentRenderTargetData","isTexture","get","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","Math","min","ensureDepthStencil","key","CanvasSource","test","getCanvasTexture","once","delete","destroyGpuRenderTarget","set","initGpuRenderTarget","UboSystem","_syncFunctionHash","_adaptor","_systemCheck","unsafeEvalSupported","Error","ensureUniformGroup","uniformGroup","uniformData","getUniformGroupData","Buffer","data","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","uniformGroupData","uniforms","updateUniformGroup","isStatic","_dirtyId","synced","update","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","uniformParsers","ubo","template","type","fragmentSrc","join","Function","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","value","uniform","red","blendModeIds","normal","add","multiply","screen","overlay","erase","max","_State","blendMode","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","state","default2d","State","CustomRenderPipe","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","execute","isRenderable","render","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","RenderGroupPipe","addRenderGroup","globalUniforms","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","buildInstructions","rendererOrPipes","root","reset","buildStart","colorMask","sortableChildren","sortChildren","collectAllRenderablesAdvanced","buildEnd","collectAllRenderables","globalDisplayStatus","includeInBuild","isSimple","renderable","setBlendMode","groupBlendMode","didViewUpdate","children","collectAllRenderablesSimple","effects","effect","pipe","clearList","list","index","collectRenderGroups","out","renderGroupChildren","WHITE_BGR","mixColors","localBGRColor","parentBGRColor","color1","color2","ratio","r1","g1","b1","mixHexColors","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","appendFrom","relativeGroupTransform","groupColor","groupAlpha","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","updateFlags","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","structureDidChange","groupColorAlpha","localBlendMode","localDisplayStatus","validateRenderables","childrenRenderablesToUpdate","rebuildRequired","tempMatrix","RenderGroupSystem","transform","isRenderGroup","renderGroups","originalLocalTransform","runOnRender","updateRenderables","upload","uniformBatch","renderEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","_destroyRenderableBound","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","addToBatch","_batcher","updateElement","_texture","_source","checkAndUpdateTexture","batchableSprite","BigPool","return","bounds","_initGPUSprite","BatchableSprite","groupTransform","roundPixels","_roundPixels","_BatcherPipe","_batchersByInstructionSet","_activeBatches","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","_activeBatch","begin","batchableObject","batcherName","batches","indexBuffer","setDataWithSize","indexSize","attributeBuffer","float32View","attributeSize","batcher","dirty","action","shader","BatcherPipe","extensions","handleByMap","Batcher","_Filter","Shader","options","super","enabled","_state","padding","blendRequired","clipToViewport","addResource","apply","filterManager","input","output","clearMode","applyFilter","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","MaskFilter","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","entryPoint","resources","uMaskTexture","_textureMatrix","calculateSpriteMatrix","prepend","mapCoord","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","ceil","colorTextureSource","filterTexture","TexturePool","getOptimalTexture","minX","minY","maskData","RendererType","WEBGL","filter","returnTexture","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","has","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","setStencilMode","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","ref","BlendModePipe","_isAdvanced","_filterHash","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","image","Image","src","base64","defaultImageOptions","quality","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","createElement","filename","href","appendChild","click","removeChild","log","console","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","textureSourceOptions","view","Array","isArray","shared","region","copyTo","getLocalBounds","rectangle","translate","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","HelloSystem","hello","context","webGLVersion","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","VERSION","sayHello","cleanHash","hash","clean","cleanHash2","cleanArray","arr","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedArray","prerender","_now","_lastUsed","_lastInstructionTick","_removeRenderable","tick","managedRenderables","currentIndex","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","managedTextures","autoGarbageCollect","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","v8_0_0","createCanvas","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","RendererInitHook","SharedRenderPipes","textureOptions","_poolKeyHash","_texturePool","enableFullScreen","createTexture","textureSource","label","frameWidth","frameHeight","po2Width","po2Height","nextPow2","updateUvs","getSameSizeTexture","renderTexture","destroyTextures","textures","canvasCache","onDestroy","abgr","packAsQuad","_attributeStart","_batch"],"sourceRoot":""}