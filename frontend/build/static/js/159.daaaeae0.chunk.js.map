{"version":3,"file":"static/js/159.daaaeae0.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/scene/graphics/gpu/GpuGraphicsAdaptor.ts","../node_modules/pixi.js/src/scene/mesh/gpu/GpuMeshAdapter.ts","../node_modules/pixi.js/src/rendering/batcher/gpu/GpuBatchAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/BindGroupSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/buffer/GpuBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuColorMaskSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuDeviceSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuEncoderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuStencilSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/createUboElementsWGSL.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/createUboSyncFunctionWGSL.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuUboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/buffer/UboBatch.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuUniformBatchPipe.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/pipeline/PipelineSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/GpuRenderTarget.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/GpuShaderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuBlendModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStateSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadVideoSource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/GpuTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/WebGPURenderer.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBit } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGroup2 } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { GpuEncoderSystem } from '../../../rendering/renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses the GPU to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GpuGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const localUniforms = new UniformGroup({\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'graphics',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(MAX_TEXTURES),\n\n                localUniformBitGroup2,\n                roundPixelsBit\n            ]\n        });\n\n        this.shader = new Shader({\n            gpuProgram,\n            resources: {\n                // added on the fly!\n                localUniforms,\n            },\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGPURenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            geometry, instructions\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGPU specific...\n\n        // TODO perf test this a bit...\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        encoder.setPipelineFromGeometryProgramAndState(\n            geometry,\n            shader.gpuProgram,\n            graphicsPipe.state\n        );\n\n        encoder.setGeometry(geometry);\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, shader.gpuProgram);\n\n        const localBindGroup = (renderer as WebGPURenderer)\n            .renderPipes.uniformBatch.getUniformBindGroup(shader.resources.localUniforms, true);\n\n        encoder.setBindGroup(2, localBindGroup, shader.gpuProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            shader.groups[1] = batch.bindGroup;\n\n            if (!batch.gpuBindGroup)\n            {\n                const textureBatch = batch.textures;\n\n                batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n                batch.gpuBindGroup = renderer.bindGroup.getBindGroup(\n                    batch.bindGroup, shader.gpuProgram, 1\n                );\n            }\n\n            encoder.setBindGroup(1, batch.bindGroup, shader.gpuProgram);\n\n            encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * The WebGL adaptor for the mesh system. Allows the Mesh System to be used with the WebGl renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuMeshAdapter implements MeshAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBit,\n                textureBit,\n                roundPixelsBit,\n            ]\n        });\n\n        this._shader = new Shader({\n            gpuProgram,\n            resources: {\n                uTexture: Texture.EMPTY._source,\n                uSampler: Texture.EMPTY._source.style,\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh)\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            shader.groups[2] = (renderer as WebGPURenderer)\n                .texture.getTextureBindGroup(mesh.texture);\n        }\n        else if (!shader.gpuProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no gpuProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        const gpuProgram = shader.gpuProgram;\n        // GPU..\n\n        if (gpuProgram.autoAssignGlobalUniforms)\n        {\n            shader.groups[0] = renderer.globalUniforms.bindGroup;\n        }\n\n        if (gpuProgram.autoAssignLocalUniforms)\n        {\n            const localUniforms = meshPipe.localUniforms;\n\n            shader.groups[1] = (renderer as WebGPURenderer)\n                .renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n        }\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGpuProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBit } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBit } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { State } from '../../renderers/shared/state/State';\nimport { MAX_TEXTURES } from '../shared/const';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup';\n\nimport type { GpuEncoderSystem } from '../../renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../renderers/gpu/WebGPURenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\nconst tempState = State.for2d();\n\n/**\n * A BatcherAdaptor that uses the GPU to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GpuBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _geometry: Geometry;\n\n    public init()\n    {\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'batch',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(MAX_TEXTURES),\n                roundPixelsBit,\n            ]\n        });\n\n        this._shader = new Shader({\n            gpuProgram,\n            groups: {\n                // these will be dynamically allocated\n            },\n        });\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry): void\n    {\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n        const program = this._shader.gpuProgram;\n\n        this._geometry = geometry;\n\n        encoder.setGeometry(geometry);\n\n        tempState.blendMode = 'normal';\n\n        // this just initiates the pipeline, so we can then set bind groups on it\n        renderer.pipeline.getPipeline(\n            geometry,\n            program,\n            tempState\n        );\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        // low level - we need to reset the bind group at location 1 to null\n        // this is because we directly manipulate the bound buffer in the execture function for\n        // performance reasons.\n        // setting it to null ensures that the next bind group we set at location 1 will\n        // be the one we want.\n        encoder.resetBindGroup(1);\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, program);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const program = this._shader.gpuProgram;\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        if (!batch.bindGroup)\n        {\n            const textureBatch = batch.textures;\n\n            batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n        }\n\n        tempState.blendMode = batch.blendMode;\n\n        const gpuBindGroup = renderer.bindGroup.getBindGroup(\n            batch.bindGroup, program, 1\n        );\n\n        const pipeline = renderer.pipeline.getPipeline(\n            this._geometry,\n            program,\n            tempState\n        );\n\n        batch.bindGroup._touch(renderer.textureGC.count);\n\n        encoder.setPipeline(pipeline);\n\n        encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n        encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { BufferResource } from '../shared/buffer/BufferResource';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { System } from '../shared/system/System';\nimport type { TextureSource } from '../shared/texture/sources/TextureSource';\nimport type { TextureStyle } from '../shared/texture/TextureStyle';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { BindResource } from './shader/BindResource';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the WebGPU bind groups. this is how data is bound to a shader when rendering\n * @memberof rendering\n */\nexport class BindGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'bindGroup',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _hash: Record<string, GPUBindGroup> = Object.create(null);\n    private _gpu: GPU;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getBindGroup(bindGroup: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        bindGroup._updateKey();\n\n        const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n\n        return gpuBindGroup;\n    }\n\n    private _createBindGroup(group: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        const device = this._gpu.device;\n        const groupLayout = program.layout[groupIndex];\n        const entries: GPUBindGroupEntry[] = [];\n        const renderer = this._renderer;\n\n        for (const j in groupLayout)\n        {\n            const resource: BindResource = group.resources[j] ?? group.resources[groupLayout[j]];\n            let gpuResource: GPUSampler | GPUTextureView | GPUExternalTexture | GPUBufferBinding;\n            // TODO make this dynamic..\n\n            if (resource._resourceType === 'uniformGroup')\n            {\n                const uniformGroup = resource as UniformGroup;\n\n                renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n\n                const buffer = uniformGroup.buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'buffer')\n            {\n                const buffer = resource as Buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'bufferResource')\n            {\n                const bufferResource = resource as BufferResource;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n                    offset: bufferResource.offset,\n                    size: bufferResource.size,\n                };\n            }\n            else if (resource._resourceType === 'textureSampler')\n            {\n                const sampler = resource as TextureStyle;\n\n                gpuResource = renderer.texture.getGpuSampler(sampler);\n            }\n            else if (resource._resourceType === 'textureSource')\n            {\n                const texture = resource as TextureSource;\n\n                gpuResource = renderer.texture.getGpuSource(texture).createView({\n\n                });\n            }\n\n            entries.push({\n                binding: groupLayout[j],\n                resource: gpuResource,\n            });\n        }\n\n        const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n\n        const gpuBindGroup = device.createBindGroup({\n            layout,\n            entries,\n        });\n\n        this._hash[group._key] = gpuBindGroup;\n\n        return gpuBindGroup;\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._hash))\n        {\n            this._hash[key] = null;\n        }\n\n        this._hash = null;\n\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { fastCopy } from '../../shared/buffer/utils/fastCopy';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\n\n/**\n * System plugin to the renderer to manage buffers.\n * @memberof rendering\n */\nexport class GpuBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    protected CONTEXT_UID: number;\n    private _gpuBuffers: { [key: number]: GPUBuffer } = Object.create(null);\n    private readonly _managedBuffers: Buffer[] = [];\n\n    private _gpu: GPU;\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getGPUBuffer(buffer: Buffer): GPUBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n    }\n\n    public updateBuffer(buffer: Buffer): GPUBuffer\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n\n        const data = buffer.data;\n\n        // TODO this can be better...\n        if (buffer._updateID && data)\n        {\n            buffer._updateID = 0;\n\n            // make sure\n            this._gpu.device.queue.writeBuffer(\n                gpuBuffer, 0, data.buffer, 0,\n                // round to the nearest 4 bytes\n                ((buffer._updateSize || data.byteLength) + 3) & ~3\n            );\n        }\n\n        return gpuBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        for (const id in this._gpuBuffers)\n        {\n            this._gpuBuffers[id].destroy();\n        }\n\n        this._gpuBuffers = {};\n    }\n\n    public createGPUBuffer(buffer: Buffer): GPUBuffer\n    {\n        if (!this._gpuBuffers[buffer.uid])\n        {\n            buffer.on('update', this.updateBuffer, this);\n            buffer.on('change', this.onBufferChange, this);\n            buffer.on('destroy', this.onBufferDestroy, this);\n        }\n\n        const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);\n\n        buffer._updateID = 0;\n\n        if (buffer.data)\n        {\n            // TODO if data is static, this can be mapped at creation\n            fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange());\n\n            gpuBuffer.unmap();\n        }\n\n        this._gpuBuffers[buffer.uid] = gpuBuffer;\n\n        this._managedBuffers.push(buffer);\n\n        return gpuBuffer;\n    }\n\n    protected onBufferChange(buffer: Buffer)\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid];\n\n        gpuBuffer.destroy();\n        buffer._updateID = 0;\n        this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);\n    }\n\n    /**\n     * Disposes buffer\n     * @param buffer - buffer with data\n     */\n    protected onBufferDestroy(buffer: Buffer): void\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid];\n\n        gpuBuffer.destroy();\n\n        this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);\n\n        buffer.off('update', this.updateBuffer, this);\n        buffer.off('change', this.onBufferChange, this);\n        buffer.off('destroy', this.onBufferDestroy, this);\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    public destroy(): void\n    {\n        this._managedBuffers\n            .slice()\n            .forEach((buffer) => this.onBufferDestroy(buffer));\n\n        (this._managedBuffers as null) = null;\n\n        this._gpuBuffers = null;\n    }\n}\n\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * The system that handles color masking for the GPU.\n * @memberof rendering\n */\nexport class GpuColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.pipeline.setColorMask(colorMask);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n        this._colorMaskCache = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { GpuPowerPreference } from '../types';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/** The GPU object. */\nexport interface GPU\n{\n    /** The GPU adapter */\n    adapter: GPUAdapter;\n    /** The GPU device */\n    device: GPUDevice;\n}\n\n/**\n * Options for the WebGPU context.\n * @memberof rendering\n */\nexport interface GpuContextOptions\n{\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGPU context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     */\n    powerPreference?: GpuPowerPreference;\n    /** Force the use of the fallback adapter */\n    forceFallbackAdapter: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @class\n * @memberof rendering\n */\nexport class GpuDeviceSystem implements System<GpuContextOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'device',\n    } as const;\n\n    /** The default options for the GpuDeviceSystem. */\n    public static defaultOptions: GpuContextOptions = {\n        /**\n         * {@link WebGPUOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * Force the use of the fallback adapter\n         * @default false\n         */\n        forceFallbackAdapter: false,\n    };\n\n    /** The GPU device */\n    public gpu: GPU;\n\n    private _renderer: WebGPURenderer;\n    private _initPromise: Promise<void>;\n\n    /**\n     * @param {WebGPURenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public async init(options: GpuContextOptions): Promise<void>\n    {\n        if (this._initPromise) return this._initPromise;\n\n        this._initPromise = this._createDeviceAndAdaptor(options)\n            .then((gpu) =>\n            {\n                this.gpu = gpu;\n\n                this._renderer.runners.contextChange.emit(this.gpu);\n            });\n\n        return this._initPromise;\n    }\n\n    /**\n     * Handle the context change event\n     * @param gpu\n     */\n    protected contextChange(gpu: GPU): void\n    {\n        this._renderer.gpu = gpu;\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param {object} options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    private async _createDeviceAndAdaptor(options: GpuContextOptions): Promise<GPU>\n    {\n        // TODO we only need one of these..\n        const adapter = await navigator.gpu.requestAdapter({\n            powerPreference: options.powerPreference,\n            forceFallbackAdapter: options.forceFallbackAdapter,\n        });\n\n        const requiredFeatures = [\n            'texture-compression-bc',\n            'texture-compression-astc',\n            'texture-compression-etc2',\n        ].filter((feature) => adapter.features.has(feature)) as GPUFeatureName[];\n\n        // TODO and one of these!\n        const device = await adapter.requestDevice({\n            requiredFeatures\n        });\n\n        return { adapter, device };\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { GpuRenderTarget } from './renderTarget/GpuRenderTarget';\nimport type { GpuRenderTargetAdaptor } from './renderTarget/GpuRenderTargetAdaptor';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * The system that handles encoding commands for the GPU.\n * @memberof rendering\n */\nexport class GpuEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'encoder',\n        priority: 1\n    } as const;\n\n    public commandEncoder: GPUCommandEncoder;\n    public renderPassEncoder: GPURenderPassEncoder;\n    public commandFinished: Promise<void>;\n\n    private _resolveCommandFinished: (value: void) => void;\n\n    private _gpu: GPU;\n    private _boundBindGroup: Record<number, BindGroup> = Object.create(null);\n    private _boundVertexBuffer: Record<number, Buffer> = Object.create(null);\n    private _boundIndexBuffer: Buffer;\n    private _boundPipeline: GPURenderPipeline;\n\n    private readonly _renderer: WebGPURenderer;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public renderStart(): void\n    {\n        this.commandFinished = new Promise((resolve) =>\n        {\n            this._resolveCommandFinished = resolve;\n        });\n\n        // generate a render pass description..\n        // create an encoder..\n        this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n    }\n\n    public beginRenderPass(gpuRenderTarget: GpuRenderTarget)\n    {\n        this.endRenderPass();\n\n        this._clearCache();\n\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n    }\n\n    public endRenderPass()\n    {\n        if (this.renderPassEncoder)\n        {\n            this.renderPassEncoder.end();\n        }\n\n        this.renderPassEncoder = null;\n    }\n\n    public setViewport(viewport: Rectangle): void\n    {\n        this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    }\n\n    public setPipelineFromGeometryProgramAndState(\n        geometry: Geometry,\n        program: GpuProgram,\n        state: any,\n        topology?: Topology,\n    ): void\n    {\n        const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n\n        this.setPipeline(pipeline);\n    }\n\n    public setPipeline(pipeline: GPURenderPipeline)\n    {\n        if (this._boundPipeline === pipeline) return;\n        this._boundPipeline = pipeline;\n\n        this.renderPassEncoder.setPipeline(pipeline);\n    }\n\n    private _setVertexBuffer(index: number, buffer: Buffer)\n    {\n        if (this._boundVertexBuffer[index] === buffer) return;\n\n        this._boundVertexBuffer[index] = buffer;\n\n        this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n    }\n\n    private _setIndexBuffer(buffer: Buffer)\n    {\n        if (this._boundIndexBuffer === buffer) return;\n\n        this._boundIndexBuffer = buffer;\n\n        const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? 'uint16' : 'uint32';\n\n        this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n    }\n\n    public resetBindGroup(index: number)\n    {\n        this._boundBindGroup[index] = null;\n    }\n\n    public setBindGroup(index: number, bindGroup: BindGroup, program: GpuProgram)\n    {\n        if (this._boundBindGroup[index] === bindGroup) return;\n        this._boundBindGroup[index] = bindGroup;\n\n        bindGroup._touch(this._renderer.textureGC.count);\n\n        // TODO getting the bind group works as it looks at th e assets and generates a key\n        // should this just be hidden behind a dirty flag?\n        const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n\n        // mark each item as having been used..\n        this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n    }\n\n    public setGeometry(geometry: Geometry)\n    {\n        for (const i in geometry.attributes)\n        {\n            const attribute = geometry.attributes[i];\n\n            this._setVertexBuffer(attribute.location, attribute.buffer);\n        }\n\n        if (geometry.indexBuffer)\n        {\n            this._setIndexBuffer(geometry.indexBuffer);\n        }\n    }\n\n    private _setShaderBindGroups(shader: Shader, skipSync?: boolean)\n    {\n        for (const i in shader.groups)\n        {\n            const bindGroup = shader.groups[i] as BindGroup;\n\n            // update any uniforms?\n            if (!skipSync)\n            {\n                this._syncBindGroup(bindGroup);\n            }\n\n            this.setBindGroup(i as unknown as number, bindGroup, shader.gpuProgram);\n        }\n    }\n\n    private _syncBindGroup(bindGroup: BindGroup)\n    {\n        for (const j in bindGroup.resources)\n        {\n            const resource = bindGroup.resources[j];\n\n            if ((resource as UniformGroup).isUniformGroup)\n            {\n                this._renderer.ubo.updateUniformGroup(resource as UniformGroup);\n            }\n        }\n    }\n\n    public draw(options: {\n        geometry: Geometry;\n        shader: Shader;\n        state?: State;\n        topology?: Topology;\n        size?: number;\n        start?: number;\n        instanceCount?: number;\n        skipSync?: boolean;\n    })\n    {\n        const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n\n        this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n        this.setGeometry(geometry);\n        this._setShaderBindGroups(shader, skipSync);\n\n        if (geometry.indexBuffer)\n        {\n            this.renderPassEncoder.drawIndexed(\n                size || geometry.indexBuffer.data.length,\n                instanceCount || geometry.instanceCount,\n                start || 0\n            );\n        }\n        else\n        {\n            this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount || geometry.instanceCount, start || 0);\n        }\n    }\n\n    public finishRenderPass()\n    {\n        if (this.renderPassEncoder)\n        {\n            this.renderPassEncoder.end();\n            this.renderPassEncoder = null;\n        }\n    }\n\n    public postrender()\n    {\n        this.finishRenderPass();\n\n        this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n\n        this._resolveCommandFinished();\n\n        this.commandEncoder = null;\n    }\n\n    // restores a render pass if finishRenderPass was called\n    // not optimised as really used for debugging!\n    // used when we want to stop drawing and log a texture..\n    public restoreRenderPass()\n    {\n        const descriptor = (this._renderer.renderTarget.adaptor as GpuRenderTargetAdaptor).getDescriptor(\n            this._renderer.renderTarget.renderTarget,\n            false,\n            [0, 0, 0, 1],\n        );\n\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n\n        const boundPipeline = this._boundPipeline;\n        const boundVertexBuffer = { ...this._boundVertexBuffer };\n        const boundIndexBuffer = this._boundIndexBuffer;\n        const boundBindGroup = { ...this._boundBindGroup };\n\n        this._clearCache();\n\n        const viewport = this._renderer.renderTarget.viewport;\n\n        this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n\n        // reinstate the cache...\n\n        this.setPipeline(boundPipeline);\n\n        for (const i in boundVertexBuffer)\n        {\n            this._setVertexBuffer(i as unknown as number, boundVertexBuffer[i]);\n        }\n\n        for (const i in boundBindGroup)\n        {\n            this.setBindGroup(i as unknown as number, boundBindGroup[i], null);\n        }\n\n        this._setIndexBuffer(boundIndexBuffer);\n    }\n\n    private _clearCache()\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            this._boundBindGroup[i] = null;\n            this._boundVertexBuffer[i] = null;\n        }\n\n        this._boundIndexBuffer = null;\n        this._boundPipeline = null;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n        this._gpu = null;\n        this._boundBindGroup = null;\n        this._boundVertexBuffer = null;\n        this._boundIndexBuffer = null;\n        this._boundPipeline = null;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GpuStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        this._activeRenderTarget = renderTarget;\n\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        const renderer = this._renderer;\n\n        renderer.pipeline.setStencilMode(stencilMode);\n        renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n    }\n\n    public destroy()\n    {\n        this._renderer.renderTarget.onRenderTargetChange.remove(this);\n\n        (this._renderer as null) = null;\n\n        this._activeRenderTarget = null;\n        this._renderTargetStencilState = null;\n    }\n}\n","import type { UboElement, UboLayout, UNIFORM_TYPES, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_ALIGN_SIZE_DATA: Record<UNIFORM_TYPES | string, {align: number, size: number}> = {\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    f16: { align: 2, size: 2 },\n    'vec2<i32>': { align: 8, size: 8 },\n    'vec2<u32>': { align: 8, size: 8 },\n    'vec2<f32>': { align: 8, size: 8 },\n    'vec2<f16>': { align: 4, size: 4 },\n    'vec3<i32>': { align: 16, size: 12 },\n    'vec3<u32>': { align: 16, size: 12 },\n    'vec3<f32>': { align: 16, size: 12 },\n    'vec3<f16>': { align: 8, size: 6 },\n    'vec4<i32>': { align: 16, size: 16 },\n    'vec4<u32>': { align: 16, size: 16 },\n    'vec4<f32>': { align: 16, size: 16 },\n    'vec4<f16>': { align: 8, size: 8 },\n    'mat2x2<f32>': { align: 8, size: 16 },\n    'mat2x2<f16>': { align: 4, size: 8 },\n    'mat3x2<f32>': { align: 8, size: 24 },\n    'mat3x2<f16>': { align: 4, size: 12 },\n    'mat4x2<f32>': { align: 8, size: 32 },\n    'mat4x2<f16>': { align: 4, size: 16 },\n    'mat2x3<f32>': { align: 16, size: 32 },\n    'mat2x3<f16>': { align: 8, size: 16 },\n    'mat3x3<f32>': { align: 16, size: 48 },\n    'mat3x3<f16>': { align: 8, size: 24 },\n    'mat4x3<f32>': { align: 16, size: 64 },\n    'mat4x3<f16>': { align: 8, size: 32 },\n    'mat2x4<f32>': { align: 16, size: 32 },\n    'mat2x4<f16>': { align: 8, size: 16 },\n    'mat3x4<f32>': { align: 16, size: 48 },\n    'mat3x4<f16>': { align: 8, size: 24 },\n    'mat4x4<f32>': { align: 16, size: 64 },\n    'mat4x4<f16>': { align: 8, size: 32 },\n};\n\nexport function createUboElementsWGSL(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        let size = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].size;\n        const align = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].align;\n\n        if (!WGSL_ALIGN_SIZE_DATA[uboElement.data.type])\n        {\n            throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, align) * uboElement.data.size;\n        }\n\n        offset = Math.ceil((offset) / align) * align;\n\n        // TODO deal with Arrays\n        uboElement.size = size;\n\n        uboElement.offset = offset;\n\n        offset += size;\n    }\n\n    // must align to 16 bits!\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the wgsl layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncWGSL(uboElement: UboElement, offsetToAdd: number): string\n{\n    // this is in byte..\n    const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n    const remainder = (align - size) / 4;\n\n    return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : ''}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 data[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n         }\n     `;\n}\n","/* eslint-disable quote-props */\nimport { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsWGSL } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncWGSL } from './generateArraySyncWGSL';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionWGSL(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboWgsl',\n        generateArraySyncWGSL,\n        uboSyncFunctionsWGSL,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsWGSL } from './shader/utils/createUboElementsWGSL';\nimport { createUboSyncFunctionWGSL } from './shader/utils/createUboSyncFunctionWGSL';\n\n/**\n * System plugin to the renderer to manage uniform buffers. With a WGSL twist!\n * @memberof rendering\n */\nexport class GpuUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsWGSL,\n            generateUboSync: createUboSyncFunctionWGSL,\n        });\n    }\n}\n","import type { Buffer } from '../../shared/buffer/Buffer';\n\nexport class UboBatch\n{\n    private _buffer: Buffer;\n    public data: Float32Array;\n    private readonly _minUniformOffsetAlignment: number = 256;\n\n    public byteIndex = 0;\n\n    constructor({ minUniformOffsetAlignment }: {minUniformOffsetAlignment: number})\n    {\n        this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n        this.data = new Float32Array(65535);\n    }\n\n    public clear(): void\n    {\n        this.byteIndex = 0;\n    }\n\n    public addEmptyGroup(size: number): number\n    {\n        // update the buffer.. only float32 for now!\n        if (size > this._minUniformOffsetAlignment / 4)\n        {\n            throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n        }\n\n        const start = this.byteIndex;\n\n        let newSize = start + (size * 4);\n\n        newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n\n        if (newSize > this.data.length * 4)\n        {\n            // TODO push a new buffer\n            throw new Error('UniformBufferBatch: ubo batch got too big');\n        }\n\n        this.byteIndex = newSize;\n\n        return start;\n    }\n\n    public addGroup(array: Float32Array): number\n    {\n        const offset = this.addEmptyGroup(array.length);\n\n        for (let i = 0; i < array.length; i++)\n        {\n            this.data[(offset / 4) + i] = array[i];\n        }\n\n        return offset;\n    }\n\n    public destroy()\n    {\n        this._buffer.destroy();\n        this._buffer = null;\n\n        this.data = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Buffer } from '../shared/buffer/Buffer';\nimport { BufferResource } from '../shared/buffer/BufferResource';\nimport { BufferUsage } from '../shared/buffer/const';\nimport { UboBatch } from './buffer/UboBatch';\nimport { BindGroup } from './shader/BindGroup';\n\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\nconst minUniformOffsetAlignment = 128;// 256 / 2;\n\n// TODO renderStart and renderFinish - perhaps just make them instructions to fit the architecture of the\n// rest of the system\nexport class GpuUniformBatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'uniformBatch',\n    } as const;\n\n    private _renderer: WebGPURenderer;\n\n    private _bindGroupHash: Record<number, BindGroup> = Object.create(null);\n    private readonly _batchBuffer: UboBatch;\n\n    // number of buffers..\n    private _buffers: Buffer[] = [];\n\n    private _bindGroups: BindGroup[] = [];\n    private _bufferResources: BufferResource[] = [];\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n\n        this._batchBuffer = new UboBatch({ minUniformOffsetAlignment });\n\n        const totalBuffers = (256 / minUniformOffsetAlignment);\n\n        for (let i = 0; i < totalBuffers; i++)\n        {\n            let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n\n            if (i === 0) usage |= BufferUsage.COPY_SRC;\n\n            this._buffers.push(new Buffer({\n                data: this._batchBuffer.data,\n                usage\n            }));\n        }\n    }\n\n    public renderEnd()\n    {\n        this._uploadBindGroups();\n        this._resetBindGroups();\n    }\n\n    private _resetBindGroups()\n    {\n        for (const i in this._bindGroupHash)\n        {\n            this._bindGroupHash[i] = null;\n        }\n\n        this._batchBuffer.clear();\n    }\n\n    // just works for single bind groups for now\n    public getUniformBindGroup(group: UniformGroup<any>, duplicate: boolean): BindGroup\n    {\n        if (!duplicate && this._bindGroupHash[group.uid])\n        {\n            return this._bindGroupHash[group.uid];\n        }\n\n        this._renderer.ubo.ensureUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this._batchBuffer.addEmptyGroup(data.length);\n\n        this._renderer.ubo.syncUniformGroup(group, this._batchBuffer.data, offset / 4);\n\n        this._bindGroupHash[group.uid] = this._getBindGroup(offset / minUniformOffsetAlignment);\n\n        return this._bindGroupHash[group.uid];\n    }\n\n    public getUboResource(group: UniformGroup<any>): BufferResource\n    {\n        this._renderer.ubo.updateUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this._batchBuffer.addGroup(data);\n\n        return this._getBufferResource(offset / minUniformOffsetAlignment);\n    }\n\n    public getArrayBindGroup(data: Float32Array): BindGroup\n    {\n        const offset = this._batchBuffer.addGroup(data);\n\n        return this._getBindGroup(offset / minUniformOffsetAlignment);\n    }\n\n    public getArrayBufferResource(data: Float32Array): BufferResource\n    {\n        const offset = this._batchBuffer.addGroup(data);\n\n        const index = offset / minUniformOffsetAlignment;\n\n        return this._getBufferResource(index);\n    }\n\n    private _getBufferResource(index: number): BufferResource\n    {\n        if (!this._bufferResources[index])\n        {\n            const buffer = this._buffers[index % 2];\n\n            this._bufferResources[index] = new BufferResource({\n                buffer,\n                offset: ((index / 2) | 0) * 256,\n                size: minUniformOffsetAlignment\n            });\n        }\n\n        return this._bufferResources[index];\n    }\n\n    private _getBindGroup(index: number): BindGroup\n    {\n        if (!this._bindGroups[index])\n        {\n            // even!\n            const bindGroup = new BindGroup({\n                0: this._getBufferResource(index),\n            });\n\n            this._bindGroups[index] = bindGroup;\n        }\n\n        return this._bindGroups[index];\n    }\n\n    private _uploadBindGroups()\n    {\n        const bufferSystem = this._renderer.buffer;\n\n        const firstBuffer = this._buffers[0];\n\n        firstBuffer.update(this._batchBuffer.byteIndex);\n\n        bufferSystem.updateBuffer(firstBuffer);\n\n        const commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n\n        for (let i = 1; i < this._buffers.length; i++)\n        {\n            const buffer = this._buffers[i];\n\n            commandEncoder.copyBufferToBuffer(\n                bufferSystem.getGPUBuffer(firstBuffer),\n                minUniformOffsetAlignment,\n                bufferSystem.getGPUBuffer(buffer),\n                0,\n                this._batchBuffer.byteIndex\n            );\n        }\n\n        // TODO make a system that will que up all commands in to one array?\n        this._renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    public destroy()\n    {\n        for (let i = 0; i < this._bindGroups.length; i++)\n        {\n            this._bindGroups[i].destroy();\n        }\n\n        this._bindGroups = null;\n        this._bindGroupHash = null;\n\n        for (let i = 0; i < this._buffers.length; i++)\n        {\n            this._buffers[i].destroy();\n        }\n        this._buffers = null;\n\n        for (let i = 0; i < this._bufferResources.length; i++)\n        {\n            this._bufferResources[i].destroy();\n        }\n\n        this._bufferResources = null;\n\n        this._batchBuffer.destroy();\n        this._bindGroupHash = null;\n\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { ensureAttributes } from '../../gl/shader/program/ensureAttributes';\nimport { STENCIL_MODES } from '../../shared/state/const';\nimport { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { State } from '../../shared/state/State';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuRenderTarget } from '../renderTarget/GpuRenderTarget';\nimport type { GpuProgram } from '../shader/GpuProgram';\nimport type { StencilState } from '../state/GpuStencilModesToPixi';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\nconst topologyStringToId = {\n    'point-list': 0,\n    'line-list': 1,\n    'line-strip': 2,\n    'triangle-list': 3,\n    'triangle-strip': 4,\n};\n\n// geometryLayouts = 256; // 8 bits // 256 states // value 0-255;\n// shaderKeys = 256; // 8 bits // 256 states // value 0-255;\n// state = 64; // 6 bits // 64 states // value 0-63;\n// blendMode = 32; // 5 bits // 32 states // value 0-31;\n// topology = 8; // 3 bits // 8 states // value 0-7;\nfunction getGraphicsStateKey(\n    geometryLayout: number,\n    shaderKey: number,\n    state: number,\n    blendMode: number,\n    topology: number,\n): number\n{\n    return (geometryLayout << 24) // Allocate the 8 bits for geometryLayouts at the top\n         | (shaderKey << 16) // Next 8 bits for shaderKeys\n         | (state << 10) // 6 bits for state\n         | (blendMode << 5) // 5 bits for blendMode\n         | topology; // And 3 bits for topology at the least significant position\n}\n\n// colorMask = 16;// 4 bits // 16 states // value 0-15;\n// stencilState = 8; // 3 bits // 8 states // value 0-7;\n// renderTarget = 1; // 2 bit // 3 states // value 0-3; // none, stencil, depth, depth-stencil\n// multiSampleCount = 1; // 1 bit // 2 states // value 0-1;\nfunction getGlobalStateKey(\n    stencilStateId: number,\n    multiSampleCount: number,\n    colorMask: number,\n    renderTarget: number,\n): number\n{\n    return (colorMask << 6) // Allocate the 4 bits for colorMask at the top\n         | (stencilStateId << 3) // Next 3 bits for stencilStateId\n         | (renderTarget << 1) // 2 bits for renderTarget\n         | multiSampleCount; // And 1 bit for multiSampleCount at the least significant position\n}\n\ntype PipeHash = Record<number, GPURenderPipeline>;\n\n/**\n * A system that creates and manages the GPU pipelines.\n *\n * Caching Mechanism: At its core, the system employs a two-tiered caching strategy to minimize\n * the redundant creation of GPU pipelines (or \"pipes\"). This strategy is based on generating unique\n * keys that represent the state of the graphics settings and the specific requirements of the\n * item being rendered. By caching these pipelines, subsequent draw calls with identical configurations\n * can reuse existing pipelines instead of generating new ones.\n *\n * State Management: The system differentiates between \"global\" state properties (like color masks\n * and stencil masks, which do not change frequently) and properties that may vary between draw calls\n * (such as geometry, shaders, and blend modes). Unique keys are generated for both these categories\n * using getStateKey for global state and getGraphicsStateKey for draw-specific settings. These keys are\n * then then used to caching the pipe. The next time we need a pipe we can check\n * the cache by first looking at the state cache and then the pipe cache.\n * @memberof rendering\n */\nexport class PipelineSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'pipeline',\n    } as const;\n    private readonly _renderer: WebGPURenderer;\n\n    protected CONTEXT_UID: number;\n\n    private _moduleCache: Record<string, GPUShaderModule> = Object.create(null);\n    private _bufferLayoutsCache: Record<number, GPUVertexBufferLayout[]> = Object.create(null);\n\n    private _pipeCache: PipeHash = Object.create(null);\n    private readonly _pipeStateCaches: Record<number, PipeHash> = Object.create(null);\n\n    private _gpu: GPU;\n    private _stencilState: StencilState;\n\n    private _stencilMode: STENCIL_MODES;\n    private _colorMask = 0b1111;\n    private _multisampleCount = 1;\n    private _depthStencilAttachment: 0 | 1;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n        this.setStencilMode(STENCIL_MODES.DISABLED);\n\n        this._updatePipeHash();\n    }\n\n    public setMultisampleCount(multisampleCount: number): void\n    {\n        if (this._multisampleCount === multisampleCount) return;\n\n        this._multisampleCount = multisampleCount;\n\n        this._updatePipeHash();\n    }\n\n    public setRenderTarget(renderTarget: GpuRenderTarget)\n    {\n        this._multisampleCount = renderTarget.msaaSamples;\n        this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n\n        this._updatePipeHash();\n    }\n\n    public setColorMask(colorMask: number): void\n    {\n        if (this._colorMask === colorMask) return;\n\n        this._colorMask = colorMask;\n\n        this._updatePipeHash();\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES): void\n    {\n        if (this._stencilMode === stencilMode) return;\n\n        this._stencilMode = stencilMode;\n        this._stencilState = GpuStencilModesToPixi[stencilMode];\n\n        this._updatePipeHash();\n    }\n\n    public setPipeline(geometry: Geometry, program: GpuProgram, state: State, passEncoder: GPURenderPassEncoder): void\n    {\n        const pipeline = this.getPipeline(geometry, program, state);\n\n        passEncoder.setPipeline(pipeline);\n    }\n\n    public getPipeline(\n        geometry: Geometry,\n        program: GpuProgram,\n        state: State,\n        topology?: Topology,\n    ): GPURenderPipeline\n    {\n        if (!geometry._layoutKey)\n        {\n            ensureAttributes(geometry, program.attributeData);\n\n            // prepare the geometry for the pipeline\n            this._generateBufferKey(geometry);\n        }\n\n        topology = topology || geometry.topology;\n\n        // now we have set the Ids - the key is different...\n        // eslint-disable-next-line max-len\n        const key = getGraphicsStateKey(\n            geometry._layoutKey,\n            program._layoutKey,\n            state.data,\n            state._blendModeId,\n            topologyStringToId[topology],\n        );\n\n        if (this._pipeCache[key]) return this._pipeCache[key];\n\n        this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n\n        return this._pipeCache[key];\n    }\n\n    private _createPipeline(geometry: Geometry, program: GpuProgram, state: State, topology: Topology): GPURenderPipeline\n    {\n        const device = this._gpu.device;\n\n        const buffers = this._createVertexBufferLayouts(geometry);\n\n        const blendModes = this._renderer.state.getColorTargets(state);\n\n        blendModes[0].writeMask = this._stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n\n        const layout = this._renderer.shader.getProgramData(program).pipeline;\n\n        const descriptor: GPURenderPipelineDescriptor = {\n            // TODO later check if its helpful to create..\n            // layout,\n            vertex: {\n                module: this._getModule(program.vertex.source),\n                entryPoint: program.vertex.entryPoint,\n                // geometry..\n                buffers,\n            },\n            fragment: {\n                module: this._getModule(program.fragment.source),\n                entryPoint: program.fragment.entryPoint,\n                targets: blendModes,\n            },\n            primitive: {\n                topology,\n                cullMode: state.cullMode,\n            },\n            layout,\n            multisample: {\n                count: this._multisampleCount,\n            },\n            // depthStencil,\n            label: `PIXI Pipeline`,\n        };\n\n        // only apply if the texture has stencil or depth\n        if (this._depthStencilAttachment)\n        {\n            // mask states..\n            descriptor.depthStencil = {\n                ...this._stencilState,\n                format: 'depth24plus-stencil8',\n                depthWriteEnabled: state.depthTest,\n                depthCompare: state.depthTest ? 'less' : 'always',\n            };\n        }\n\n        const pipeline = device.createRenderPipeline(descriptor);\n\n        return pipeline;\n    }\n\n    private _getModule(code: string): GPUShaderModule\n    {\n        return this._moduleCache[code] || this._createModule(code);\n    }\n\n    private _createModule(code: string): GPUShaderModule\n    {\n        const device = this._gpu.device;\n\n        this._moduleCache[code] = device.createShaderModule({\n            code,\n        });\n\n        return this._moduleCache[code];\n    }\n\n    private _generateBufferKey(geometry: Geometry): number\n    {\n        const keyGen = [];\n        let index = 0;\n        // generate a key..\n\n        const attributeKeys = Object.keys(geometry.attributes).sort();\n\n        for (let i = 0; i < attributeKeys.length; i++)\n        {\n            const attribute = geometry.attributes[attributeKeys[i]];\n\n            keyGen[index++] = attribute.location;\n            keyGen[index++] = attribute.offset;\n            keyGen[index++] = attribute.format;\n            keyGen[index++] = attribute.stride;\n        }\n\n        const stringKey = keyGen.join('');\n\n        geometry._layoutKey = createIdFromString(stringKey, 'geometry');\n\n        return geometry._layoutKey;\n    }\n\n    private _createVertexBufferLayouts(geometry: Geometry): GPUVertexBufferLayout[]\n    {\n        if (this._bufferLayoutsCache[geometry._layoutKey])\n        {\n            return this._bufferLayoutsCache[geometry._layoutKey];\n        }\n\n        const vertexBuffersLayout: GPUVertexBufferLayout[] = [];\n\n        geometry.buffers.forEach((buffer) =>\n        {\n            const bufferEntry: GPUVertexBufferLayout = {\n                arrayStride: 0,\n                stepMode: 'vertex',\n                attributes: [],\n            };\n\n            const bufferEntryAttributes = bufferEntry.attributes as GPUVertexAttribute[];\n\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if (attribute.buffer === buffer)\n                {\n                    bufferEntry.arrayStride = attribute.stride;\n                    bufferEntry.stepMode = attribute.instance ? 'instance' : 'vertex';\n\n                    bufferEntryAttributes.push({\n                        shaderLocation: attribute.location,\n                        offset: attribute.offset,\n                        format: attribute.format,\n                    });\n                }\n            }\n\n            if (bufferEntryAttributes.length)\n            {\n                vertexBuffersLayout.push(bufferEntry);\n            }\n        });\n\n        this._bufferLayoutsCache[geometry._layoutKey] = vertexBuffersLayout;\n\n        return vertexBuffersLayout;\n    }\n\n    private _updatePipeHash(): void\n    {\n        const key = getGlobalStateKey(\n            this._stencilMode,\n            this._multisampleCount,\n            this._colorMask,\n            this._depthStencilAttachment\n        );\n\n        if (!this._pipeStateCaches[key])\n        {\n            this._pipeStateCaches[key] = Object.create(null);\n        }\n\n        this._pipeCache = this._pipeStateCaches[key];\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n        this._bufferLayoutsCache = null;\n    }\n}\n","import type { TextureSource } from '../../shared/texture/sources/TextureSource';\n\n/**\n * A class which holds the canvas contexts and textures for a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GpuRenderTarget\n{\n    public contexts: GPUCanvasContext[] = [];\n    public msaaTextures: TextureSource[] = [];\n    public msaa: boolean;\n    public msaaSamples = 1;\n    public width: number;\n    public height: number;\n    public descriptor: GPURenderPassDescriptor;\n}\n","import { CLEAR } from '../../gl/const';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport { GpuRenderTarget } from './GpuRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\n/**\n * The WebGPU adaptor for the render target system. Allows the Render Target System to\n * be used with the WebGPU renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuRenderTargetAdaptor implements RenderTargetAdaptor<GpuRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GpuRenderTarget>;\n    private _renderer: WebGPURenderer<HTMLCanvasElement>;\n\n    public init(renderer: WebGPURenderer, renderTargetSystem: RenderTargetSystem<GpuRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderer = this._renderer;\n\n        const baseGpuTexture = this._getGpuColorTexture(\n            sourceRenderSurfaceTexture\n        );\n\n        const backGpuTexture = renderer.texture.getGpuSource(\n            destinationTexture.source\n        );\n\n        renderer.encoder.commandEncoder.copyTextureToTexture(\n            {\n                texture: baseGpuTexture,\n                origin: originSrc,\n            },\n            {\n                texture: backGpuTexture,\n                origin: originDest,\n            },\n            size\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n        gpuRenderTarget.descriptor = descriptor;\n\n        // TODO we should not finish a render pass each time we bind\n        // for example filters - we would want to push / pop render targets\n        this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n        this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n        this._renderer.encoder.setViewport(viewport);\n    }\n\n    public finishRenderPass()\n    {\n        this._renderer.encoder.endRenderPass();\n    }\n\n    /**\n     * returns the gpu texture for the first color texture in the render target\n     * mainly used by the filter manager to get copy the texture for blending\n     * @param renderTarget\n     * @returns a gpu texture\n     */\n    private _getGpuColorTexture(renderTarget: RenderTarget): GPUTexture\n    {\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (gpuRenderTarget.contexts[0])\n        {\n            return gpuRenderTarget.contexts[0].getCurrentTexture();\n        }\n\n        return this._renderer.texture.getGpuSource(\n            renderTarget.colorTextures[0].source\n        );\n    }\n\n    public getDescriptor(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL,\n        clearValue: RgbaArray\n    ): GPURenderPassDescriptor\n    {\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        const colorAttachments = renderTarget.colorTextures.map(\n            (texture, i) =>\n            {\n                const context = gpuRenderTarget.contexts[i];\n\n                let view: GPUTextureView;\n                let resolveTarget: GPUTextureView;\n\n                if (context)\n                {\n                    const currentTexture = context.getCurrentTexture();\n\n                    const canvasTextureView = currentTexture.createView();\n\n                    view = canvasTextureView;\n                }\n                else\n                {\n                    view = this._renderer.texture.getGpuSource(texture).createView({\n                        mipLevelCount: 1,\n                    });\n                }\n\n                if (gpuRenderTarget.msaaTextures[i])\n                {\n                    resolveTarget = view;\n                    view = this._renderer.texture.getTextureView(\n                        gpuRenderTarget.msaaTextures[i]\n                    );\n                }\n\n                const loadOp = ((clear as CLEAR) & CLEAR.COLOR ? 'clear' : 'load') as GPULoadOp;\n\n                clearValue ??= renderTargetSystem.defaultClearColor;\n\n                return {\n                    view,\n                    resolveTarget,\n                    clearValue,\n                    storeOp: 'store',\n                    loadOp\n                };\n            }\n        ) as GPURenderPassColorAttachment[];\n\n        let depthStencilAttachment: GPURenderPassDepthStencilAttachment;\n\n        // if we have a depth or stencil buffer, we need to ensure we have a texture for it\n        // this is WebGPU specific - as WebGL does not require textures to run a depth / stencil buffer\n        if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture)\n        {\n            renderTarget.ensureDepthStencilTexture();\n            renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n        }\n\n        if (renderTarget.depthStencilTexture)\n        {\n            const stencilLoadOp = (clear & CLEAR.STENCIL ? 'clear' : 'load') as GPULoadOp;\n            const depthLoadOp = (clear & CLEAR.DEPTH ? 'clear' : 'load') as GPULoadOp;\n\n            depthStencilAttachment = {\n                view: this._renderer.texture\n                    .getGpuSource(renderTarget.depthStencilTexture.source)\n                    .createView(),\n                stencilStoreOp: 'store',\n                stencilLoadOp,\n                depthClearValue: 1.0,\n                depthLoadOp,\n                depthStoreOp: 'store',\n            };\n        }\n\n        const descriptor: GPURenderPassDescriptor = {\n            colorAttachments,\n            depthStencilAttachment,\n        };\n\n        return descriptor;\n    }\n\n    public clear(renderTarget: RenderTarget, clear: CLEAR_OR_BOOL = true, clearColor?: RgbaArray, viewport?: Rectangle)\n    {\n        if (!clear) return;\n\n        const { gpu, encoder } = this._renderer;\n\n        const device = gpu.device;\n\n        const standAlone = encoder.commandEncoder === null;\n\n        if (standAlone)\n        {\n            const commandEncoder = device.createCommandEncoder();\n            const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n            const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n            passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n\n            passEncoder.end();\n\n            const gpuCommands = commandEncoder.finish();\n\n            device.queue.submit([gpuCommands]);\n        }\n        else\n        {\n            this.startRenderPass(renderTarget, clear, clearColor, viewport);\n        }\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GpuRenderTarget\n    {\n        // always false for WebGPU\n        renderTarget.isRoot = true;\n\n        const gpuRenderTarget = new GpuRenderTarget();\n\n        // create a context...\n        // is a canvas...\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (CanvasSource.test(colorTexture.resource))\n            {\n                const context = colorTexture.resource.getContext(\n                    'webgpu'\n                ) as unknown as GPUCanvasContext;\n\n                const alphaMode = (colorTexture as CanvasSource).transparent ? 'premultiplied' : 'opaque';\n\n                try\n                {\n                    context.configure({\n                        device: this._renderer.gpu.device,\n                        // eslint-disable-next-line max-len\n                        usage: GPUTextureUsage.TEXTURE_BINDING\n                            | GPUTextureUsage.COPY_DST\n                            | GPUTextureUsage.RENDER_ATTACHMENT\n                            | GPUTextureUsage.COPY_SRC,\n                        format: 'bgra8unorm',\n                        alphaMode,\n                    });\n                }\n                catch (e)\n                {\n                    console.error(e);\n                }\n\n                gpuRenderTarget.contexts[i] = context;\n            }\n\n            gpuRenderTarget.msaa = colorTexture.source.antialias;\n\n            if (colorTexture.source.antialias)\n            {\n                const msaaTexture = new TextureSource({\n                    width: 0,\n                    height: 0,\n                    sampleCount: 4,\n                });\n\n                gpuRenderTarget.msaaTextures[i] = msaaTexture;\n            }\n        });\n\n        if (gpuRenderTarget.msaa)\n        {\n            gpuRenderTarget.msaaSamples = 4;\n\n            if (renderTarget.depthStencilTexture)\n            {\n                renderTarget.depthStencilTexture.source.sampleCount = 4;\n            }\n        }\n\n        return gpuRenderTarget;\n    }\n\n    public ensureDepthStencilTexture(renderTarget: RenderTarget)\n    {\n        // TODO This function will be more useful once we cache the descriptors\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa)\n        {\n            renderTarget.depthStencilTexture.source.sampleCount = 4;\n        }\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        gpuRenderTarget.width = renderTarget.width;\n        gpuRenderTarget.height = renderTarget.height;\n\n        if (gpuRenderTarget.msaa)\n        {\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const msaaTexture = gpuRenderTarget.msaaTextures[i];\n\n                msaaTexture?.resize(\n                    colorTexture.source.width,\n                    colorTexture.source.height,\n                    colorTexture.source._resolution\n                );\n            });\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GpuRenderTargetAdaptor } from './GpuRenderTargetAdaptor';\n\nimport type { WebGPURenderer } from '../WebGPURenderer';\nimport type { GpuRenderTarget } from './GpuRenderTarget';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GpuRenderTargetSystem extends RenderTargetSystem<GpuRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GpuRenderTargetAdaptor();\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuProgram } from './GpuProgram';\n\nexport interface GPUProgramData\n{\n    bindGroups: GPUBindGroupLayout[]\n    pipeline: GPUPipelineLayout\n}\n\n/**\n * A system that manages the rendering of GpuPrograms.\n * @memberof rendering\n */\nexport class GpuShaderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    private _gpu: GPU;\n\n    private readonly _gpuProgramData: Record<number, GPUProgramData> = Object.create(null);\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getProgramData(program: GpuProgram)\n    {\n        return this._gpuProgramData[program._layoutKey] || this._createGPUProgramData(program);\n    }\n\n    private _createGPUProgramData(program: GpuProgram)\n    {\n        const device = this._gpu.device;\n\n        const bindGroups = program.gpuLayout.map((group) => device.createBindGroupLayout({ entries: group }));\n\n        const pipelineLayoutDesc = { bindGroupLayouts: bindGroups };\n\n        this._gpuProgramData[program._layoutKey] = {\n            bindGroups,\n            pipeline: device.createPipelineLayout(pipelineLayoutDesc),\n        };\n\n        // generally we avoid having to make this automatically\n        // keeping this for a reminder, if any issues popup\n        // program._gpuLayout = {\n        //     bindGroups: null,\n        //     pipeline: 'auto',\n        // };\n\n        return this._gpuProgramData[program._layoutKey];\n    }\n\n    public destroy(): void\n    {\n        // TODO destroy the _gpuProgramData\n        this._gpu = null;\n        (this._gpuProgramData as null) = null;\n    }\n}\n","import type { BLEND_MODES } from '../../shared/state/const';\n\nexport const GpuBlendModesToPixi: Partial<Record<BLEND_MODES, GPUBlendState>> = {};\n\nGpuBlendModesToPixi.normal = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.add = {\n    alpha: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.multiply = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'dst',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.screen = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.overlay = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.none = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'zero',\n        dstFactor: 'zero',\n        operation: 'add',\n    },\n};\n\n// not-premultiplied blend modes\nGpuBlendModesToPixi['normal-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi['add-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi['screen-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.erase = {\n    alpha: {\n        srcFactor: 'zero',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'zero',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\n// composite operations\n// GpuBlendModesToPixi[BLEND_MODES.SRC_IN] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'dst-alpha',\n//         dstFactor: 'zero',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.SRC_OUT] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'zero',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.SRC_ATOP] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_OVER] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_IN] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'zero',\n//         dstFactor: 'src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_OUT] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'zero',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_ATOP] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.XOR] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// TODO - fix me\n// GLBlendModesToPixi[BLEND_MODES.SUBTRACT] = {\n//     alpha: {\n//         srcFactor: 'one',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof rendering\n */\nexport class GpuStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'state',\n    } as const;\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gpu: GPU;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    /**\n     * Gets the blend mode data for the current state\n     * @param state - The state to get the blend mode from\n     */\n    public getColorTargets(state: State): GPUColorTargetState[]\n    {\n        const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n\n        return [\n            {\n                format: 'bgra8unorm',\n                writeMask: 0,\n                blend,\n            },\n        ];\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n    }\n}\n","import type { BufferImageSource } from '../../../shared/texture/sources/BufferSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadBufferImageResource = {\n\n    type: 'image',\n\n    upload(source: BufferImageSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        const resource = source.resource;\n\n        const total = (source.pixelWidth | 0) * (source.pixelHeight | 0);\n\n        const bytesPerPixel = resource.byteLength / total;\n\n        gpu.device.queue.writeTexture(\n            { texture: gpuTexture },\n            resource,\n            {\n                offset: 0,\n                rowsPerImage: source.pixelHeight,\n                bytesPerRow: source.pixelHeight * bytesPerPixel,\n            },\n            {\n                width: source.pixelWidth,\n                height: source.pixelHeight,\n                depthOrArrayLayers: 1,\n            }\n        );\n    }\n} as GpuTextureUploader<BufferImageSource>;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const blockDataMap: Record<string, {blockBytes: number, blockWidth: number, blockHeight: number}> = {\n    'bc1-rgba-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'bc2-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc3-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc7-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'etc1-rgb-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'etc2-rgba8unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'astc-4x4-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n};\n\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\nexport const gpuUploadCompressedTextureResource = {\n\n    type: 'compressed',\n\n    upload(source: CompressedSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const blockData = blockDataMap[source.format] || defaultBlockData;\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n\n            gpu.device.queue.writeTexture(\n                {\n                    texture: gpuTexture,\n                    mipLevel: i\n                },\n                levelBuffer,\n                {\n                    offset: 0,\n                    bytesPerRow,\n                },\n                {\n                    width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n                    height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n                    depthOrArrayLayers: 1,\n                }\n            );\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GpuTextureUploader<CompressedSource>;\n\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadImageResource = {\n\n    type: 'image',\n\n    upload(source: TextureSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        const resource = source.resource as ImageBitmap | HTMLCanvasElement | OffscreenCanvas;\n\n        if (!resource) return;\n\n        const width = Math.min(gpuTexture.width, source.resourceWidth || source.pixelWidth);\n        const height = Math.min(gpuTexture.height, source.resourceHeight || source.pixelHeight);\n\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gpu.device.queue.copyExternalImageToTexture(\n            { source: resource },\n            { texture: gpuTexture, premultipliedAlpha },\n            {\n                width,\n                height,\n            }\n        );\n    }\n} as GpuTextureUploader<TextureSource>;\n\n","import { gpuUploadImageResource } from './gpuUploadImageSource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadVideoResource = {\n\n    type: 'video',\n\n    upload(source: VideoSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        gpuUploadImageResource.upload(source, gpuTexture, gpu);\n    }\n} as GpuTextureUploader<VideoSource>;\n\n","/**\n * A class which generates mipmaps for a GPUTexture.\n * Thanks to @toji for the original implementation\n * https://github.com/toji/web-texture-tool/blob/main/src/webgpu-mipmap-generator.js\n * @memberof rendering\n * @ignore\n */\nexport class GpuMipmapGenerator\n{\n    public device: GPUDevice;\n    public sampler: GPUSampler;\n    public pipelines: Record<string, GPURenderPipeline>;\n\n    public mipmapShaderModule: any;\n\n    constructor(device: GPUDevice)\n    {\n        this.device = device;\n        this.sampler = device.createSampler({ minFilter: 'linear' });\n        // We'll need a new pipeline for every texture format used.\n        this.pipelines = {};\n    }\n\n    private _getMipmapPipeline(format: GPUTextureFormat)\n    {\n        let pipeline = this.pipelines[format];\n\n        if (!pipeline)\n        {\n            // Shader modules is shared between all pipelines, so only create once.\n            if (!this.mipmapShaderModule)\n            {\n                this.mipmapShaderModule = this.device.createShaderModule({\n                    code: /* wgsl */ `\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    `,\n                });\n            }\n\n            pipeline = this.device.createRenderPipeline({\n                layout: 'auto',\n                vertex: {\n                    module: this.mipmapShaderModule,\n                    entryPoint: 'vertexMain',\n                },\n                fragment: {\n                    module: this.mipmapShaderModule,\n                    entryPoint: 'fragmentMain',\n                    targets: [{ format }],\n                }\n            });\n\n            this.pipelines[format] = pipeline;\n        }\n\n        return pipeline;\n    }\n\n    /**\n     * Generates mipmaps for the given GPUTexture from the data in level 0.\n     * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.\n     * @returns {module:External.GPUTexture} - The originally passed texture\n     */\n    public generateMipmap(texture: GPUTexture)\n    {\n        const pipeline = this._getMipmapPipeline(texture.format);\n\n        if (texture.dimension === '3d' || texture.dimension === '1d')\n        {\n            throw new Error('Generating mipmaps for non-2d textures is currently unsupported!');\n        }\n\n        let mipTexture = texture;\n        const arrayLayerCount = texture.depthOrArrayLayers || 1; // Only valid for 2D textures.\n\n        // If the texture was created with RENDER_ATTACHMENT usage we can render directly between mip levels.\n        const renderToSource = texture.usage & GPUTextureUsage.RENDER_ATTACHMENT;\n\n        if (!renderToSource)\n        {\n            // Otherwise we have to use a separate texture to render into. It can be one mip level smaller than the source\n            // texture, since we already have the top level.\n            const mipTextureDescriptor = {\n                size: {\n                    width: Math.ceil(texture.width / 2),\n                    height: Math.ceil(texture.height / 2),\n                    depthOrArrayLayers: arrayLayerCount,\n                },\n                format: texture.format,\n                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n                mipLevelCount: texture.mipLevelCount - 1,\n            };\n\n            mipTexture = this.device.createTexture(mipTextureDescriptor);\n        }\n\n        const commandEncoder = this.device.createCommandEncoder({});\n        // TODO: Consider making this static.\n        const bindGroupLayout = pipeline.getBindGroupLayout(0);\n\n        for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer)\n        {\n            let srcView = texture.createView({\n                baseMipLevel: 0,\n                mipLevelCount: 1,\n                dimension: '2d',\n                baseArrayLayer: arrayLayer,\n                arrayLayerCount: 1,\n            });\n\n            let dstMipLevel = renderToSource ? 1 : 0;\n\n            for (let i = 1; i < texture.mipLevelCount; ++i)\n            {\n                const dstView = mipTexture.createView({\n                    baseMipLevel: dstMipLevel++,\n                    mipLevelCount: 1,\n                    dimension: '2d',\n                    baseArrayLayer: arrayLayer,\n                    arrayLayerCount: 1,\n                });\n\n                const passEncoder = commandEncoder.beginRenderPass({\n                    colorAttachments: [{\n                        view: dstView,\n                        storeOp: 'store',\n                        loadOp: 'clear',\n                        clearValue: { r: 0, g: 0, b: 0, a: 0 },\n                    }],\n                });\n\n                const bindGroup = this.device.createBindGroup({\n                    layout: bindGroupLayout,\n                    entries: [{\n                        binding: 0,\n                        resource: this.sampler,\n                    }, {\n                        binding: 1,\n                        resource: srcView,\n                    }],\n                });\n\n                passEncoder.setPipeline(pipeline);\n                passEncoder.setBindGroup(0, bindGroup);\n                passEncoder.draw(3, 1, 0, 0);\n\n                passEncoder.end();\n\n                srcView = dstView;\n            }\n        }\n\n        // If we didn't render to the source texture, finish by copying the mip results from the temporary mipmap texture\n        // to the source.\n        if (!renderToSource)\n        {\n            const mipLevelSize = {\n                width: Math.ceil(texture.width / 2),\n                height: Math.ceil(texture.height / 2),\n                depthOrArrayLayers: arrayLayerCount,\n            };\n\n            for (let i = 1; i < texture.mipLevelCount; ++i)\n            {\n                commandEncoder.copyTextureToTexture({\n                    texture: mipTexture,\n                    mipLevel: i - 1,\n                }, {\n                    texture,\n                    mipLevel: i,\n                }, mipLevelSize);\n\n                mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);\n                mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);\n            }\n        }\n\n        this.device.queue.submit([commandEncoder.finish()]);\n\n        if (!renderToSource)\n        {\n            mipTexture.destroy();\n        }\n\n        return texture;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { CanvasPool } from '../../shared/texture/CanvasPool';\nimport { BindGroup } from '../shader/BindGroup';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource';\nimport { blockDataMap, gpuUploadCompressedTextureResource } from './uploaders/gpuUploadCompressedTextureResource';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource';\nimport { gpuUploadVideoResource } from './uploaders/gpuUploadVideoSource';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture, Texture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { WebGPURenderer } from '../WebGPURenderer';\nimport type { GpuTextureUploader } from './uploaders/GpuTextureUploader';\n\n/**\n * The system that handles textures for the GPU.\n * @memberof rendering\n */\nexport class GpuTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    protected CONTEXT_UID: number;\n    private _gpuSources: Record<number, GPUTexture> = Object.create(null);\n    private _gpuSamplers: Record<string, GPUSampler> = Object.create(null);\n    private _bindGroupHash: Record<string, BindGroup> = Object.create(null);\n    private _textureViewHash: Record<string, GPUTextureView> = Object.create(null);\n\n    private readonly _uploads: Record<string, GpuTextureUploader> = {\n        image: gpuUploadImageResource,\n        buffer: gpuUploadBufferImageResource,\n        video: gpuUploadVideoResource,\n        compressed: gpuUploadCompressedTextureResource\n    };\n\n    private _gpu: GPU;\n    private _mipmapGenerator?: GpuMipmapGenerator;\n\n    private readonly _renderer: WebGPURenderer;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public initSource(source: TextureSource): GPUTexture\n    {\n        if (source.autoGenerateMipmaps)\n        {\n            const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n\n        if (source.uploadMethodId !== 'compressed')\n        {\n            usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n            usage |= GPUTextureUsage.COPY_SRC;\n        }\n\n        const blockData = blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\n        const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n        const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n\n        const textureDescriptor: GPUTextureDescriptor = {\n            label: source.label,\n            size: { width, height },\n            format: source.format,\n            sampleCount: source.sampleCount,\n            mipLevelCount: source.mipLevelCount,\n            dimension: source.dimension,\n            usage\n        };\n\n        const gpuTexture = this._gpu.device.createTexture(textureDescriptor);\n\n        this._gpuSources[source.uid] = gpuTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceResize, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n\n        return gpuTexture;\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gpuTexture = this.getGpuSource(source);\n\n        // destroyed!\n        if (!gpuTexture) return;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source);\n        }\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const gpuTexture = this._gpuSources[source.uid];\n\n        if (gpuTexture)\n        {\n            this._gpuSources[source.uid] = null;\n\n            gpuTexture.destroy();\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource): void\n    {\n        if (!this._mipmapGenerator)\n        {\n            this._mipmapGenerator = new GpuMipmapGenerator(this._gpu.device);\n        }\n\n        const gpuTexture = this.getGpuSource(source);\n\n        this._mipmapGenerator.generateMipmap(gpuTexture);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('update', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('resize', this.onSourceResize, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    protected onSourceResize(source: TextureSource): void\n    {\n        const gpuTexture = this._gpuSources[source.uid];\n\n        if (!gpuTexture)\n        {\n            this.initSource(source);\n        }\n        else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight)\n        {\n            this._textureViewHash[source.uid] = null;\n            this._bindGroupHash[source.uid] = null;\n\n            this.onSourceUnload(source);\n            this.initSource(source);\n        }\n    }\n\n    private _initSampler(sampler: TextureStyle): GPUSampler\n    {\n        this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n\n        return this._gpuSamplers[sampler._resourceId];\n    }\n\n    public getGpuSampler(sampler: TextureStyle): GPUSampler\n    {\n        return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGpuSource(source: TextureSource): GPUTexture\n    {\n        return this._gpuSources[source.uid] || this.initSource(source);\n    }\n\n    public getTextureBindGroup(texture: Texture)\n    {\n        return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n    }\n\n    private _createTextureBindGroup(texture: BindableTexture)\n    {\n        const source = texture.source;\n\n        const bindGroupId = source.uid;\n\n        this._bindGroupHash[bindGroupId] = new BindGroup({\n            0: source,\n            1: source.style,\n        });\n\n        return this._bindGroupHash[bindGroupId];\n    }\n\n    public getTextureView(texture: BindableTexture)\n    {\n        const source = texture.source;\n\n        return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n    }\n\n    private _createTextureView(texture: TextureSource)\n    {\n        this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n\n        return this._textureViewHash[texture.uid];\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const renderer = this._renderer;\n\n        const commandEncoder = renderer.gpu.device.createCommandEncoder();\n\n        // create canvas\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = texture.source.pixelWidth;\n        canvas.height = texture.source.pixelHeight;\n\n        const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\n\n        context.configure({\n            device: renderer.gpu.device,\n            // eslint-disable-next-line max-len\n            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n            format: navigator.gpu.getPreferredCanvasFormat(),\n            alphaMode: 'premultiplied',\n        });\n\n        commandEncoder.copyTextureToTexture({\n            texture: renderer.texture.getGpuSource(texture.source),\n            origin: {\n                x: 0,\n                y: 0,\n            },\n        }, {\n            texture: context.getCurrentTexture(),\n        }, {\n            width: canvas.width,\n            height: canvas.height,\n        });\n\n        renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const webGPUCanvas = this.generateCanvas(texture);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n\n        const context = canvasAndContext.context;\n\n        context.drawImage(webGPUCanvas, 0, 0);\n\n        const { width, height } = webGPUCanvas;\n\n        const imageData = context.getImageData(0, 0, width, height);\n\n        const pixels = new Uint8ClampedArray(imageData.data.buffer);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return { pixels, width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the aarry with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        for (const k of Object.keys(this._bindGroupHash))\n        {\n            const key = Number(k);\n            const bindGroup = this._bindGroupHash[key];\n\n            bindGroup?.destroy();\n            this._bindGroupHash[key] = null;\n        }\n\n        this._gpu = null;\n        this._mipmapGenerator = null;\n        this._gpuSources = null;\n        this._bindGroupHash = null;\n        this._textureViewHash = null;\n        this._gpuSamplers = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GpuGraphicsAdaptor } from '../../../scene/graphics/gpu/GpuGraphicsAdaptor';\nimport { GpuMeshAdapter } from '../../../scene/mesh/gpu/GpuMeshAdapter';\nimport { GpuBatchAdaptor } from '../../batcher/gpu/GpuBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { BindGroupSystem } from './BindGroupSystem';\nimport { GpuBufferSystem } from './buffer/GpuBufferSystem';\nimport { GpuColorMaskSystem } from './GpuColorMaskSystem';\nimport { type GPU, GpuDeviceSystem } from './GpuDeviceSystem';\nimport { GpuEncoderSystem } from './GpuEncoderSystem';\nimport { GpuStencilSystem } from './GpuStencilSystem';\nimport { GpuUboSystem } from './GpuUboSystem';\nimport { GpuUniformBatchPipe } from './GpuUniformBatchPipe';\nimport { PipelineSystem } from './pipeline/PipelineSystem';\nimport { GpuRenderTargetSystem } from './renderTarget/GpuRenderTargetSystem';\nimport { GpuShaderSystem } from './shader/GpuShaderSystem';\nimport { GpuStateSystem } from './state/GpuStateSystem';\nimport { GpuTextureSystem } from './texture/GpuTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\n\nconst DefaultWebGPUSystems = [\n    ...SharedSystems,\n    GpuUboSystem,\n    GpuEncoderSystem,\n    GpuDeviceSystem,\n    GpuBufferSystem,\n    GpuTextureSystem,\n    GpuRenderTargetSystem,\n    GpuShaderSystem,\n    GpuStateSystem,\n    PipelineSystem,\n    GpuColorMaskSystem,\n    GpuStencilSystem,\n    BindGroupSystem,\n];\nconst DefaultWebGPUPipes = [...SharedRenderPipes, GpuUniformBatchPipe];\nconst DefaultWebGPUAdapters = [GpuBatchAdaptor, GpuMeshAdapter, GpuGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGPUSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGPUPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGPUPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGPUSystems, ...DefaultWebGPUPipes, ...DefaultWebGPUAdapters);\n\ntype WebGPUSystems = ExtractSystemTypes<typeof DefaultWebGPUSystems> &\nPixiMixins.RendererSystems &\nPixiMixins.WebGPUSystems;\n\nexport type WebGPUPipes = ExtractSystemTypes<typeof DefaultWebGPUPipes> &\nPixiMixins.RendererPipes &\nPixiMixins.WebGPUPipes;\n\n/** Options for WebGPURenderer. */\nexport type WebGPUOptions = ExtractRendererOptions<typeof DefaultWebGPUSystems> &\nPixiMixins.RendererOptions &\nPixiMixins.WebGPUOptions;\n\nexport interface WebGPURenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGPUPipes, WebGPUOptions, T>,\n    WebGPUSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGPU PixiJS Renderer. This renderer allows you to use the next-generation graphics API, WebGPU.\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGPURenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer();\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGPU renderer:\n *\n * | WebGPU Core Systems                      | Systems that are specific to the WebGL renderer                               |\n * | ---------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GpuUboSystem}           | This manages WebGPU uniform buffer objects feature for shaders                |\n * | {@link rendering.GpuEncoderSystem}       | This manages the WebGPU command encoder                                       |\n * | {@link rendering.GpuDeviceSystem}        | This manages the WebGPU Device and its extensions                             |\n * | {@link rendering.GpuBufferSystem}        | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GpuTextureSystem}       | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GpuRenderTargetSystem}  | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GpuShaderSystem}        | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GpuStateSystem}         | This manages the state of the WebGPU Pipelines. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.PipelineSystem}         | This manages the WebGPU pipelines, used for rendering                         |\n * | {@link rendering.GpuColorMaskSystem}     | This manages the color mask. Used for color masking                           |\n * | {@link rendering.GpuStencilSystem}       | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.BindGroupSystem}        | This manages the WebGPU bind groups. this is how data is bound to a shader when rendering |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GpuUboSystem} ubo - UboSystem instance.\n * @property {rendering.GpuEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GpuDeviceSystem} device - DeviceSystem instance.\n * @property {rendering.GpuBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GpuTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GpuRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GpuShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GpuStateSystem} state - StateSystem instance.\n * @property {rendering.PipelineSystem} pipeline - PipelineSystem instance.\n * @property {rendering.GpuColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @property {rendering.GpuStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.BindGroupSystem} bindGroup - BindGroupSystem instance.\n * @extends rendering.AbstractRenderer\n */\nexport class WebGPURenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGPUPipes, WebGPUOptions, T>\n    implements WebGPUSystems\n{\n    /** The WebGPU Device. */\n    public gpu: GPU;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgpu',\n            type: RendererType.WEBGPU,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n"],"names":["GpuGraphicsAdaptor","init","localUniforms","UniformGroup","uTransformMatrix","value","Matrix","type","uColor","Float32Array","uRound","gpuProgram","compileHighShaderGpuProgram","name","bits","colorBit","generateTextureBatchBit","MAX_TEXTURES","localUniformBitGroup2","roundPixelsBit","shader","Shader","resources","execute","graphicsPipe","renderable","context","customShader","this","renderer","contextSystem","graphicsContext","geometry","instructions","getContextRenderData","encoder","setPipelineFromGeometryProgramAndState","state","setGeometry","globalUniformsBindGroup","globalUniforms","bindGroup","setBindGroup","localBindGroup","renderPipes","uniformBatch","getUniformBindGroup","batches","i","instructionSize","batch","groups","gpuBindGroup","textureBatch","textures","getTextureBatchBindGroup","count","getBindGroup","renderPassEncoder","drawIndexed","size","start","destroy","extension","ExtensionType","WebGPUPipesAdaptor","GpuMeshAdapter","localUniformBit","textureBit","_shader","uTexture","Texture","EMPTY","_source","uSampler","style","meshPipe","mesh","warn","texture","getTextureBindGroup","autoAssignGlobalUniforms","autoAssignLocalUniforms","draw","_geometry","tempState","State","for2d","GpuBatchAdaptor","batchPipe","program","blendMode","pipeline","getPipeline","resetBindGroup","_touch","textureGC","setPipeline","BindGroupSystem","constructor","_hash","Object","create","_renderer","contextChange","gpu","_gpu","groupIndex","_updateKey","_key","_createBindGroup","group","device","groupLayout","layout","entries","j","_group$resources$j","resource","gpuResource","_resourceType","uniformGroup","ubo","updateUniformGroup","buffer","getGPUBuffer","offset","descriptor","bufferResource","sampler","getGpuSampler","getGpuSource","createView","push","binding","getProgramData","bindGroups","createBindGroup","key","keys","WebGPUSystem","GpuBufferSystem","_gpuBuffers","_managedBuffers","uid","createGPUBuffer","updateBuffer","gpuBuffer","data","_updateID","queue","writeBuffer","_updateSize","byteLength","destroyAll","id","on","onBufferChange","onBufferDestroy","createBuffer","fastCopy","getMappedRange","unmap","splice","indexOf","off","slice","forEach","GpuColorMaskSystem","_colorMaskCache","setMask","colorMask","setColorMask","GpuDeviceSystem","options","_initPromise","_createDeviceAndAdaptor","then","runners","emit","adapter","navigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","requestDevice","defaultOptions","GpuEncoderSystem","_boundBindGroup","_boundVertexBuffer","renderStart","commandFinished","Promise","resolve","_resolveCommandFinished","commandEncoder","createCommandEncoder","beginRenderPass","gpuRenderTarget","endRenderPass","_clearCache","end","setViewport","viewport","x","y","width","height","topology","_boundPipeline","_setVertexBuffer","index","setVertexBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","BYTES_PER_ELEMENT","setIndexBuffer","attributes","attribute","location","indexBuffer","_setShaderBindGroups","skipSync","_syncBindGroup","isUniformGroup","instanceCount","length","getSize","finishRenderPass","postrender","submit","finish","restoreRenderPass","renderTarget","adaptor","getDescriptor","boundPipeline","boundVertexBuffer","boundIndexBuffer","boundBindGroup","priority","GpuStencilSystem","_renderTargetStencilState","onRenderTargetChange","add","stencilState","stencilMode","STENCIL_MODES","DISABLED","stencilReference","_activeRenderTarget","setStencilMode","setStencilReference","remove","WGSL_ALIGN_SIZE_DATA","i32","align","u32","f32","f16","createUboElementsWGSL","uniformData","uboElements","map","uboElement","Error","concat","Math","max","ceil","generateArraySyncWGSL","offsetToAdd","remainder","createUboSyncFunctionWGSL","createUboSyncFunction","uboSyncFunctionsWGSL","GpuUboSystem","UboSystem","createUboElements","generateUboSync","UboBatch","_ref","minUniformOffsetAlignment","_minUniformOffsetAlignment","byteIndex","clear","addEmptyGroup","newSize","addGroup","array","_buffer","GpuUniformBatchPipe","_bindGroupHash","_buffers","_bindGroups","_bufferResources","_batchBuffer","usage","BufferUsage","UNIFORM","COPY_DST","COPY_SRC","Buffer","renderEnd","_uploadBindGroups","_resetBindGroups","duplicate","ensureUniformGroup","syncUniformGroup","_getBindGroup","getUboResource","_getBufferResource","getArrayBindGroup","getArrayBufferResource","BufferResource","BindGroup","bufferSystem","firstBuffer","update","copyBufferToBuffer","WebGPUPipes","topologyStringToId","PipelineSystem","_moduleCache","_bufferLayoutsCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","msaaSamples","_depthStencilAttachment","depthStencilAttachment","_stencilMode","_stencilState","GpuStencilModesToPixi","passEncoder","_layoutKey","ensureAttributes","attributeData","_generateBufferKey","geometryLayout","shaderKey","getGraphicsStateKey","_blendModeId","_createPipeline","buffers","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","RENDERING_MASK_ADD","vertex","module","_getModule","source","entryPoint","fragment","targets","primitive","cullMode","multisample","label","depthStencil","format","depthWriteEnabled","depthTest","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","attributeKeys","sort","stride","stringKey","join","createIdFromString","vertexBuffersLayout","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","instance","shaderLocation","stencilStateId","multiSampleCount","GpuRenderTarget","contexts","msaaTextures","GpuRenderTargetAdaptor","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","baseGpuTexture","_getGpuColorTexture","backGpuTexture","copyTextureToTexture","origin","startRenderPass","arguments","undefined","clearColor","getGpuRenderTarget","getCurrentTexture","colorTextures","clearValue","CLEAR","ALL","NONE","colorAttachments","_clearValue","view","resolveTarget","mipLevelCount","getTextureView","loadOp","COLOR","defaultClearColor","storeOp","stencil","depth","depthStencilTexture","ensureDepthStencilTexture","sampleCount","msaa","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","stencilStoreOp","depthClearValue","depthStoreOp","renderPassDescriptor","gpuCommands","initGpuRenderTarget","isRoot","colorTexture","CanvasSource","test","getContext","alphaMode","transparent","configure","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","e","console","error","antialias","msaaTexture","TextureSource","resizeGpuRenderTarget","resize","_resolution","GpuRenderTargetSystem","RenderTargetSystem","super","GpuShaderSystem","_gpuProgramData","_createGPUProgramData","gpuLayout","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","GpuBlendModesToPixi","alpha","srcFactor","dstFactor","operation","color","GpuStateSystem","defaultState","blend","normal","gpuUploadBufferImageResource","upload","gpuTexture","total","pixelWidth","pixelHeight","bytesPerPixel","writeTexture","rowsPerImage","bytesPerRow","depthOrArrayLayers","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","mipWidth","mipHeight","blockData","levelBuffer","mipLevel","gpuUploadImageResource","min","resourceWidth","resourceHeight","premultipliedAlpha","copyExternalImageToTexture","gpuUploadVideoResource","GpuMipmapGenerator","createSampler","minFilter","pipelines","_getMipmapPipeline","mipmapShaderModule","generateMipmap","dimension","mipTexture","arrayLayerCount","renderToSource","mipTextureDescriptor","createTexture","bindGroupLayout","getBindGroupLayout","arrayLayer","srcView","baseMipLevel","baseArrayLayer","dstMipLevel","dstView","r","g","b","a","mipLevelSize","GpuTextureSystem","managedTextures","_gpuSources","_gpuSamplers","_textureViewHash","_uploads","image","video","compressed","initSource","autoGenerateMipmaps","biggestDimension","floor","log2","uploadMethodId","textureDescriptor","includes","onSourceUpdate","onSourceResize","onSourceDestroy","onSourceUnload","onUpdateMipmaps","_mipmapGenerator","_initSampler","_resourceId","_this$_bindGroupHash$","_createTextureBindGroup","bindGroupId","_this$_textureViewHas","_createTextureView","generateCanvas","canvas","DOMAdapter","get","createCanvas","getPreferredCanvasFormat","getPixels","webGPUCanvas","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","drawImage","imageData","getImageData","pixels","Uint8ClampedArray","returnCanvasAndContext","k","Number","DefaultWebGPUSystems","SharedSystems","DefaultWebGPUPipes","SharedRenderPipes","DefaultWebGPUAdapters","systems","renderPipeAdaptors","extensions","handleByNamedList","WebGPURenderer","AbstractRenderer","RendererType","WEBGPU","canvasOptions","_canvasPool","enableFullScreen","_createCanvasAndContext","minWidth","minHeight","resolution","nextPow2","pop"],"sourceRoot":""}